
bmp_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080082e8  080082e8  000182e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800870c  0800870c  000209b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008714  08008714  000209b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008714  08008714  00018714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b8  20000000  08008720  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200009b8  080090d8  000209b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a9c  080090d8  00020a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000069c0  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001489  00000000  00000000  000273a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00028830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00028fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bf  00000000  00000000  000296b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009248  00000000  00000000  00040e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000839e4  00000000  00000000  0004a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cda9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031ec  00000000  00000000  000cdaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200009b8 	.word	0x200009b8
 800012c:	00000000 	.word	0x00000000
 8000130:	080082d0 	.word	0x080082d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200009bc 	.word	0x200009bc
 800014c:	080082d0 	.word	0x080082d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <strlen>:
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d1fb      	bne.n	8000baa <strlen+0x2>
 8000bb2:	1a18      	subs	r0, r3, r0
 8000bb4:	3801      	subs	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__gedf2>:
 8000bb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bbc:	e006      	b.n	8000bcc <__cmpdf2+0x4>
 8000bbe:	bf00      	nop

08000bc0 <__ledf2>:
 8000bc0:	f04f 0c01 	mov.w	ip, #1
 8000bc4:	e002      	b.n	8000bcc <__cmpdf2+0x4>
 8000bc6:	bf00      	nop

08000bc8 <__cmpdf2>:
 8000bc8:	f04f 0c01 	mov.w	ip, #1
 8000bcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bdc:	bf18      	it	ne
 8000bde:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000be2:	d01b      	beq.n	8000c1c <__cmpdf2+0x54>
 8000be4:	b001      	add	sp, #4
 8000be6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000bea:	bf0c      	ite	eq
 8000bec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000bf0:	ea91 0f03 	teqne	r1, r3
 8000bf4:	bf02      	ittt	eq
 8000bf6:	ea90 0f02 	teqeq	r0, r2
 8000bfa:	2000      	moveq	r0, #0
 8000bfc:	4770      	bxeq	lr
 8000bfe:	f110 0f00 	cmn.w	r0, #0
 8000c02:	ea91 0f03 	teq	r1, r3
 8000c06:	bf58      	it	pl
 8000c08:	4299      	cmppl	r1, r3
 8000c0a:	bf08      	it	eq
 8000c0c:	4290      	cmpeq	r0, r2
 8000c0e:	bf2c      	ite	cs
 8000c10:	17d8      	asrcs	r0, r3, #31
 8000c12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000c16:	f040 0001 	orr.w	r0, r0, #1
 8000c1a:	4770      	bx	lr
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__cmpdf2+0x64>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d107      	bne.n	8000c3c <__cmpdf2+0x74>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d1d6      	bne.n	8000be4 <__cmpdf2+0x1c>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d0d3      	beq.n	8000be4 <__cmpdf2+0x1c>
 8000c3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <__aeabi_cdrcmple>:
 8000c44:	4684      	mov	ip, r0
 8000c46:	4610      	mov	r0, r2
 8000c48:	4662      	mov	r2, ip
 8000c4a:	468c      	mov	ip, r1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4663      	mov	r3, ip
 8000c50:	e000      	b.n	8000c54 <__aeabi_cdcmpeq>
 8000c52:	bf00      	nop

08000c54 <__aeabi_cdcmpeq>:
 8000c54:	b501      	push	{r0, lr}
 8000c56:	f7ff ffb7 	bl	8000bc8 <__cmpdf2>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	bf48      	it	mi
 8000c5e:	f110 0f00 	cmnmi.w	r0, #0
 8000c62:	bd01      	pop	{r0, pc}

08000c64 <__aeabi_dcmpeq>:
 8000c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c68:	f7ff fff4 	bl	8000c54 <__aeabi_cdcmpeq>
 8000c6c:	bf0c      	ite	eq
 8000c6e:	2001      	moveq	r0, #1
 8000c70:	2000      	movne	r0, #0
 8000c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c76:	bf00      	nop

08000c78 <__aeabi_dcmplt>:
 8000c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c7c:	f7ff ffea 	bl	8000c54 <__aeabi_cdcmpeq>
 8000c80:	bf34      	ite	cc
 8000c82:	2001      	movcc	r0, #1
 8000c84:	2000      	movcs	r0, #0
 8000c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8a:	bf00      	nop

08000c8c <__aeabi_dcmple>:
 8000c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c90:	f7ff ffe0 	bl	8000c54 <__aeabi_cdcmpeq>
 8000c94:	bf94      	ite	ls
 8000c96:	2001      	movls	r0, #1
 8000c98:	2000      	movhi	r0, #0
 8000c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_dcmpge>:
 8000ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca4:	f7ff ffce 	bl	8000c44 <__aeabi_cdrcmple>
 8000ca8:	bf94      	ite	ls
 8000caa:	2001      	movls	r0, #1
 8000cac:	2000      	movhi	r0, #0
 8000cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_dcmpgt>:
 8000cb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb8:	f7ff ffc4 	bl	8000c44 <__aeabi_cdrcmple>
 8000cbc:	bf34      	ite	cc
 8000cbe:	2001      	movcc	r0, #1
 8000cc0:	2000      	movcs	r0, #0
 8000cc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_dcmpun>:
 8000cc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cd0:	d102      	bne.n	8000cd8 <__aeabi_dcmpun+0x10>
 8000cd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cd6:	d10a      	bne.n	8000cee <__aeabi_dcmpun+0x26>
 8000cd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ce0:	d102      	bne.n	8000ce8 <__aeabi_dcmpun+0x20>
 8000ce2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ce6:	d102      	bne.n	8000cee <__aeabi_dcmpun+0x26>
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	f04f 0001 	mov.w	r0, #1
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_d2iz>:
 8000cf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cf8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cfc:	d215      	bcs.n	8000d2a <__aeabi_d2iz+0x36>
 8000cfe:	d511      	bpl.n	8000d24 <__aeabi_d2iz+0x30>
 8000d00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d08:	d912      	bls.n	8000d30 <__aeabi_d2iz+0x3c>
 8000d0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1e:	bf18      	it	ne
 8000d20:	4240      	negne	r0, r0
 8000d22:	4770      	bx	lr
 8000d24:	f04f 0000 	mov.w	r0, #0
 8000d28:	4770      	bx	lr
 8000d2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d2e:	d105      	bne.n	8000d3c <__aeabi_d2iz+0x48>
 8000d30:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d34:	bf08      	it	eq
 8000d36:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d3a:	4770      	bx	lr
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <__aeabi_uldivmod>:
 8000d44:	b953      	cbnz	r3, 8000d5c <__aeabi_uldivmod+0x18>
 8000d46:	b94a      	cbnz	r2, 8000d5c <__aeabi_uldivmod+0x18>
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	2800      	cmpeq	r0, #0
 8000d4e:	bf1c      	itt	ne
 8000d50:	f04f 31ff 	movne.w	r1, #4294967295
 8000d54:	f04f 30ff 	movne.w	r0, #4294967295
 8000d58:	f000 b976 	b.w	8001048 <__aeabi_idiv0>
 8000d5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d64:	f000 f806 	bl	8000d74 <__udivmoddi4>
 8000d68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d70:	b004      	add	sp, #16
 8000d72:	4770      	bx	lr

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14d      	bne.n	8000e20 <__udivmoddi4+0xac>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d968      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d8a:	fab2 f282 	clz	r2, r2
 8000d8e:	b152      	cbz	r2, 8000da6 <__udivmoddi4+0x32>
 8000d90:	fa01 f302 	lsl.w	r3, r1, r2
 8000d94:	f1c2 0120 	rsb	r1, r2, #32
 8000d98:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da0:	ea41 0803 	orr.w	r8, r1, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000daa:	fbb8 f7f1 	udiv	r7, r8, r1
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	fb01 8817 	mls	r8, r1, r7, r8
 8000db6:	fb07 f00e 	mul.w	r0, r7, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc0:	4298      	cmp	r0, r3
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x66>
 8000dc4:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc8:	f107 35ff 	add.w	r5, r7, #4294967295
 8000dcc:	f080 811e 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	f240 811b 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd6:	3f02      	subs	r7, #2
 8000dd8:	4463      	add	r3, ip
 8000dda:	1a1b      	subs	r3, r3, r0
 8000ddc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000de0:	fb01 3310 	mls	r3, r1, r0, r3
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	f080 8109 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f240 8106 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	2100      	movs	r1, #0
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e12:	b11e      	cbz	r6, 8000e1c <__udivmoddi4+0xa8>
 8000e14:	2300      	movs	r3, #0
 8000e16:	40d4      	lsrs	r4, r2
 8000e18:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e24:	2e00      	cmp	r6, #0
 8000e26:	f000 80ee 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e9c6 0500 	strd	r0, r5, [r6]
 8000e30:	4608      	mov	r0, r1
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f183 	clz	r1, r3
 8000e3a:	2900      	cmp	r1, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	42ab      	cmp	r3, r5
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fc 	bhi.w	8001040 <__udivmoddi4+0x2cc>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb65 0303 	sbc.w	r3, r5, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e2      	beq.n	8000e1c <__udivmoddi4+0xa8>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7df      	b.n	8000e1c <__udivmoddi4+0xa8>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8091 	bne.w	8000f8c <__udivmoddi4+0x218>
 8000e6a:	eba1 000c 	sub.w	r0, r1, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e74:	fa1f fe8c 	uxth.w	lr, ip
 8000e78:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e7c:	fb07 0013 	mls	r0, r7, r3, r0
 8000e80:	0c25      	lsrs	r5, r4, #16
 8000e82:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	42a8      	cmp	r0, r5
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0505 	adds.w	r5, ip, r5
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	42a8      	cmp	r0, r5
 8000e9a:	f200 80ce 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a2d      	subs	r5, r5, r0
 8000ea2:	fbb5 f0f7 	udiv	r0, r5, r7
 8000ea6:	fb07 5510 	mls	r5, r7, r0, r5
 8000eaa:	fb0e fe00 	mul.w	lr, lr, r0
 8000eae:	b2a4      	uxth	r4, r4
 8000eb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80b6 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000ec8:	4628      	mov	r0, r5
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79e      	b.n	8000e12 <__udivmoddi4+0x9e>
 8000ed4:	f1c1 0720 	rsb	r7, r1, #32
 8000ed8:	408b      	lsls	r3, r1
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa25 fa07 	lsr.w	sl, r5, r7
 8000ee6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eea:	fbba f8f9 	udiv	r8, sl, r9
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	fb09 aa18 	mls	sl, r9, r8, sl
 8000ef6:	408d      	lsls	r5, r1
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	431d      	orrs	r5, r3
 8000efe:	fa00 f301 	lsl.w	r3, r0, r1
 8000f02:	fb08 f00e 	mul.w	r0, r8, lr
 8000f06:	0c2c      	lsrs	r4, r5, #16
 8000f08:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000f0c:	42a0      	cmp	r0, r4
 8000f0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0404 	adds.w	r4, ip, r4
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	42a0      	cmp	r0, r4
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4464      	add	r4, ip
 8000f2c:	1a24      	subs	r4, r4, r0
 8000f2e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000f32:	fb09 4410 	mls	r4, r9, r0, r4
 8000f36:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f3a:	b2ad      	uxth	r5, r5
 8000f3c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f40:	45a6      	cmp	lr, r4
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0404 	adds.w	r4, ip, r4
 8000f48:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	45a6      	cmp	lr, r4
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4464      	add	r4, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9502 	umull	r9, r5, r0, r2
 8000f5e:	eba4 040e 	sub.w	r4, r4, lr
 8000f62:	42ac      	cmp	r4, r5
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46ae      	mov	lr, r5
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	d069      	beq.n	8001044 <__udivmoddi4+0x2d0>
 8000f70:	ebb3 0208 	subs.w	r2, r3, r8
 8000f74:	eb64 040e 	sbc.w	r4, r4, lr
 8000f78:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7c:	fa04 f707 	lsl.w	r7, r4, r7
 8000f80:	431f      	orrs	r7, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	e9c6 7400 	strd	r7, r4, [r6]
 8000f88:	2100      	movs	r1, #0
 8000f8a:	e747      	b.n	8000e1c <__udivmoddi4+0xa8>
 8000f8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f90:	f1c2 0120 	rsb	r1, r2, #32
 8000f94:	fa25 f301 	lsr.w	r3, r5, r1
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa20 f101 	lsr.w	r1, r0, r1
 8000fa0:	4095      	lsls	r5, r2
 8000fa2:	430d      	orrs	r5, r1
 8000fa4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000fa8:	fb07 3311 	mls	r3, r7, r1, r3
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	0c28      	lsrs	r0, r5, #16
 8000fb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000fb6:	fb01 f30e 	mul.w	r3, r1, lr
 8000fba:	4283      	cmp	r3, r0
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0000 	adds.w	r0, ip, r0
 8000fc6:	f101 38ff 	add.w	r8, r1, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	4283      	cmp	r3, r0
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3902      	subs	r1, #2
 8000fd2:	4460      	add	r0, ip
 8000fd4:	1ac0      	subs	r0, r0, r3
 8000fd6:	fbb0 f3f7 	udiv	r3, r0, r7
 8000fda:	fb07 0013 	mls	r0, r7, r3, r0
 8000fde:	b2ad      	uxth	r5, r5
 8000fe0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000fe4:	fb03 f00e 	mul.w	r0, r3, lr
 8000fe8:	42a8      	cmp	r0, r5
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0505 	adds.w	r5, ip, r5
 8000ff0:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3b02      	subs	r3, #2
 8000ffc:	4465      	add	r5, ip
 8000ffe:	1a28      	subs	r0, r5, r0
 8001000:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	4631      	mov	r1, r6
 8001008:	4630      	mov	r0, r6
 800100a:	e707      	b.n	8000e1c <__udivmoddi4+0xa8>
 800100c:	462f      	mov	r7, r5
 800100e:	e6e4      	b.n	8000dda <__udivmoddi4+0x66>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f9      	b.n	8000e08 <__udivmoddi4+0x94>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4643      	mov	r3, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4628      	mov	r0, r5
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4641      	mov	r1, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	4464      	add	r4, ip
 8001036:	3802      	subs	r0, #2
 8001038:	e747      	b.n	8000eca <__udivmoddi4+0x156>
 800103a:	3b02      	subs	r3, #2
 800103c:	4465      	add	r5, ip
 800103e:	e72f      	b.n	8000ea0 <__udivmoddi4+0x12c>
 8001040:	4608      	mov	r0, r1
 8001042:	e706      	b.n	8000e52 <__udivmoddi4+0xde>
 8001044:	4631      	mov	r1, r6
 8001046:	e6e9      	b.n	8000e1c <__udivmoddi4+0xa8>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001052:	f000 fd35 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 fb1d 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 fb85 	bl	8001768 <MX_GPIO_Init>
  MX_I2C1_Init();
 800105e:	f000 fb55 	bl	800170c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TrimRead();
 8001062:	f000 f841 	bl	80010e8 <TrimRead>
  HAL_Delay(500);
 8001066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106a:	f000 fd8b 	bl	8001b84 <HAL_Delay>
  int status_bmp =  BMP280_config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800106e:	2304      	movs	r3, #4
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	2300      	movs	r3, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2303      	movs	r3, #3
 8001078:	2201      	movs	r2, #1
 800107a:	2105      	movs	r1, #5
 800107c:	2002      	movs	r0, #2
 800107e:	f000 f8d7 	bl	8001230 <BMP280_config>
 8001082:	6078      	str	r0, [r7, #4]
  int status_raw = BMPReadRaw();
 8001084:	f000 f97c 	bl	8001380 <BMPReadRaw>
 8001088:	6038      	str	r0, [r7, #0]
  printf("Status bmp is : %d \r \n ", status_bmp);
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <main+0x84>)
 800108e:	f002 fc3d 	bl	800390c <printf>
  printf("Status raw is : %d \r \n ", status_raw);
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	480f      	ldr	r0, [pc, #60]	; (80010d4 <main+0x88>)
 8001096:	f002 fc39 	bl	800390c <printf>

  while (1)
  {
    /* USER CODE END WHILE */
	  BMP280_Measure();
 800109a:	f000 faa7 	bl	80015ec <BMP280_Measure>
	  printf(" Temperatur adalah %f \n", Temperature);
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <main+0x8c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f9b8 	bl	8000418 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <main+0x90>)
 80010ae:	f002 fc2d 	bl	800390c <printf>
	  printf(" Tekanan adalah %f \n", Pressure);
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <main+0x94>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9ae 	bl	8000418 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	4808      	ldr	r0, [pc, #32]	; (80010e4 <main+0x98>)
 80010c2:	f002 fc23 	bl	800390c <printf>



	  HAL_Delay(500);
 80010c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ca:	f000 fd5b 	bl	8001b84 <HAL_Delay>
	  BMP280_Measure();
 80010ce:	e7e4      	b.n	800109a <main+0x4e>
 80010d0:	080082e8 	.word	0x080082e8
 80010d4:	08008300 	.word	0x08008300
 80010d8:	20000a4c 	.word	0x20000a4c
 80010dc:	08008318 	.word	0x08008318
 80010e0:	20000a50 	.word	0x20000a50
 80010e4:	08008330 	.word	0x08008330

080010e8 <TrimRead>:



// USER functions
void TrimRead()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af04      	add	r7, sp, #16
	uint8_t trimdata[25];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	2319      	movs	r3, #25
 80010f6:	9301      	str	r3, [sp, #4]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2301      	movs	r3, #1
 80010fe:	2288      	movs	r2, #136	; 0x88
 8001100:	21ec      	movs	r1, #236	; 0xec
 8001102:	483d      	ldr	r0, [pc, #244]	; (80011f8 <TrimRead+0x110>)
 8001104:	f001 fa08 	bl	8002518 <HAL_I2C_Mem_Read>


	// Arrange the data as per the datasheet (page no. 21)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001108:	797b      	ldrb	r3, [r7, #5]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21a      	sxth	r2, r3
 800110e:	793b      	ldrb	r3, [r7, #4]
 8001110:	b21b      	sxth	r3, r3
 8001112:	4313      	orrs	r3, r2
 8001114:	b21b      	sxth	r3, r3
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <TrimRead+0x114>)
 800111a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <TrimRead+0x118>)
 800112c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <TrimRead+0x11c>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001140:	7afb      	ldrb	r3, [r7, #11]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7a7b      	ldrb	r3, [r7, #9]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b2d      	ldr	r3, [pc, #180]	; (8001208 <TrimRead+0x120>)
 8001152:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001154:	7b7b      	ldrb	r3, [r7, #13]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	7abb      	ldrb	r3, [r7, #10]
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <TrimRead+0x124>)
 8001164:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	7bbb      	ldrb	r3, [r7, #14]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <TrimRead+0x128>)
 8001176:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001178:	7c7b      	ldrb	r3, [r7, #17]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21a      	sxth	r2, r3
 800117e:	7c3b      	ldrb	r3, [r7, #16]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21a      	sxth	r2, r3
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <TrimRead+0x12c>)
 8001188:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	b21a      	sxth	r2, r3
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <TrimRead+0x130>)
 800119a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800119c:	7d7b      	ldrb	r3, [r7, #21]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7d3b      	ldrb	r3, [r7, #20]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <TrimRead+0x134>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	021b      	lsls	r3, r3, #8
 80011b2:	b21a      	sxth	r2, r3
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <TrimRead+0x138>)
 80011be:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011c0:	7e7b      	ldrb	r3, [r7, #25]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	7e3b      	ldrb	r3, [r7, #24]
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <TrimRead+0x13c>)
 80011d0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011d2:	7efb      	ldrb	r3, [r7, #27]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	7ebb      	ldrb	r3, [r7, #26]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	4313      	orrs	r3, r2
 80011de:	b21a      	sxth	r2, r3
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <TrimRead+0x140>)
 80011e2:	801a      	strh	r2, [r3, #0]

	printf("%s ",trimdata); // DEBUG ONLY
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <TrimRead+0x144>)
 80011ea:	f002 fb8f 	bl	800390c <printf>

}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200009d4 	.word	0x200009d4
 80011fc:	20000a28 	.word	0x20000a28
 8001200:	20000a2c 	.word	0x20000a2c
 8001204:	20000a2e 	.word	0x20000a2e
 8001208:	20000a2a 	.word	0x20000a2a
 800120c:	20000a30 	.word	0x20000a30
 8001210:	20000a32 	.word	0x20000a32
 8001214:	20000a34 	.word	0x20000a34
 8001218:	20000a36 	.word	0x20000a36
 800121c:	20000a38 	.word	0x20000a38
 8001220:	20000a3a 	.word	0x20000a3a
 8001224:	20000a3c 	.word	0x20000a3c
 8001228:	20000a3e 	.word	0x20000a3e
 800122c:	08008348 	.word	0x08008348

08001230 <BMP280_config>:

int BMP280_config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af04      	add	r7, sp, #16
 8001236:	4604      	mov	r4, r0
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4623      	mov	r3, r4
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	4603      	mov	r3, r0
 8001244:	71bb      	strb	r3, [r7, #6]
 8001246:	460b      	mov	r3, r1
 8001248:	717b      	strb	r3, [r7, #5]
 800124a:	4613      	mov	r3, r2
 800124c:	713b      	strb	r3, [r7, #4]
	uint8_t data_to_write = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]
	uint8_t data_check = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	73bb      	strb	r3, [r7, #14]



	// reset the device
	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, (uint8_t *) 0xB6, 1, 1000) != HAL_OK)
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	23b6      	movs	r3, #182	; 0xb6
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	22e0      	movs	r2, #224	; 0xe0
 8001268:	21ec      	movs	r1, #236	; 0xec
 800126a:	4844      	ldr	r0, [pc, #272]	; (800137c <BMP280_config+0x14c>)
 800126c:	f001 f85a 	bl	8002324 <HAL_I2C_Mem_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <BMP280_config+0x4c>
	{
		return -1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e07b      	b.n	8001374 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f000 fc81 	bl	8001b84 <HAL_Delay>

	// set standby and filter IIR
	data_to_write = (t_sb << 5) | (filter << 2);
 8001282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001286:	015b      	lsls	r3, r3, #5
 8001288:	b25a      	sxtb	r2, r3
 800128a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	b25b      	sxtb	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b25b      	sxtb	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_to_write , 1, 1000) != HAL_OK)
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030f 	add.w	r3, r7, #15
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	; 0xf5
 80012ae:	21ec      	movs	r1, #236	; 0xec
 80012b0:	4832      	ldr	r0, [pc, #200]	; (800137c <BMP280_config+0x14c>)
 80012b2:	f001 f837 	bl	8002324 <HAL_I2C_Mem_Write>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <BMP280_config+0x92>
	{
		return -1;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e058      	b.n	8001374 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 80012c2:	2064      	movs	r0, #100	; 0x64
 80012c4:	f000 fc5e 	bl	8001b84 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_check , 1, 1000);
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 030e 	add.w	r3, r7, #14
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	22f5      	movs	r2, #245	; 0xf5
 80012dc:	21ec      	movs	r1, #236	; 0xec
 80012de:	4827      	ldr	r0, [pc, #156]	; (800137c <BMP280_config+0x14c>)
 80012e0:	f001 f91a 	bl	8002518 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 80012e4:	7bba      	ldrb	r2, [r7, #14]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d002      	beq.n	80012f2 <BMP280_config+0xc2>
	{
		return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
 80012f0:	e040      	b.n	8001374 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f000 fc46 	bl	8001b84 <HAL_Delay>


	// oversampling config for temp and pressure
	data_to_write = (osrs_t << 5) | (osrs_p << 2) | mode;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	015b      	lsls	r3, r3, #5
 80012fc:	b25a      	sxtb	r2, r3
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b25a      	sxtb	r2, r3
 8001308:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800130c:	4313      	orrs	r3, r2
 800130e:	b25b      	sxtb	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_to_write, 1, 1000) != HAL_OK)
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	f107 030f 	add.w	r3, r7, #15
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	2301      	movs	r3, #1
 8001326:	22f4      	movs	r2, #244	; 0xf4
 8001328:	21ec      	movs	r1, #236	; 0xec
 800132a:	4814      	ldr	r0, [pc, #80]	; (800137c <BMP280_config+0x14c>)
 800132c:	f000 fffa 	bl	8002324 <HAL_I2C_Mem_Write>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <BMP280_config+0x10c>
	{
		return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e01b      	b.n	8001374 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 800133c:	2064      	movs	r0, #100	; 0x64
 800133e:	f000 fc21 	bl	8001b84 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_check , 1, 1000);
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	f107 030e 	add.w	r3, r7, #14
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	22f4      	movs	r2, #244	; 0xf4
 8001356:	21ec      	movs	r1, #236	; 0xec
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <BMP280_config+0x14c>)
 800135a:	f001 f8dd 	bl	8002518 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 800135e:	7bba      	ldrb	r2, [r7, #14]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	429a      	cmp	r2, r3
 8001364:	d002      	beq.n	800136c <BMP280_config+0x13c>
	{
		return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e003      	b.n	8001374 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 fc09 	bl	8001b84 <HAL_Delay>


	return 0;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	200009d4 	.word	0x200009d4

08001380 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, ID_REG, 1, &chip_id, 1, 1000);
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2301      	movs	r3, #1
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <BMPReadRaw+0x80>)
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2301      	movs	r3, #1
 8001396:	22d0      	movs	r2, #208	; 0xd0
 8001398:	21ec      	movs	r1, #236	; 0xec
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <BMPReadRaw+0x84>)
 800139c:	f001 f8bc 	bl	8002518 <HAL_I2C_Mem_Read>

	if (chip_id == 0x58)
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <BMPReadRaw+0x80>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b58      	cmp	r3, #88	; 0x58
 80013a6:	d124      	bne.n	80013f2 <BMPReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	2306      	movs	r3, #6
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	463b      	mov	r3, r7
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	22f7      	movs	r2, #247	; 0xf7
 80013ba:	21ec      	movs	r1, #236	; 0xec
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <BMPReadRaw+0x84>)
 80013be:	f001 f8ab 	bl	8002518 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80013c2:	783b      	ldrb	r3, [r7, #0]
 80013c4:	031a      	lsls	r2, r3, #12
 80013c6:	787b      	ldrb	r3, [r7, #1]
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	4313      	orrs	r3, r2
 80013cc:	78ba      	ldrb	r2, [r7, #2]
 80013ce:	0912      	lsrs	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <BMPReadRaw+0x88>)
 80013d6:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	031a      	lsls	r2, r3, #12
 80013dc:	793b      	ldrb	r3, [r7, #4]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	4313      	orrs	r3, r2
 80013e2:	797a      	ldrb	r2, [r7, #5]
 80013e4:	0912      	lsrs	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	4313      	orrs	r3, r2
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <BMPReadRaw+0x8c>)
 80013ec:	6013      	str	r3, [r2, #0]

		return 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e001      	b.n	80013f6 <BMPReadRaw+0x76>
	}

	else return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000a40 	.word	0x20000a40
 8001404:	200009d4 	.word	0x200009d4
 8001408:	20000a44 	.word	0x20000a44
 800140c:	20000a48 	.word	0x20000a48

08001410 <bmp280_compensate_T_int32>:

// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
// t_fine carries fine temperature as global value
BMP280_S32_t t_fine;
BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;

	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	10da      	asrs	r2, r3, #3
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <bmp280_compensate_T_int32+0x70>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <bmp280_compensate_T_int32+0x74>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	12db      	asrs	r3, r3, #11
 8001430:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) * ((BMP280_S32_t)dig_T3)) >> 14;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	111b      	asrs	r3, r3, #4
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <bmp280_compensate_T_int32+0x70>)
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	1112      	asrs	r2, r2, #4
 8001440:	490f      	ldr	r1, [pc, #60]	; (8001480 <bmp280_compensate_T_int32+0x70>)
 8001442:	8809      	ldrh	r1, [r1, #0]
 8001444:	1a52      	subs	r2, r2, r1
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	131b      	asrs	r3, r3, #12
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <bmp280_compensate_T_int32+0x78>)
 800144e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	139b      	asrs	r3, r3, #14
 8001458:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4413      	add	r3, r2
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <bmp280_compensate_T_int32+0x7c>)
 8001462:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <bmp280_compensate_T_int32+0x7c>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3380      	adds	r3, #128	; 0x80
 8001470:	121b      	asrs	r3, r3, #8
 8001472:	60fb      	str	r3, [r7, #12]
	return T;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	371c      	adds	r7, #28
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000a28 	.word	0x20000a28
 8001484:	20000a2c 	.word	0x20000a2c
 8001488:	20000a2e 	.word	0x20000a2e
 800148c:	20000a54 	.word	0x20000a54

08001490 <bmp280_compensate_P_int32>:

// Returns pressure in Pa as unsigned 32 bit integer. Output value of “96386” equals 96386 Pa = 963.86 hPa
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t adc_P)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2;
	BMP280_U32_t p;
	var1 = (((BMP280_S32_t)t_fine)>>1) - (BMP280_S32_t)64000;
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <bmp280_compensate_P_int32+0x130>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	105b      	asrs	r3, r3, #1
 800149e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 80014a2:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	109b      	asrs	r3, r3, #2
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	1092      	asrs	r2, r2, #2
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	12db      	asrs	r3, r3, #11
 80014b2:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <bmp280_compensate_P_int32+0x134>)
 80014b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
 80014be:	4b42      	ldr	r3, [pc, #264]	; (80015c8 <bmp280_compensate_P_int32+0x138>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	461a      	mov	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	109a      	asrs	r2, r3, #2
 80014d8:	4b3c      	ldr	r3, [pc, #240]	; (80015cc <bmp280_compensate_P_int32+0x13c>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	041b      	lsls	r3, r3, #16
 80014e0:	4413      	add	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <bmp280_compensate_P_int32+0x140>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	4619      	mov	r1, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	109b      	asrs	r3, r3, #2
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	1092      	asrs	r2, r2, #2
 80014f4:	fb02 f303 	mul.w	r3, r2, r3
 80014f8:	135b      	asrs	r3, r3, #13
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	10da      	asrs	r2, r3, #3
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <bmp280_compensate_P_int32+0x144>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	4619      	mov	r1, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	105b      	asrs	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	149b      	asrs	r3, r3, #18
 8001514:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800151c:	4a2e      	ldr	r2, [pc, #184]	; (80015d8 <bmp280_compensate_P_int32+0x148>)
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	13db      	asrs	r3, r3, #15
 8001526:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 800152e:	2300      	movs	r3, #0
 8001530:	e041      	b.n	80015b6 <bmp280_compensate_P_int32+0x126>
	}
	p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	131b      	asrs	r3, r3, #12
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <bmp280_compensate_P_int32+0x14c>)
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8001546:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800154a:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db06      	blt.n	8001560 <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((BMP280_U32_t)var1);
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005a      	lsls	r2, r3, #1
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fbb2 f3f3 	udiv	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	e005      	b.n	800156c <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (BMP280_U32_t)var1) * 2;
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	fbb2 f3f3 	udiv	r3, r2, r3
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <bmp280_compensate_P_int32+0x150>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	4619      	mov	r1, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	08d2      	lsrs	r2, r2, #3
 800157c:	fb02 f303 	mul.w	r3, r2, r3
 8001580:	0b5b      	lsrs	r3, r3, #13
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	131b      	asrs	r3, r3, #12
 8001588:	613b      	str	r3, [r7, #16]
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	461a      	mov	r2, r3
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <bmp280_compensate_P_int32+0x154>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	135b      	asrs	r3, r3, #13
 800159c:	60fb      	str	r3, [r7, #12]
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4413      	add	r3, r2
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <bmp280_compensate_P_int32+0x158>)
 80015a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015aa:	4413      	add	r3, r2
 80015ac:	111a      	asrs	r2, r3, #4
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	617b      	str	r3, [r7, #20]
	return p;
 80015b4:	697b      	ldr	r3, [r7, #20]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	20000a54 	.word	0x20000a54
 80015c4:	20000a38 	.word	0x20000a38
 80015c8:	20000a36 	.word	0x20000a36
 80015cc:	20000a34 	.word	0x20000a34
 80015d0:	20000a32 	.word	0x20000a32
 80015d4:	20000a30 	.word	0x20000a30
 80015d8:	20000a2a 	.word	0x20000a2a
 80015dc:	fffff3cb 	.word	0xfffff3cb
 80015e0:	20000a3e 	.word	0x20000a3e
 80015e4:	20000a3c 	.word	0x20000a3c
 80015e8:	20000a3a 	.word	0x20000a3a

080015ec <BMP280_Measure>:

void BMP280_Measure (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	if (BMPReadRaw() == 0)
 80015f0:	f7ff fec6 	bl	8001380 <BMPReadRaw>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d137      	bne.n	800166a <BMP280_Measure+0x7e>
	{
		if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <BMP280_Measure+0x94>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001602:	d104      	bne.n	800160e <BMP280_Measure+0x22>
 8001604:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <BMP280_Measure+0x98>)
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e016      	b.n	800163c <BMP280_Measure+0x50>
		else
		{
			Temperature = (bmp280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <BMP280_Measure+0x94>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fefc 	bl	8001410 <bmp280_compensate_T_int32>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe feea 	bl	80003f4 <__aeabi_i2d>
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <BMP280_Measure+0x9c>)
 8001626:	f7ff f879 	bl	800071c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff f95b 	bl	80008ec <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <BMP280_Measure+0x98>)
 800163a:	6013      	str	r3, [r2, #0]
		}

		if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <BMP280_Measure+0xa0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001644:	d104      	bne.n	8001650 <BMP280_Measure+0x64>
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <BMP280_Measure+0xa4>)
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
	else
	{
		Temperature = Pressure = 0;
	}

}
 800164e:	e014      	b.n	800167a <BMP280_Measure+0x8e>
			Pressure = (bmp280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <BMP280_Measure+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff1b 	bl	8001490 <bmp280_compensate_P_int32>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fa4b 	bl	8000af8 <__aeabi_ui2f>
 8001662:	4603      	mov	r3, r0
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <BMP280_Measure+0xa4>)
 8001666:	6013      	str	r3, [r2, #0]
}
 8001668:	e007      	b.n	800167a <BMP280_Measure+0x8e>
		Temperature = Pressure = 0;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <BMP280_Measure+0xa4>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <BMP280_Measure+0xa4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a03      	ldr	r2, [pc, #12]	; (8001684 <BMP280_Measure+0x98>)
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000a48 	.word	0x20000a48
 8001684:	20000a4c 	.word	0x20000a4c
 8001688:	40590000 	.word	0x40590000
 800168c:	20000a44 	.word	0x20000a44
 8001690:	20000a50 	.word	0x20000a50

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b090      	sub	sp, #64	; 0x40
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0318 	add.w	r3, r7, #24
 800169e:	2228      	movs	r2, #40	; 0x28
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 f92a 	bl	80038fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	2301      	movs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016be:	2310      	movs	r3, #16
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fce6 	bl	800309c <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016d6:	f000 f869 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016da:	230f      	movs	r3, #15
 80016dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 ff54 	bl	80035a0 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016fe:	f000 f855 	bl	80017ac <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3740      	adds	r7, #64	; 0x40
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_I2C1_Init+0x50>)
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <MX_I2C1_Init+0x54>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_I2C1_Init+0x50>)
 8001718:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_I2C1_Init+0x58>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_I2C1_Init+0x50>)
 800172a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_I2C1_Init+0x50>)
 8001732:	2200      	movs	r2, #0
 8001734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_I2C1_Init+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <MX_I2C1_Init+0x50>)
 800174a:	f000 fca7 	bl	800209c <HAL_I2C_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001754:	f000 f82a 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200009d4 	.word	0x200009d4
 8001760:	40005400 	.word	0x40005400
 8001764:	000186a0 	.word	0x000186a0

08001768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <MX_GPIO_Init+0x40>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <MX_GPIO_Init+0x40>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <MX_GPIO_Init+0x40>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <MX_GPIO_Init+0x40>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <MX_GPIO_Init+0x40>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	6193      	str	r3, [r2, #24]
 8001792:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <MX_GPIO_Init+0x40>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]

}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	40021000 	.word	0x40021000

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_MspInit+0x5c>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_MspInit+0x5c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6193      	str	r3, [r2, #24]
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_MspInit+0x5c>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x5c>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x5c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x5c>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_MspInit+0x60>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_MspInit+0x60>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	40010000 	.word	0x40010000

0800181c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <HAL_I2C_MspInit+0x70>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d123      	bne.n	8001884 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_I2C_MspInit+0x74>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a13      	ldr	r2, [pc, #76]	; (8001890 <HAL_I2C_MspInit+0x74>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_I2C_MspInit+0x74>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001858:	2312      	movs	r3, #18
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	480b      	ldr	r0, [pc, #44]	; (8001894 <HAL_I2C_MspInit+0x78>)
 8001868:	f000 fa94 	bl	8001d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_I2C_MspInit+0x74>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_I2C_MspInit+0x74>)
 8001872:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_I2C_MspInit+0x74>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40005400 	.word	0x40005400
 8001890:	40021000 	.word	0x40021000
 8001894:	40010c00 	.word	0x40010c00

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800189c:	e7fe      	b.n	800189c <NMI_Handler+0x4>

0800189e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler+0x4>

080018a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <BusFault_Handler+0x4>

080018b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <UsageFault_Handler+0x4>

080018b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018de:	f000 f935 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
	return 1;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <_kill>:

int _kill(int pid, int sig)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018fe:	f001 ffd3 	bl	80038a8 <__errno>
 8001902:	4603      	mov	r3, r0
 8001904:	2216      	movs	r2, #22
 8001906:	601a      	str	r2, [r3, #0]
	return -1;
 8001908:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <_exit>:

void _exit (int status)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ffe7 	bl	80018f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001926:	e7fe      	b.n	8001926 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
	}

return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
	}
	return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
	return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
	return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
	return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f001 ff3c 	bl	80038a8 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20005000 	.word	0x20005000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000a58 	.word	0x20000a58
 8001a64:	20000aa0 	.word	0x20000aa0

08001a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a76:	490d      	ldr	r1, [pc, #52]	; (8001aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a78:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a7c:	e002      	b.n	8001a84 <LoopCopyDataInit>

08001a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a82:	3304      	adds	r3, #4

08001a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a88:	d3f9      	bcc.n	8001a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a8c:	4c0a      	ldr	r4, [pc, #40]	; (8001ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a90:	e001      	b.n	8001a96 <LoopFillZerobss>

08001a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a94:	3204      	adds	r2, #4

08001a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a98:	d3fb      	bcc.n	8001a92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9a:	f7ff ffe5 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f001 ff09 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fad3 	bl	800104c <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	200009b8 	.word	0x200009b8
  ldr r2, =_sidata
 8001ab0:	08008720 	.word	0x08008720
  ldr r2, =_sbss
 8001ab4:	200009b8 	.word	0x200009b8
  ldr r4, =_ebss
 8001ab8:	20000a9c 	.word	0x20000a9c

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f92b 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fe6c 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f935 	bl	8001d7a <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f90b 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	20000a5c 	.word	0x20000a5c

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20000a5c 	.word	0x20000a5c

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	; (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff49 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff5e 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffb0 	bl	8001ce8 <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b08b      	sub	sp, #44	; 0x2c
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e169      	b.n	800207c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001da8:	2201      	movs	r2, #1
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	4013      	ands	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	f040 8158 	bne.w	8002076 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	4a9a      	ldr	r2, [pc, #616]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d05e      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001dd0:	4a98      	ldr	r2, [pc, #608]	; (8002034 <HAL_GPIO_Init+0x2a0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d875      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dd6:	4a98      	ldr	r2, [pc, #608]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d058      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001ddc:	4a96      	ldr	r2, [pc, #600]	; (8002038 <HAL_GPIO_Init+0x2a4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d86f      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001de2:	4a96      	ldr	r2, [pc, #600]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d052      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001de8:	4a94      	ldr	r2, [pc, #592]	; (800203c <HAL_GPIO_Init+0x2a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d869      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dee:	4a94      	ldr	r2, [pc, #592]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04c      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001df4:	4a92      	ldr	r2, [pc, #584]	; (8002040 <HAL_GPIO_Init+0x2ac>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d863      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001dfa:	4a92      	ldr	r2, [pc, #584]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d046      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
 8001e00:	4a90      	ldr	r2, [pc, #576]	; (8002044 <HAL_GPIO_Init+0x2b0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d85d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e06:	2b12      	cmp	r3, #18
 8001e08:	d82a      	bhi.n	8001e60 <HAL_GPIO_Init+0xcc>
 8001e0a:	2b12      	cmp	r3, #18
 8001e0c:	d859      	bhi.n	8001ec2 <HAL_GPIO_Init+0x12e>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <HAL_GPIO_Init+0x80>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e8f 	.word	0x08001e8f
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	08001e7b 	.word	0x08001e7b
 8001e20:	08001ebd 	.word	0x08001ebd
 8001e24:	08001ec3 	.word	0x08001ec3
 8001e28:	08001ec3 	.word	0x08001ec3
 8001e2c:	08001ec3 	.word	0x08001ec3
 8001e30:	08001ec3 	.word	0x08001ec3
 8001e34:	08001ec3 	.word	0x08001ec3
 8001e38:	08001ec3 	.word	0x08001ec3
 8001e3c:	08001ec3 	.word	0x08001ec3
 8001e40:	08001ec3 	.word	0x08001ec3
 8001e44:	08001ec3 	.word	0x08001ec3
 8001e48:	08001ec3 	.word	0x08001ec3
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ec3 	.word	0x08001ec3
 8001e54:	08001ec3 	.word	0x08001ec3
 8001e58:	08001e71 	.word	0x08001e71
 8001e5c:	08001e85 	.word	0x08001e85
 8001e60:	4a79      	ldr	r2, [pc, #484]	; (8002048 <HAL_GPIO_Init+0x2b4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e66:	e02c      	b.n	8001ec2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e029      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e024      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	3308      	adds	r3, #8
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e01f      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	330c      	adds	r3, #12
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e01a      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e96:	2304      	movs	r3, #4
 8001e98:	623b      	str	r3, [r7, #32]
          break;
 8001e9a:	e013      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	611a      	str	r2, [r3, #16]
          break;
 8001eae:	e009      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb0:	2308      	movs	r3, #8
 8001eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	615a      	str	r2, [r3, #20]
          break;
 8001eba:	e003      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e000      	b.n	8001ec4 <HAL_GPIO_Init+0x130>
          break;
 8001ec2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2bff      	cmp	r3, #255	; 0xff
 8001ec8:	d801      	bhi.n	8001ece <HAL_GPIO_Init+0x13a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	e001      	b.n	8001ed2 <HAL_GPIO_Init+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_GPIO_Init+0x14c>
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	e002      	b.n	8001ee6 <HAL_GPIO_Init+0x152>
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	3b08      	subs	r3, #8
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	210f      	movs	r1, #15
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	6a39      	ldr	r1, [r7, #32]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80b1 	beq.w	8002076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f14:	4b4d      	ldr	r3, [pc, #308]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a4c      	ldr	r2, [pc, #304]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b4a      	ldr	r3, [pc, #296]	; (800204c <HAL_GPIO_Init+0x2b8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f2c:	4a48      	ldr	r2, [pc, #288]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a40      	ldr	r2, [pc, #256]	; (8002054 <HAL_GPIO_Init+0x2c0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_GPIO_Init+0x1ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <HAL_GPIO_Init+0x2c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00d      	beq.n	8001f7c <HAL_GPIO_Init+0x1e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3e      	ldr	r2, [pc, #248]	; (800205c <HAL_GPIO_Init+0x2c8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d007      	beq.n	8001f78 <HAL_GPIO_Init+0x1e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3d      	ldr	r2, [pc, #244]	; (8002060 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d101      	bne.n	8001f74 <HAL_GPIO_Init+0x1e0>
 8001f70:	2303      	movs	r3, #3
 8001f72:	e006      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f74:	2304      	movs	r3, #4
 8001f76:	e004      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_GPIO_Init+0x1ee>
 8001f80:	2300      	movs	r3, #0
 8001f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f84:	f002 0203 	and.w	r2, r2, #3
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	4093      	lsls	r3, r2
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f92:	492f      	ldr	r1, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x2bc>)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	089b      	lsrs	r3, r3, #2
 8001f98:	3302      	adds	r3, #2
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	492c      	ldr	r1, [pc, #176]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4928      	ldr	r1, [pc, #160]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	491e      	ldr	r1, [pc, #120]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	4918      	ldr	r1, [pc, #96]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
 8002008:	e006      	b.n	8002018 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	43db      	mvns	r3, r3
 8002012:	4914      	ldr	r1, [pc, #80]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002014:	4013      	ands	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d021      	beq.n	8002068 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_GPIO_Init+0x2d0>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
 8002030:	e021      	b.n	8002076 <HAL_GPIO_Init+0x2e2>
 8002032:	bf00      	nop
 8002034:	10320000 	.word	0x10320000
 8002038:	10310000 	.word	0x10310000
 800203c:	10220000 	.word	0x10220000
 8002040:	10210000 	.word	0x10210000
 8002044:	10120000 	.word	0x10120000
 8002048:	10110000 	.word	0x10110000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002068:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_GPIO_Init+0x304>)
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	43db      	mvns	r3, r3
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <HAL_GPIO_Init+0x304>)
 8002072:	4013      	ands	r3, r2
 8002074:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	3301      	adds	r3, #1
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	f47f ae8e 	bne.w	8001da8 <HAL_GPIO_Init+0x14>
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	372c      	adds	r7, #44	; 0x2c
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e12b      	b.n	8002306 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fbaa 	bl	800181c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2224      	movs	r2, #36	; 0x24
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002100:	f001 fba0 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8002104:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a81      	ldr	r2, [pc, #516]	; (8002310 <HAL_I2C_Init+0x274>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d807      	bhi.n	8002120 <HAL_I2C_Init+0x84>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a80      	ldr	r2, [pc, #512]	; (8002314 <HAL_I2C_Init+0x278>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e006      	b.n	800212e <HAL_I2C_Init+0x92>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a7d      	ldr	r2, [pc, #500]	; (8002318 <HAL_I2C_Init+0x27c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e0e7      	b.n	8002306 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4a78      	ldr	r2, [pc, #480]	; (800231c <HAL_I2C_Init+0x280>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_I2C_Init+0x274>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d802      	bhi.n	8002170 <HAL_I2C_Init+0xd4>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3301      	adds	r3, #1
 800216e:	e009      	b.n	8002184 <HAL_I2C_Init+0xe8>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	4a69      	ldr	r2, [pc, #420]	; (8002320 <HAL_I2C_Init+0x284>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	3301      	adds	r3, #1
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	430b      	orrs	r3, r1
 800218a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002196:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	495c      	ldr	r1, [pc, #368]	; (8002310 <HAL_I2C_Init+0x274>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d819      	bhi.n	80021d8 <HAL_I2C_Init+0x13c>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1e59      	subs	r1, r3, #1
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b2:	1c59      	adds	r1, r3, #1
 80021b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021b8:	400b      	ands	r3, r1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_I2C_Init+0x138>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1e59      	subs	r1, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	e051      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d4:	2304      	movs	r3, #4
 80021d6:	e04f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d111      	bne.n	8002204 <HAL_I2C_Init+0x168>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e58      	subs	r0, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6859      	ldr	r1, [r3, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	440b      	add	r3, r1
 80021ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f2:	3301      	adds	r3, #1
 80021f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e012      	b.n	800222a <HAL_I2C_Init+0x18e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e58      	subs	r0, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6859      	ldr	r1, [r3, #4]
 800220c:	460b      	mov	r3, r1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	0099      	lsls	r1, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	fbb0 f3f3 	udiv	r3, r0, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Init+0x196>
 800222e:	2301      	movs	r3, #1
 8002230:	e022      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10e      	bne.n	8002258 <HAL_I2C_Init+0x1bc>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1e58      	subs	r0, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	440b      	add	r3, r1
 8002248:	fbb0 f3f3 	udiv	r3, r0, r3
 800224c:	3301      	adds	r3, #1
 800224e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002256:	e00f      	b.n	8002278 <HAL_I2C_Init+0x1dc>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1e58      	subs	r0, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	0099      	lsls	r1, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	fbb0 f3f3 	udiv	r3, r0, r3
 800226e:	3301      	adds	r3, #1
 8002270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002274:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69da      	ldr	r2, [r3, #28]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6911      	ldr	r1, [r2, #16]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68d2      	ldr	r2, [r2, #12]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695a      	ldr	r2, [r3, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	000186a0 	.word	0x000186a0
 8002314:	001e847f 	.word	0x001e847f
 8002318:	003d08ff 	.word	0x003d08ff
 800231c:	431bde83 	.word	0x431bde83
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af02      	add	r7, sp, #8
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4603      	mov	r3, r0
 8002334:	817b      	strh	r3, [r7, #10]
 8002336:	460b      	mov	r3, r1
 8002338:	813b      	strh	r3, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800233e:	f7ff fc17 	bl	8001b70 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	f040 80d9 	bne.w	8002504 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2319      	movs	r3, #25
 8002358:	2201      	movs	r2, #1
 800235a:	496d      	ldr	r1, [pc, #436]	; (8002510 <HAL_I2C_Mem_Write+0x1ec>)
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fcc1 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
 800236a:	e0cc      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_I2C_Mem_Write+0x56>
 8002376:	2302      	movs	r3, #2
 8002378:	e0c5      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d007      	beq.n	80023a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2221      	movs	r2, #33	; 0x21
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_I2C_Mem_Write+0x1f0>)
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e2:	88f8      	ldrh	r0, [r7, #6]
 80023e4:	893a      	ldrh	r2, [r7, #8]
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4603      	mov	r3, r0
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 faf8 	bl	80029e8 <I2C_RequestMemoryWrite>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d052      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e081      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fd42 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00d      	beq.n	800242e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b04      	cmp	r3, #4
 8002418:	d107      	bne.n	800242a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002428:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	781a      	ldrb	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002448:	3b01      	subs	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HAL_I2C_Mem_Write+0x180>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	d017      	beq.n	80024a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1aa      	bne.n	8002402 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fd2e 	bl	8002f12 <I2C_WaitOnBTFFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d107      	bne.n	80024d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e016      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002504:	2302      	movs	r3, #2
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	00100002 	.word	0x00100002
 8002514:	ffff0000 	.word	0xffff0000

08002518 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08c      	sub	sp, #48	; 0x30
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002536:	f7ff fb1b 	bl	8001b70 <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	f040 8244 	bne.w	80029d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2319      	movs	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	4982      	ldr	r1, [pc, #520]	; (800275c <HAL_I2C_Mem_Read+0x244>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fbc5 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	e237      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Read+0x5a>
 800256e:	2302      	movs	r3, #2
 8002570:	e230      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2222      	movs	r2, #34	; 0x22
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80025c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a62      	ldr	r2, [pc, #392]	; (8002760 <HAL_I2C_Mem_Read+0x248>)
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025da:	88f8      	ldrh	r0, [r7, #6]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa92 	bl	8002b14 <I2C_RequestMemoryRead>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1ec      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e1c0      	b.n	80029ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11e      	bne.n	8002670 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002642:	b672      	cpsid	i
}
 8002644:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800266c:	b662      	cpsie	i
}
 800266e:	e035      	b.n	80026dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11e      	bne.n	80026b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002686:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002688:	b672      	cpsid	i
}
 800268a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026b2:	b662      	cpsie	i
}
 80026b4:	e012      	b.n	80026dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026dc:	e166      	b.n	80029ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	f200 811f 	bhi.w	8002926 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d123      	bne.n	8002738 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fc4d 	bl	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e167      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002736:	e139      	b.n	80029ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b02      	cmp	r3, #2
 800273e:	d152      	bne.n	80027e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002746:	2200      	movs	r2, #0
 8002748:	4906      	ldr	r1, [pc, #24]	; (8002764 <HAL_I2C_Mem_Read+0x24c>)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 faca 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e13c      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
 800275a:	bf00      	nop
 800275c:	00100002 	.word	0x00100002
 8002760:	ffff0000 	.word	0xffff0000
 8002764:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002768:	b672      	cpsid	i
}
 800276a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027ae:	b662      	cpsie	i
}
 80027b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3b01      	subs	r3, #1
 80027de:	b29a      	uxth	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e4:	e0e2      	b.n	80029ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	2200      	movs	r2, #0
 80027ee:	497b      	ldr	r1, [pc, #492]	; (80029dc <HAL_I2C_Mem_Read+0x4c4>)
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fa77 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0e9      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002846:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_I2C_Mem_Read+0x4c8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	08db      	lsrs	r3, r3, #3
 800284c:	4a65      	ldr	r2, [pc, #404]	; (80029e4 <HAL_I2C_Mem_Read+0x4cc>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a1a      	lsrs	r2, r3, #8
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00da      	lsls	r2, r3, #3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	3b01      	subs	r3, #1
 8002864:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d118      	bne.n	800289e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800288e:	b662      	cpsie	i
}
 8002890:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09a      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d1d9      	bne.n	8002860 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	3b01      	subs	r3, #1
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028ee:	b662      	cpsie	i
}
 80028f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002924:	e042      	b.n	80029ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fb32 	bl	8002f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e04c      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d118      	bne.n	80029ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f47f ae94 	bne.w	80026de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	00010004 	.word	0x00010004
 80029e0:	20000000 	.word	0x20000000
 80029e4:	14f8b589 	.word	0x14f8b589

080029e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	817b      	strh	r3, [r7, #10]
 80029fa:	460b      	mov	r3, r1
 80029fc:	813b      	strh	r3, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f960 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a38:	d103      	bne.n	8002a42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e05f      	b.n	8002b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a46:	897b      	ldrh	r3, [r7, #10]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	6a3a      	ldr	r2, [r7, #32]
 8002a5a:	492d      	ldr	r1, [pc, #180]	; (8002b10 <I2C_RequestMemoryWrite+0x128>)
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 f998 	bl	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e04c      	b.n	8002b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fa02 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00d      	beq.n	8002aae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d107      	bne.n	8002aaa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02b      	b.n	8002b06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d105      	bne.n	8002ac0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]
 8002abe:	e021      	b.n	8002b04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ac0:	893b      	ldrh	r3, [r7, #8]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	6a39      	ldr	r1, [r7, #32]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f9dc 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e005      	b.n	8002b06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002afa:	893b      	ldrh	r3, [r7, #8]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	00010002 	.word	0x00010002

08002b14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	4608      	mov	r0, r1
 8002b1e:	4611      	mov	r1, r2
 8002b20:	461a      	mov	r2, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	817b      	strh	r3, [r7, #10]
 8002b26:	460b      	mov	r3, r1
 8002b28:	813b      	strh	r3, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 f8c2 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00d      	beq.n	8002b82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b74:	d103      	bne.n	8002b7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e0aa      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b82:	897b      	ldrh	r3, [r7, #10]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	4952      	ldr	r1, [pc, #328]	; (8002ce0 <I2C_RequestMemoryRead+0x1cc>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f8fa 	bl	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e097      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f964 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d107      	bne.n	8002be6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e076      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	611a      	str	r2, [r3, #16]
 8002bfa:	e021      	b.n	8002c40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfc:	893b      	ldrh	r3, [r7, #8]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	6a39      	ldr	r1, [r7, #32]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f93e 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00d      	beq.n	8002c36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d107      	bne.n	8002c32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e050      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c36:	893b      	ldrh	r3, [r7, #8]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	6a39      	ldr	r1, [r7, #32]
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f923 	bl	8002e90 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00d      	beq.n	8002c6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e035      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f82b 	bl	8002ce4 <I2C_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00d      	beq.n	8002cb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d103      	bne.n	8002cac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e013      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	6a3a      	ldr	r2, [r7, #32]
 8002cc4:	4906      	ldr	r1, [pc, #24]	; (8002ce0 <I2C_RequestMemoryRead+0x1cc>)
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f863 	bl	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	00010002 	.word	0x00010002

08002ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cf4:	e025      	b.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d021      	beq.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe ff37 	bl	8001b70 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d116      	bne.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e023      	b.n	8002d8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10d      	bne.n	8002d68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf0c      	ite	eq
 8002d5e:	2301      	moveq	r3, #1
 8002d60:	2300      	movne	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	e00c      	b.n	8002d82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	461a      	mov	r2, r3
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d0b6      	beq.n	8002cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da0:	e051      	b.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db0:	d123      	bne.n	8002dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0204 	orr.w	r2, r3, #4
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e046      	b.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e00:	d021      	beq.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e02:	f7fe feb5 	bl	8001b70 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d302      	bcc.n	8002e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e020      	b.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0c1b      	lsrs	r3, r3, #16
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d10c      	bne.n	8002e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf14      	ite	ne
 8002e62:	2301      	movne	r3, #1
 8002e64:	2300      	moveq	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	e00b      	b.n	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4013      	ands	r3, r2
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d18d      	bne.n	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e9c:	e02d      	b.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8ce 	bl	8003040 <I2C_IsAcknowledgeFailed>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e02d      	b.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d021      	beq.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fe fe5b 	bl	8001b70 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d116      	bne.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0220 	orr.w	r2, r3, #32
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e007      	b.n	8002f0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f04:	2b80      	cmp	r3, #128	; 0x80
 8002f06:	d1ca      	bne.n	8002e9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f1e:	e02d      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f88d 	bl	8003040 <I2C_IsAcknowledgeFailed>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e02d      	b.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f36:	d021      	beq.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7fe fe1a 	bl	8001b70 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d302      	bcc.n	8002f4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e007      	b.n	8002f8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d1ca      	bne.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fa0:	e042      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d119      	bne.n	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0210 	mvn.w	r2, #16
 8002fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e029      	b.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe4:	f7fe fdc4 	bl	8001b70 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e007      	b.n	8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d1b5      	bne.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003056:	d11b      	bne.n	8003090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	f043 0204 	orr.w	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e272      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 8087 	beq.w	80031ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 030c 	and.w	r3, r3, #12
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d00c      	beq.n	80030e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c8:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d112      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
 80030d4:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d10b      	bne.n	80030fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e2:	4b89      	ldr	r3, [pc, #548]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d06c      	beq.n	80031c8 <HAL_RCC_OscConfig+0x12c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d168      	bne.n	80031c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e24c      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x76>
 8003104:	4b80      	ldr	r3, [pc, #512]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7f      	ldr	r2, [pc, #508]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800310a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e02e      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b7b      	ldr	r3, [pc, #492]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7a      	ldr	r2, [pc, #488]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800312c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e01d      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0xbc>
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a71      	ldr	r2, [pc, #452]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0xd4>
 8003158:	4b6b      	ldr	r3, [pc, #428]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a6a      	ldr	r2, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800315e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800316a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fcfa 	bl	8001b70 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7fe fcf6 	bl	8001b70 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	; 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e200      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0xe4>
 800319e:	e014      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe fce6 	bl	8001b70 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe fce2 	bl	8001b70 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	; 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e1ec      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ba:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x10c>
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d063      	beq.n	800329e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031d6:	4b4c      	ldr	r3, [pc, #304]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 030c 	and.w	r3, r3, #12
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d11c      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
 80031ee:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fa:	4b43      	ldr	r3, [pc, #268]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e1c0      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4939      	ldr	r1, [pc, #228]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003226:	e03a      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCC_OscConfig+0x270>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003236:	f7fe fc9b 	bl	8001b70 <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323e:	f7fe fc97 	bl	8001b70 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1a1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003250:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0f0      	beq.n	800323e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325c:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4927      	ldr	r1, [pc, #156]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 800326c:	4313      	orrs	r3, r2
 800326e:	600b      	str	r3, [r1, #0]
 8003270:	e015      	b.n	800329e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <HAL_RCC_OscConfig+0x270>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fe fc7a 	bl	8001b70 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fe fc76 	bl	8001b70 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e180      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03a      	beq.n	8003320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d019      	beq.n	80032e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_RCC_OscConfig+0x274>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fc5a 	bl	8001b70 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c0:	f7fe fc56 	bl	8001b70 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e160      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d2:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032de:	2001      	movs	r0, #1
 80032e0:	f000 fac4 	bl	800386c <RCC_Delay>
 80032e4:	e01c      	b.n	8003320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_RCC_OscConfig+0x274>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ec:	f7fe fc40 	bl	8001b70 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f2:	e00f      	b.n	8003314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fc3c 	bl	8001b70 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d908      	bls.n	8003314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e146      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	42420000 	.word	0x42420000
 8003310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003314:	4b92      	ldr	r3, [pc, #584]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e9      	bne.n	80032f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a6 	beq.w	800347a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003332:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10d      	bne.n	800335a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	4a87      	ldr	r2, [pc, #540]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	61d3      	str	r3, [r2, #28]
 800334a:	4b85      	ldr	r3, [pc, #532]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003356:	2301      	movs	r3, #1
 8003358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335a:	4b82      	ldr	r3, [pc, #520]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d118      	bne.n	8003398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003366:	4b7f      	ldr	r3, [pc, #508]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a7e      	ldr	r2, [pc, #504]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800336c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003372:	f7fe fbfd 	bl	8001b70 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337a:	f7fe fbf9 	bl	8001b70 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b64      	cmp	r3, #100	; 0x64
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e103      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <HAL_RCC_OscConfig+0x4c8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d106      	bne.n	80033ae <HAL_RCC_OscConfig+0x312>
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a6e      	ldr	r2, [pc, #440]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	e02d      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10c      	bne.n	80033d0 <HAL_RCC_OscConfig+0x334>
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	4a69      	ldr	r2, [pc, #420]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6213      	str	r3, [r2, #32]
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	4a66      	ldr	r2, [pc, #408]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6213      	str	r3, [r2, #32]
 80033ce:	e01c      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x356>
 80033d8:	4b61      	ldr	r3, [pc, #388]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4a60      	ldr	r2, [pc, #384]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6213      	str	r3, [r2, #32]
 80033e4:	4b5e      	ldr	r3, [pc, #376]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4a5d      	ldr	r2, [pc, #372]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6213      	str	r3, [r2, #32]
 80033f0:	e00b      	b.n	800340a <HAL_RCC_OscConfig+0x36e>
 80033f2:	4b5b      	ldr	r3, [pc, #364]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a5a      	ldr	r2, [pc, #360]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b58      	ldr	r3, [pc, #352]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a57      	ldr	r2, [pc, #348]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d015      	beq.n	800343e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003412:	f7fe fbad 	bl	8001b70 <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	e00a      	b.n	8003430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341a:	f7fe fba9 	bl	8001b70 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	4293      	cmp	r3, r2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0b1      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003430:	4b4b      	ldr	r3, [pc, #300]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ee      	beq.n	800341a <HAL_RCC_OscConfig+0x37e>
 800343c:	e014      	b.n	8003468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7fe fb97 	bl	8001b70 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003444:	e00a      	b.n	800345c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003446:	f7fe fb93 	bl	8001b70 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f241 3288 	movw	r2, #5000	; 0x1388
 8003454:	4293      	cmp	r3, r2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e09b      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1ee      	bne.n	8003446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346e:	4b3c      	ldr	r3, [pc, #240]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 8087 	beq.w	8003592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	4b36      	ldr	r3, [pc, #216]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d061      	beq.n	8003554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d146      	bne.n	8003526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fb67 	bl	8001b70 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe fb63 	bl	8001b70 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e06d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	4b29      	ldr	r3, [pc, #164]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1f0      	bne.n	80034a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d108      	bne.n	80034e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4921      	ldr	r1, [pc, #132]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a19      	ldr	r1, [r3, #32]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	430b      	orrs	r3, r1
 80034f2:	491b      	ldr	r1, [pc, #108]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fe fb37 	bl	8001b70 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe fb33 	bl	8001b70 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e03d      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003518:	4b11      	ldr	r3, [pc, #68]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x46a>
 8003524:	e035      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fb20 	bl	8001b70 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003534:	f7fe fb1c 	bl	8001b70 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_RCC_OscConfig+0x4c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x498>
 8003552:	e01e      	b.n	8003592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e019      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
 8003560:	40021000 	.word	0x40021000
 8003564:	40007000 	.word	0x40007000
 8003568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_RCC_OscConfig+0x500>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	429a      	cmp	r2, r3
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d001      	beq.n	8003592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000

080035a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d0      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b6a      	ldr	r3, [pc, #424]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d910      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b67      	ldr	r3, [pc, #412]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	4965      	ldr	r1, [pc, #404]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0b8      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4a58      	ldr	r2, [pc, #352]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a52      	ldr	r2, [pc, #328]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800361a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800361e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b50      	ldr	r3, [pc, #320]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	494d      	ldr	r1, [pc, #308]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d040      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003646:	4b47      	ldr	r3, [pc, #284]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d115      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e07f      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b41      	ldr	r3, [pc, #260]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e073      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e06b      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4936      	ldr	r1, [pc, #216]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fe fa6e 	bl	8001b70 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fe fa6a 	bl	8001b70 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e053      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b27      	ldr	r3, [pc, #156]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d210      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 0207 	bic.w	r2, r3, #7
 80036d6:	4922      	ldr	r1, [pc, #136]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	4313      	orrs	r3, r2
 80036dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036de:	4b20      	ldr	r3, [pc, #128]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e032      	b.n	8003756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4916      	ldr	r1, [pc, #88]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	490e      	ldr	r1, [pc, #56]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372e:	f000 f821 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 8003732:	4602      	mov	r2, r0
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	490a      	ldr	r1, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1cc>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_ClockConfig+0x1d0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f9cc 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40022000 	.word	0x40022000
 8003764:	40021000 	.word	0x40021000
 8003768:	0800835c 	.word	0x0800835c
 800376c:	20000000 	.word	0x20000000
 8003770:	20000004 	.word	0x20000004

08003774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	b490      	push	{r4, r7}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_GetSysClockFreq+0xac>)
 800377c:	1d3c      	adds	r4, r7, #4
 800377e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003784:	f240 2301 	movw	r3, #513	; 0x201
 8003788:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	2300      	movs	r3, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	2300      	movs	r3, #0
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d002      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0x40>
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d003      	beq.n	80037ba <HAL_RCC_GetSysClockFreq+0x46>
 80037b2:	e02b      	b.n	800380c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037b4:	4b1c      	ldr	r3, [pc, #112]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b6:	623b      	str	r3, [r7, #32]
      break;
 80037b8:	e02b      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	0c9b      	lsrs	r3, r3, #18
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3328      	adds	r3, #40	; 0x28
 80037c4:	443b      	add	r3, r7
 80037c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80037ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0c5b      	lsrs	r3, r3, #17
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	3328      	adds	r3, #40	; 0x28
 80037e2:	443b      	add	r3, r7
 80037e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037ee:	fb03 f202 	mul.w	r2, r3, r2
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e004      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	4a0b      	ldr	r2, [pc, #44]	; (800382c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003800:	fb02 f303 	mul.w	r3, r2, r3
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	623b      	str	r3, [r7, #32]
      break;
 800380a:	e002      	b.n	8003812 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb4>)
 800380e:	623b      	str	r3, [r7, #32]
      break;
 8003810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003812:	6a3b      	ldr	r3, [r7, #32]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3728      	adds	r7, #40	; 0x28
 8003818:	46bd      	mov	sp, r7
 800381a:	bc90      	pop	{r4, r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	0800834c 	.word	0x0800834c
 8003824:	40021000 	.word	0x40021000
 8003828:	007a1200 	.word	0x007a1200
 800382c:	003d0900 	.word	0x003d0900

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <HAL_RCC_GetHCLKFreq+0x10>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	20000000 	.word	0x20000000

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003848:	f7ff fff2 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40021000 	.word	0x40021000
 8003868:	0800836c 	.word	0x0800836c

0800386c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <RCC_Delay+0x34>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <RCC_Delay+0x38>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0a5b      	lsrs	r3, r3, #9
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	fb02 f303 	mul.w	r3, r2, r3
 8003886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003888:	bf00      	nop
  }
  while (Delay --);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1e5a      	subs	r2, r3, #1
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f9      	bne.n	8003888 <RCC_Delay+0x1c>
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	20000000 	.word	0x20000000
 80038a4:	10624dd3 	.word	0x10624dd3

080038a8 <__errno>:
 80038a8:	4b01      	ldr	r3, [pc, #4]	; (80038b0 <__errno+0x8>)
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	2000000c 	.word	0x2000000c

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	; (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	; (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	f004 fd04 	bl	80082d0 <_init>
 80038c8:	2600      	movs	r6, #0
 80038ca:	4d0a      	ldr	r5, [pc, #40]	; (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	; (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08008714 	.word	0x08008714
 80038f0:	08008714 	.word	0x08008714
 80038f4:	08008714 	.word	0x08008714
 80038f8:	0800871c 	.word	0x0800871c

080038fc <memset>:
 80038fc:	4603      	mov	r3, r0
 80038fe:	4402      	add	r2, r0
 8003900:	4293      	cmp	r3, r2
 8003902:	d100      	bne.n	8003906 <memset+0xa>
 8003904:	4770      	bx	lr
 8003906:	f803 1b01 	strb.w	r1, [r3], #1
 800390a:	e7f9      	b.n	8003900 <memset+0x4>

0800390c <printf>:
 800390c:	b40f      	push	{r0, r1, r2, r3}
 800390e:	b507      	push	{r0, r1, r2, lr}
 8003910:	4906      	ldr	r1, [pc, #24]	; (800392c <printf+0x20>)
 8003912:	ab04      	add	r3, sp, #16
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	f853 2b04 	ldr.w	r2, [r3], #4
 800391a:	6881      	ldr	r1, [r0, #8]
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	f000 f807 	bl	8003930 <_vfprintf_r>
 8003922:	b003      	add	sp, #12
 8003924:	f85d eb04 	ldr.w	lr, [sp], #4
 8003928:	b004      	add	sp, #16
 800392a:	4770      	bx	lr
 800392c:	2000000c 	.word	0x2000000c

08003930 <_vfprintf_r>:
 8003930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003934:	b0d3      	sub	sp, #332	; 0x14c
 8003936:	468a      	mov	sl, r1
 8003938:	4691      	mov	r9, r2
 800393a:	461c      	mov	r4, r3
 800393c:	461e      	mov	r6, r3
 800393e:	4680      	mov	r8, r0
 8003940:	f002 fb64 	bl	800600c <_localeconv_r>
 8003944:	6803      	ldr	r3, [r0, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	9317      	str	r3, [sp, #92]	; 0x5c
 800394a:	f7fd f92d 	bl	8000ba8 <strlen>
 800394e:	9012      	str	r0, [sp, #72]	; 0x48
 8003950:	f1b8 0f00 	cmp.w	r8, #0
 8003954:	d005      	beq.n	8003962 <_vfprintf_r+0x32>
 8003956:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800395a:	b913      	cbnz	r3, 8003962 <_vfprintf_r+0x32>
 800395c:	4640      	mov	r0, r8
 800395e:	f002 f9e5 	bl	8005d2c <__sinit>
 8003962:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8003966:	07d8      	lsls	r0, r3, #31
 8003968:	d407      	bmi.n	800397a <_vfprintf_r+0x4a>
 800396a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800396e:	0599      	lsls	r1, r3, #22
 8003970:	d403      	bmi.n	800397a <_vfprintf_r+0x4a>
 8003972:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8003976:	f002 fb4f 	bl	8006018 <__retarget_lock_acquire_recursive>
 800397a:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800397e:	049a      	lsls	r2, r3, #18
 8003980:	d409      	bmi.n	8003996 <_vfprintf_r+0x66>
 8003982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003986:	f8aa 300c 	strh.w	r3, [sl, #12]
 800398a:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 800398e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003992:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 8003996:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800399a:	071b      	lsls	r3, r3, #28
 800399c:	d502      	bpl.n	80039a4 <_vfprintf_r+0x74>
 800399e:	f8da 3010 	ldr.w	r3, [sl, #16]
 80039a2:	b9c3      	cbnz	r3, 80039d6 <_vfprintf_r+0xa6>
 80039a4:	4651      	mov	r1, sl
 80039a6:	4640      	mov	r0, r8
 80039a8:	f001 fa20 	bl	8004dec <__swsetup_r>
 80039ac:	b198      	cbz	r0, 80039d6 <_vfprintf_r+0xa6>
 80039ae:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80039b2:	07df      	lsls	r7, r3, #31
 80039b4:	d506      	bpl.n	80039c4 <_vfprintf_r+0x94>
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80039bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80039be:	b053      	add	sp, #332	; 0x14c
 80039c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80039c8:	059e      	lsls	r6, r3, #22
 80039ca:	d4f4      	bmi.n	80039b6 <_vfprintf_r+0x86>
 80039cc:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80039d0:	f002 fb23 	bl	800601a <__retarget_lock_release_recursive>
 80039d4:	e7ef      	b.n	80039b6 <_vfprintf_r+0x86>
 80039d6:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80039da:	f003 021a 	and.w	r2, r3, #26
 80039de:	2a0a      	cmp	r2, #10
 80039e0:	d116      	bne.n	8003a10 <_vfprintf_r+0xe0>
 80039e2:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	db12      	blt.n	8003a10 <_vfprintf_r+0xe0>
 80039ea:	f8da 2064 	ldr.w	r2, [sl, #100]	; 0x64
 80039ee:	07d5      	lsls	r5, r2, #31
 80039f0:	d405      	bmi.n	80039fe <_vfprintf_r+0xce>
 80039f2:	0598      	lsls	r0, r3, #22
 80039f4:	d403      	bmi.n	80039fe <_vfprintf_r+0xce>
 80039f6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 80039fa:	f002 fb0e 	bl	800601a <__retarget_lock_release_recursive>
 80039fe:	4623      	mov	r3, r4
 8003a00:	464a      	mov	r2, r9
 8003a02:	4651      	mov	r1, sl
 8003a04:	4640      	mov	r0, r8
 8003a06:	b053      	add	sp, #332	; 0x14c
 8003a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	f001 b9ae 	b.w	8004d6c <__sbprintf>
 8003a10:	2500      	movs	r5, #0
 8003a12:	2200      	movs	r2, #0
 8003a14:	2300      	movs	r3, #0
 8003a16:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8003a1a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003a1e:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
 8003a22:	ac29      	add	r4, sp, #164	; 0xa4
 8003a24:	9426      	str	r4, [sp, #152]	; 0x98
 8003a26:	9509      	str	r5, [sp, #36]	; 0x24
 8003a28:	950e      	str	r5, [sp, #56]	; 0x38
 8003a2a:	9516      	str	r5, [sp, #88]	; 0x58
 8003a2c:	9518      	str	r5, [sp, #96]	; 0x60
 8003a2e:	9513      	str	r5, [sp, #76]	; 0x4c
 8003a30:	464b      	mov	r3, r9
 8003a32:	461d      	mov	r5, r3
 8003a34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a38:	b10a      	cbz	r2, 8003a3e <_vfprintf_r+0x10e>
 8003a3a:	2a25      	cmp	r2, #37	; 0x25
 8003a3c:	d1f9      	bne.n	8003a32 <_vfprintf_r+0x102>
 8003a3e:	ebb5 0709 	subs.w	r7, r5, r9
 8003a42:	d00d      	beq.n	8003a60 <_vfprintf_r+0x130>
 8003a44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a46:	e9c4 9700 	strd	r9, r7, [r4]
 8003a4a:	443b      	add	r3, r7
 8003a4c:	9328      	str	r3, [sp, #160]	; 0xa0
 8003a4e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003a50:	3301      	adds	r3, #1
 8003a52:	2b07      	cmp	r3, #7
 8003a54:	9327      	str	r3, [sp, #156]	; 0x9c
 8003a56:	dc79      	bgt.n	8003b4c <_vfprintf_r+0x21c>
 8003a58:	3408      	adds	r4, #8
 8003a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003a5c:	443b      	add	r3, r7
 8003a5e:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a60:	782b      	ldrb	r3, [r5, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f001 813e 	beq.w	8004ce4 <_vfprintf_r+0x13b4>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	469b      	mov	fp, r3
 8003a70:	270a      	movs	r7, #10
 8003a72:	212b      	movs	r1, #43	; 0x2b
 8003a74:	3501      	adds	r5, #1
 8003a76:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003a7a:	9207      	str	r2, [sp, #28]
 8003a7c:	9314      	str	r3, [sp, #80]	; 0x50
 8003a7e:	462b      	mov	r3, r5
 8003a80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a84:	920a      	str	r2, [sp, #40]	; 0x28
 8003a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8003a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a8a:	3b20      	subs	r3, #32
 8003a8c:	2b5a      	cmp	r3, #90	; 0x5a
 8003a8e:	f200 85b3 	bhi.w	80045f8 <_vfprintf_r+0xcc8>
 8003a92:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003a96:	007e      	.short	0x007e
 8003a98:	05b105b1 	.word	0x05b105b1
 8003a9c:	05b10086 	.word	0x05b10086
 8003aa0:	05b105b1 	.word	0x05b105b1
 8003aa4:	05b10065 	.word	0x05b10065
 8003aa8:	008905b1 	.word	0x008905b1
 8003aac:	05b10093 	.word	0x05b10093
 8003ab0:	00960090 	.word	0x00960090
 8003ab4:	00b205b1 	.word	0x00b205b1
 8003ab8:	00b500b5 	.word	0x00b500b5
 8003abc:	00b500b5 	.word	0x00b500b5
 8003ac0:	00b500b5 	.word	0x00b500b5
 8003ac4:	00b500b5 	.word	0x00b500b5
 8003ac8:	05b100b5 	.word	0x05b100b5
 8003acc:	05b105b1 	.word	0x05b105b1
 8003ad0:	05b105b1 	.word	0x05b105b1
 8003ad4:	05b105b1 	.word	0x05b105b1
 8003ad8:	05b10124 	.word	0x05b10124
 8003adc:	00f500e2 	.word	0x00f500e2
 8003ae0:	01240124 	.word	0x01240124
 8003ae4:	05b10124 	.word	0x05b10124
 8003ae8:	05b105b1 	.word	0x05b105b1
 8003aec:	00c505b1 	.word	0x00c505b1
 8003af0:	05b105b1 	.word	0x05b105b1
 8003af4:	05b1048b 	.word	0x05b1048b
 8003af8:	05b105b1 	.word	0x05b105b1
 8003afc:	05b104d5 	.word	0x05b104d5
 8003b00:	05b104f6 	.word	0x05b104f6
 8003b04:	051805b1 	.word	0x051805b1
 8003b08:	05b105b1 	.word	0x05b105b1
 8003b0c:	05b105b1 	.word	0x05b105b1
 8003b10:	05b105b1 	.word	0x05b105b1
 8003b14:	05b105b1 	.word	0x05b105b1
 8003b18:	05b10124 	.word	0x05b10124
 8003b1c:	00f700e2 	.word	0x00f700e2
 8003b20:	01240124 	.word	0x01240124
 8003b24:	00c80124 	.word	0x00c80124
 8003b28:	00dc00f7 	.word	0x00dc00f7
 8003b2c:	00d505b1 	.word	0x00d505b1
 8003b30:	046605b1 	.word	0x046605b1
 8003b34:	04c3048d 	.word	0x04c3048d
 8003b38:	05b100dc 	.word	0x05b100dc
 8003b3c:	007c04d5 	.word	0x007c04d5
 8003b40:	05b104f8 	.word	0x05b104f8
 8003b44:	053705b1 	.word	0x053705b1
 8003b48:	007c05b1 	.word	0x007c05b1
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	4640      	mov	r0, r8
 8003b50:	aa26      	add	r2, sp, #152	; 0x98
 8003b52:	f003 f90e 	bl	8006d72 <__sprint_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	f040 812d 	bne.w	8003db6 <_vfprintf_r+0x486>
 8003b5c:	ac29      	add	r4, sp, #164	; 0xa4
 8003b5e:	e77c      	b.n	8003a5a <_vfprintf_r+0x12a>
 8003b60:	4640      	mov	r0, r8
 8003b62:	f002 fa53 	bl	800600c <_localeconv_r>
 8003b66:	6843      	ldr	r3, [r0, #4]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	9318      	str	r3, [sp, #96]	; 0x60
 8003b6c:	f7fd f81c 	bl	8000ba8 <strlen>
 8003b70:	9016      	str	r0, [sp, #88]	; 0x58
 8003b72:	4640      	mov	r0, r8
 8003b74:	f002 fa4a 	bl	800600c <_localeconv_r>
 8003b78:	6883      	ldr	r3, [r0, #8]
 8003b7a:	212b      	movs	r1, #43	; 0x2b
 8003b7c:	930e      	str	r3, [sp, #56]	; 0x38
 8003b7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b80:	b12b      	cbz	r3, 8003b8e <_vfprintf_r+0x25e>
 8003b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b84:	b11b      	cbz	r3, 8003b8e <_vfprintf_r+0x25e>
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b10b      	cbz	r3, 8003b8e <_vfprintf_r+0x25e>
 8003b8a:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8003b8e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003b90:	e775      	b.n	8003a7e <_vfprintf_r+0x14e>
 8003b92:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f9      	bne.n	8003b8e <_vfprintf_r+0x25e>
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003ba0:	e7f5      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003ba2:	f04b 0b01 	orr.w	fp, fp, #1
 8003ba6:	e7f2      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003ba8:	f856 3b04 	ldr.w	r3, [r6], #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	9314      	str	r3, [sp, #80]	; 0x50
 8003bb0:	daed      	bge.n	8003b8e <_vfprintf_r+0x25e>
 8003bb2:	425b      	negs	r3, r3
 8003bb4:	9314      	str	r3, [sp, #80]	; 0x50
 8003bb6:	f04b 0b04 	orr.w	fp, fp, #4
 8003bba:	e7e8      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003bbc:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 8003bc0:	e7e5      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc8:	2a2a      	cmp	r2, #42	; 0x2a
 8003bca:	920a      	str	r2, [sp, #40]	; 0x28
 8003bcc:	d112      	bne.n	8003bf4 <_vfprintf_r+0x2c4>
 8003bce:	f856 0b04 	ldr.w	r0, [r6], #4
 8003bd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8003bd4:	ea40 72e0 	orr.w	r2, r0, r0, asr #31
 8003bd8:	9207      	str	r2, [sp, #28]
 8003bda:	e7d8      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003bdc:	9807      	ldr	r0, [sp, #28]
 8003bde:	fb07 2200 	mla	r2, r7, r0, r2
 8003be2:	9207      	str	r2, [sp, #28]
 8003be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003be8:	920a      	str	r2, [sp, #40]	; 0x28
 8003bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bec:	3a30      	subs	r2, #48	; 0x30
 8003bee:	2a09      	cmp	r2, #9
 8003bf0:	d9f4      	bls.n	8003bdc <_vfprintf_r+0x2ac>
 8003bf2:	e748      	b.n	8003a86 <_vfprintf_r+0x156>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	9207      	str	r2, [sp, #28]
 8003bf8:	e7f7      	b.n	8003bea <_vfprintf_r+0x2ba>
 8003bfa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8003bfe:	e7c6      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003c00:	2200      	movs	r2, #0
 8003c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c04:	9214      	str	r2, [sp, #80]	; 0x50
 8003c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c08:	9814      	ldr	r0, [sp, #80]	; 0x50
 8003c0a:	3a30      	subs	r2, #48	; 0x30
 8003c0c:	fb07 2200 	mla	r2, r7, r0, r2
 8003c10:	9214      	str	r2, [sp, #80]	; 0x50
 8003c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c16:	920a      	str	r2, [sp, #40]	; 0x28
 8003c18:	3a30      	subs	r2, #48	; 0x30
 8003c1a:	2a09      	cmp	r2, #9
 8003c1c:	d9f3      	bls.n	8003c06 <_vfprintf_r+0x2d6>
 8003c1e:	e732      	b.n	8003a86 <_vfprintf_r+0x156>
 8003c20:	f04b 0b08 	orr.w	fp, fp, #8
 8003c24:	e7b3      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003c26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b68      	cmp	r3, #104	; 0x68
 8003c2c:	bf01      	itttt	eq
 8003c2e:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 8003c30:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8003c34:	3301      	addeq	r3, #1
 8003c36:	930f      	streq	r3, [sp, #60]	; 0x3c
 8003c38:	bf18      	it	ne
 8003c3a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8003c3e:	e7a6      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b6c      	cmp	r3, #108	; 0x6c
 8003c46:	d105      	bne.n	8003c54 <_vfprintf_r+0x324>
 8003c48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c4e:	f04b 0b20 	orr.w	fp, fp, #32
 8003c52:	e79c      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003c54:	f04b 0b10 	orr.w	fp, fp, #16
 8003c58:	e799      	b.n	8003b8e <_vfprintf_r+0x25e>
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f852 3b04 	ldr.w	r3, [r2], #4
 8003c62:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8003c66:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c68:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4606      	mov	r6, r0
 8003c70:	4605      	mov	r5, r0
 8003c72:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8003c76:	9008      	str	r0, [sp, #32]
 8003c78:	9307      	str	r3, [sp, #28]
 8003c7a:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8003c7e:	e1ba      	b.n	8003ff6 <_vfprintf_r+0x6c6>
 8003c80:	f04b 0b10 	orr.w	fp, fp, #16
 8003c84:	f01b 0f20 	tst.w	fp, #32
 8003c88:	d011      	beq.n	8003cae <_vfprintf_r+0x37e>
 8003c8a:	3607      	adds	r6, #7
 8003c8c:	f026 0307 	bic.w	r3, r6, #7
 8003c90:	461a      	mov	r2, r3
 8003c92:	f852 6b08 	ldr.w	r6, [r2], #8
 8003c96:	685d      	ldr	r5, [r3, #4]
 8003c98:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	da05      	bge.n	8003caa <_vfprintf_r+0x37a>
 8003c9e:	232d      	movs	r3, #45	; 0x2d
 8003ca0:	4276      	negs	r6, r6
 8003ca2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003ca6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003caa:	2301      	movs	r3, #1
 8003cac:	e391      	b.n	80043d2 <_vfprintf_r+0xaa2>
 8003cae:	4633      	mov	r3, r6
 8003cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cb4:	f01b 0f10 	tst.w	fp, #16
 8003cb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8003cba:	d002      	beq.n	8003cc2 <_vfprintf_r+0x392>
 8003cbc:	462e      	mov	r6, r5
 8003cbe:	17ed      	asrs	r5, r5, #31
 8003cc0:	e7eb      	b.n	8003c9a <_vfprintf_r+0x36a>
 8003cc2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8003cc6:	d003      	beq.n	8003cd0 <_vfprintf_r+0x3a0>
 8003cc8:	b22e      	sxth	r6, r5
 8003cca:	f345 35c0 	sbfx	r5, r5, #15, #1
 8003cce:	e7e4      	b.n	8003c9a <_vfprintf_r+0x36a>
 8003cd0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8003cd4:	d0f2      	beq.n	8003cbc <_vfprintf_r+0x38c>
 8003cd6:	b26e      	sxtb	r6, r5
 8003cd8:	f345 15c0 	sbfx	r5, r5, #7, #1
 8003cdc:	e7dd      	b.n	8003c9a <_vfprintf_r+0x36a>
 8003cde:	3607      	adds	r6, #7
 8003ce0:	f026 0307 	bic.w	r3, r6, #7
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8003cea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8003cee:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 8003cf2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003cf6:	910b      	str	r1, [sp, #44]	; 0x2c
 8003cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4629      	mov	r1, r5
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <_vfprintf_r+0x4cc>)
 8003d02:	f7fc ffe1 	bl	8000cc8 <__aeabi_dcmpun>
 8003d06:	bb10      	cbnz	r0, 8003d4e <_vfprintf_r+0x41e>
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <_vfprintf_r+0x4cc>)
 8003d12:	f7fc ffbb 	bl	8000c8c <__aeabi_dcmple>
 8003d16:	b9d0      	cbnz	r0, 8003d4e <_vfprintf_r+0x41e>
 8003d18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f7fc ffaa 	bl	8000c78 <__aeabi_dcmplt>
 8003d24:	b110      	cbz	r0, 8003d2c <_vfprintf_r+0x3fc>
 8003d26:	232d      	movs	r3, #45	; 0x2d
 8003d28:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003d2c:	4a34      	ldr	r2, [pc, #208]	; (8003e00 <_vfprintf_r+0x4d0>)
 8003d2e:	4835      	ldr	r0, [pc, #212]	; (8003e04 <_vfprintf_r+0x4d4>)
 8003d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	2b47      	cmp	r3, #71	; 0x47
 8003d36:	bfd4      	ite	le
 8003d38:	4691      	movle	r9, r2
 8003d3a:	4681      	movgt	r9, r0
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e9cd 3107 	strd	r3, r1, [sp, #28]
 8003d42:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8003d46:	2600      	movs	r6, #0
 8003d48:	4633      	mov	r3, r6
 8003d4a:	f001 b805 	b.w	8004d58 <_vfprintf_r+0x1428>
 8003d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7fc ffb7 	bl	8000cc8 <__aeabi_dcmpun>
 8003d5a:	b148      	cbz	r0, 8003d70 <_vfprintf_r+0x440>
 8003d5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <_vfprintf_r+0x4d8>)
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bfb8      	it	lt
 8003d64:	232d      	movlt	r3, #45	; 0x2d
 8003d66:	4829      	ldr	r0, [pc, #164]	; (8003e0c <_vfprintf_r+0x4dc>)
 8003d68:	bfb8      	it	lt
 8003d6a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8003d6e:	e7df      	b.n	8003d30 <_vfprintf_r+0x400>
 8003d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d72:	f023 0320 	bic.w	r3, r3, #32
 8003d76:	2b41      	cmp	r3, #65	; 0x41
 8003d78:	930c      	str	r3, [sp, #48]	; 0x30
 8003d7a:	d12e      	bne.n	8003dda <_vfprintf_r+0x4aa>
 8003d7c:	2330      	movs	r3, #48	; 0x30
 8003d7e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8003d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d84:	f04b 0b02 	orr.w	fp, fp, #2
 8003d88:	2b61      	cmp	r3, #97	; 0x61
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2378      	moveq	r3, #120	; 0x78
 8003d8e:	2358      	movne	r3, #88	; 0x58
 8003d90:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8003d94:	9b07      	ldr	r3, [sp, #28]
 8003d96:	2b63      	cmp	r3, #99	; 0x63
 8003d98:	dd3a      	ble.n	8003e10 <_vfprintf_r+0x4e0>
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	1c59      	adds	r1, r3, #1
 8003d9e:	f002 f9a9 	bl	80060f4 <_malloc_r>
 8003da2:	4681      	mov	r9, r0
 8003da4:	2800      	cmp	r0, #0
 8003da6:	f040 81fd 	bne.w	80041a4 <_vfprintf_r+0x874>
 8003daa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003db2:	f8aa 300c 	strh.w	r3, [sl, #12]
 8003db6:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 8003dba:	07d9      	lsls	r1, r3, #31
 8003dbc:	d407      	bmi.n	8003dce <_vfprintf_r+0x49e>
 8003dbe:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003dc2:	059a      	lsls	r2, r3, #22
 8003dc4:	d403      	bmi.n	8003dce <_vfprintf_r+0x49e>
 8003dc6:	f8da 0058 	ldr.w	r0, [sl, #88]	; 0x58
 8003dca:	f002 f926 	bl	800601a <__retarget_lock_release_recursive>
 8003dce:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003dd2:	065b      	lsls	r3, r3, #25
 8003dd4:	f57f adf2 	bpl.w	80039bc <_vfprintf_r+0x8c>
 8003dd8:	e5ed      	b.n	80039b6 <_vfprintf_r+0x86>
 8003dda:	9b07      	ldr	r3, [sp, #28]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	f000 81e3 	beq.w	80041a8 <_vfprintf_r+0x878>
 8003de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003de4:	2b47      	cmp	r3, #71	; 0x47
 8003de6:	f040 81e2 	bne.w	80041ae <_vfprintf_r+0x87e>
 8003dea:	9b07      	ldr	r3, [sp, #28]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f040 81de 	bne.w	80041ae <_vfprintf_r+0x87e>
 8003df2:	9308      	str	r3, [sp, #32]
 8003df4:	2301      	movs	r3, #1
 8003df6:	9307      	str	r3, [sp, #28]
 8003df8:	e00d      	b.n	8003e16 <_vfprintf_r+0x4e6>
 8003dfa:	bf00      	nop
 8003dfc:	7fefffff 	.word	0x7fefffff
 8003e00:	08008378 	.word	0x08008378
 8003e04:	0800837c 	.word	0x0800837c
 8003e08:	08008380 	.word	0x08008380
 8003e0c:	08008384 	.word	0x08008384
 8003e10:	9008      	str	r0, [sp, #32]
 8003e12:	f10d 09e4 	add.w	r9, sp, #228	; 0xe4
 8003e16:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8003e1a:	9315      	str	r3, [sp, #84]	; 0x54
 8003e1c:	e9dd 7310 	ldrd	r7, r3, [sp, #64]	; 0x40
 8003e20:	1e1d      	subs	r5, r3, #0
 8003e22:	bfae      	itee	ge
 8003e24:	2300      	movge	r3, #0
 8003e26:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 8003e2a:	232d      	movlt	r3, #45	; 0x2d
 8003e2c:	931c      	str	r3, [sp, #112]	; 0x70
 8003e2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e30:	2b41      	cmp	r3, #65	; 0x41
 8003e32:	f040 81d4 	bne.w	80041de <_vfprintf_r+0x8ae>
 8003e36:	4638      	mov	r0, r7
 8003e38:	aa20      	add	r2, sp, #128	; 0x80
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f002 fef2 	bl	8006c24 <frexp>
 8003e40:	2200      	movs	r2, #0
 8003e42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003e46:	f7fc fb3f 	bl	80004c8 <__aeabi_dmul>
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460f      	mov	r7, r1
 8003e52:	f7fc ff07 	bl	8000c64 <__aeabi_dcmpeq>
 8003e56:	b108      	cbz	r0, 8003e5c <_vfprintf_r+0x52c>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	9320      	str	r3, [sp, #128]	; 0x80
 8003e5c:	4ba6      	ldr	r3, [pc, #664]	; (80040f8 <_vfprintf_r+0x7c8>)
 8003e5e:	4aa7      	ldr	r2, [pc, #668]	; (80040fc <_vfprintf_r+0x7cc>)
 8003e60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e62:	464d      	mov	r5, r9
 8003e64:	2961      	cmp	r1, #97	; 0x61
 8003e66:	bf18      	it	ne
 8003e68:	461a      	movne	r2, r3
 8003e6a:	9b07      	ldr	r3, [sp, #28]
 8003e6c:	921b      	str	r2, [sp, #108]	; 0x6c
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	2200      	movs	r2, #0
 8003e74:	4ba2      	ldr	r3, [pc, #648]	; (8004100 <_vfprintf_r+0x7d0>)
 8003e76:	4630      	mov	r0, r6
 8003e78:	4639      	mov	r1, r7
 8003e7a:	f7fc fb25 	bl	80004c8 <__aeabi_dmul>
 8003e7e:	460f      	mov	r7, r1
 8003e80:	4606      	mov	r6, r0
 8003e82:	f7fc ff37 	bl	8000cf4 <__aeabi_d2iz>
 8003e86:	901d      	str	r0, [sp, #116]	; 0x74
 8003e88:	f7fc fab4 	bl	80003f4 <__aeabi_i2d>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4630      	mov	r0, r6
 8003e92:	4639      	mov	r1, r7
 8003e94:	f7fc f960 	bl	8000158 <__aeabi_dsub>
 8003e98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003e9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e9c:	4606      	mov	r6, r0
 8003e9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ea0:	460f      	mov	r7, r1
 8003ea2:	f805 3b01 	strb.w	r3, [r5], #1
 8003ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8003eac:	d007      	beq.n	8003ebe <_vfprintf_r+0x58e>
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f7fc fed5 	bl	8000c64 <__aeabi_dcmpeq>
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	d0d9      	beq.n	8003e72 <_vfprintf_r+0x542>
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	4b8f      	ldr	r3, [pc, #572]	; (8004104 <_vfprintf_r+0x7d4>)
 8003ec6:	f7fc fef5 	bl	8000cb4 <__aeabi_dcmpgt>
 8003eca:	b960      	cbnz	r0, 8003ee6 <_vfprintf_r+0x5b6>
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4630      	mov	r0, r6
 8003ed0:	4639      	mov	r1, r7
 8003ed2:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <_vfprintf_r+0x7d4>)
 8003ed4:	f7fc fec6 	bl	8000c64 <__aeabi_dcmpeq>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f000 817b 	beq.w	80041d4 <_vfprintf_r+0x8a4>
 8003ede:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003ee0:	07da      	lsls	r2, r3, #31
 8003ee2:	f140 8177 	bpl.w	80041d4 <_vfprintf_r+0x8a4>
 8003ee6:	2030      	movs	r0, #48	; 0x30
 8003ee8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003eea:	9524      	str	r5, [sp, #144]	; 0x90
 8003eec:	7bd9      	ldrb	r1, [r3, #15]
 8003eee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003ef0:	1e53      	subs	r3, r2, #1
 8003ef2:	9324      	str	r3, [sp, #144]	; 0x90
 8003ef4:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	f000 815a 	beq.w	80041b2 <_vfprintf_r+0x882>
 8003efe:	2b39      	cmp	r3, #57	; 0x39
 8003f00:	bf0b      	itete	eq
 8003f02:	9b1b      	ldreq	r3, [sp, #108]	; 0x6c
 8003f04:	3301      	addne	r3, #1
 8003f06:	7a9b      	ldrbeq	r3, [r3, #10]
 8003f08:	b2db      	uxtbne	r3, r3
 8003f0a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f0e:	eba5 0309 	sub.w	r3, r5, r9
 8003f12:	9309      	str	r3, [sp, #36]	; 0x24
 8003f14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f16:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003f18:	2b47      	cmp	r3, #71	; 0x47
 8003f1a:	f040 81ad 	bne.w	8004278 <_vfprintf_r+0x948>
 8003f1e:	1ceb      	adds	r3, r5, #3
 8003f20:	db03      	blt.n	8003f2a <_vfprintf_r+0x5fa>
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	42ab      	cmp	r3, r5
 8003f26:	f280 81d2 	bge.w	80042ce <_vfprintf_r+0x99e>
 8003f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2c:	3b02      	subs	r3, #2
 8003f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f32:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8003f36:	f021 0120 	bic.w	r1, r1, #32
 8003f3a:	2941      	cmp	r1, #65	; 0x41
 8003f3c:	bf08      	it	eq
 8003f3e:	320f      	addeq	r2, #15
 8003f40:	f105 33ff 	add.w	r3, r5, #4294967295
 8003f44:	bf06      	itte	eq
 8003f46:	b2d2      	uxtbeq	r2, r2
 8003f48:	2101      	moveq	r1, #1
 8003f4a:	2100      	movne	r1, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8003f52:	bfb4      	ite	lt
 8003f54:	222d      	movlt	r2, #45	; 0x2d
 8003f56:	222b      	movge	r2, #43	; 0x2b
 8003f58:	9320      	str	r3, [sp, #128]	; 0x80
 8003f5a:	bfb8      	it	lt
 8003f5c:	f1c5 0301 	rsblt	r3, r5, #1
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 8003f66:	f340 81a0 	ble.w	80042aa <_vfprintf_r+0x97a>
 8003f6a:	260a      	movs	r6, #10
 8003f6c:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8003f70:	fb93 f5f6 	sdiv	r5, r3, r6
 8003f74:	4611      	mov	r1, r2
 8003f76:	fb06 3015 	mls	r0, r6, r5, r3
 8003f7a:	3030      	adds	r0, #48	; 0x30
 8003f7c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8003f80:	4618      	mov	r0, r3
 8003f82:	2863      	cmp	r0, #99	; 0x63
 8003f84:	462b      	mov	r3, r5
 8003f86:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f8a:	dcf1      	bgt.n	8003f70 <_vfprintf_r+0x640>
 8003f8c:	3330      	adds	r3, #48	; 0x30
 8003f8e:	1e88      	subs	r0, r1, #2
 8003f90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003f94:	4603      	mov	r3, r0
 8003f96:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8003f9a:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	f0c0 817e 	bcc.w	80042a0 <_vfprintf_r+0x970>
 8003fa4:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 8003fa8:	1a52      	subs	r2, r2, r1
 8003faa:	42a8      	cmp	r0, r5
 8003fac:	bf88      	it	hi
 8003fae:	2200      	movhi	r2, #0
 8003fb0:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8003fb4:	441a      	add	r2, r3
 8003fb6:	ab22      	add	r3, sp, #136	; 0x88
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fbc:	9319      	str	r3, [sp, #100]	; 0x64
 8003fbe:	2a01      	cmp	r2, #1
 8003fc0:	4413      	add	r3, r2
 8003fc2:	9307      	str	r3, [sp, #28]
 8003fc4:	dc02      	bgt.n	8003fcc <_vfprintf_r+0x69c>
 8003fc6:	f01b 0f01 	tst.w	fp, #1
 8003fca:	d003      	beq.n	8003fd4 <_vfprintf_r+0x6a4>
 8003fcc:	9b07      	ldr	r3, [sp, #28]
 8003fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003fd0:	4413      	add	r3, r2
 8003fd2:	9307      	str	r3, [sp, #28]
 8003fd4:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8003fde:	2300      	movs	r3, #0
 8003fe0:	461d      	mov	r5, r3
 8003fe2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8003fe6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003fe8:	b113      	cbz	r3, 8003ff0 <_vfprintf_r+0x6c0>
 8003fea:	232d      	movs	r3, #45	; 0x2d
 8003fec:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
 8003ff6:	9b07      	ldr	r3, [sp, #28]
 8003ff8:	42b3      	cmp	r3, r6
 8003ffa:	bfb8      	it	lt
 8003ffc:	4633      	movlt	r3, r6
 8003ffe:	9315      	str	r3, [sp, #84]	; 0x54
 8004000:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004004:	b113      	cbz	r3, 800400c <_vfprintf_r+0x6dc>
 8004006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004008:	3301      	adds	r3, #1
 800400a:	9315      	str	r3, [sp, #84]	; 0x54
 800400c:	f01b 0302 	ands.w	r3, fp, #2
 8004010:	931b      	str	r3, [sp, #108]	; 0x6c
 8004012:	bf1e      	ittt	ne
 8004014:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8004016:	3302      	addne	r3, #2
 8004018:	9315      	strne	r3, [sp, #84]	; 0x54
 800401a:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800401e:	931c      	str	r3, [sp, #112]	; 0x70
 8004020:	d11f      	bne.n	8004062 <_vfprintf_r+0x732>
 8004022:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8004026:	1a9f      	subs	r7, r3, r2
 8004028:	2f00      	cmp	r7, #0
 800402a:	dd1a      	ble.n	8004062 <_vfprintf_r+0x732>
 800402c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004030:	4835      	ldr	r0, [pc, #212]	; (8004108 <_vfprintf_r+0x7d8>)
 8004032:	2f10      	cmp	r7, #16
 8004034:	f103 0301 	add.w	r3, r3, #1
 8004038:	f104 0108 	add.w	r1, r4, #8
 800403c:	6020      	str	r0, [r4, #0]
 800403e:	f300 82ea 	bgt.w	8004616 <_vfprintf_r+0xce6>
 8004042:	443a      	add	r2, r7
 8004044:	2b07      	cmp	r3, #7
 8004046:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800404a:	6067      	str	r7, [r4, #4]
 800404c:	f340 82f6 	ble.w	800463c <_vfprintf_r+0xd0c>
 8004050:	4651      	mov	r1, sl
 8004052:	4640      	mov	r0, r8
 8004054:	aa26      	add	r2, sp, #152	; 0x98
 8004056:	f002 fe8c 	bl	8006d72 <__sprint_r>
 800405a:	2800      	cmp	r0, #0
 800405c:	f040 8620 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004060:	ac29      	add	r4, sp, #164	; 0xa4
 8004062:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8004066:	b173      	cbz	r3, 8004086 <_vfprintf_r+0x756>
 8004068:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 800406c:	6023      	str	r3, [r4, #0]
 800406e:	2301      	movs	r3, #1
 8004070:	6063      	str	r3, [r4, #4]
 8004072:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004074:	3301      	adds	r3, #1
 8004076:	9328      	str	r3, [sp, #160]	; 0xa0
 8004078:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800407a:	3301      	adds	r3, #1
 800407c:	2b07      	cmp	r3, #7
 800407e:	9327      	str	r3, [sp, #156]	; 0x9c
 8004080:	f300 82de 	bgt.w	8004640 <_vfprintf_r+0xd10>
 8004084:	3408      	adds	r4, #8
 8004086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004088:	b16b      	cbz	r3, 80040a6 <_vfprintf_r+0x776>
 800408a:	ab1f      	add	r3, sp, #124	; 0x7c
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	2302      	movs	r3, #2
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004094:	3302      	adds	r3, #2
 8004096:	9328      	str	r3, [sp, #160]	; 0xa0
 8004098:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800409a:	3301      	adds	r3, #1
 800409c:	2b07      	cmp	r3, #7
 800409e:	9327      	str	r3, [sp, #156]	; 0x9c
 80040a0:	f300 82d8 	bgt.w	8004654 <_vfprintf_r+0xd24>
 80040a4:	3408      	adds	r4, #8
 80040a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80040a8:	2b80      	cmp	r3, #128	; 0x80
 80040aa:	d11f      	bne.n	80040ec <_vfprintf_r+0x7bc>
 80040ac:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80040b0:	1a9f      	subs	r7, r3, r2
 80040b2:	2f00      	cmp	r7, #0
 80040b4:	dd1a      	ble.n	80040ec <_vfprintf_r+0x7bc>
 80040b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80040ba:	4814      	ldr	r0, [pc, #80]	; (800410c <_vfprintf_r+0x7dc>)
 80040bc:	2f10      	cmp	r7, #16
 80040be:	f103 0301 	add.w	r3, r3, #1
 80040c2:	f104 0108 	add.w	r1, r4, #8
 80040c6:	6020      	str	r0, [r4, #0]
 80040c8:	f300 82ce 	bgt.w	8004668 <_vfprintf_r+0xd38>
 80040cc:	6067      	str	r7, [r4, #4]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	4417      	add	r7, r2
 80040d2:	e9cd 3727 	strd	r3, r7, [sp, #156]	; 0x9c
 80040d6:	f340 82da 	ble.w	800468e <_vfprintf_r+0xd5e>
 80040da:	4651      	mov	r1, sl
 80040dc:	4640      	mov	r0, r8
 80040de:	aa26      	add	r2, sp, #152	; 0x98
 80040e0:	f002 fe47 	bl	8006d72 <__sprint_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	f040 85db 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80040ea:	ac29      	add	r4, sp, #164	; 0xa4
 80040ec:	9b07      	ldr	r3, [sp, #28]
 80040ee:	1af6      	subs	r6, r6, r3
 80040f0:	2e00      	cmp	r6, #0
 80040f2:	dd27      	ble.n	8004144 <_vfprintf_r+0x814>
 80040f4:	4f05      	ldr	r7, [pc, #20]	; (800410c <_vfprintf_r+0x7dc>)
 80040f6:	e00b      	b.n	8004110 <_vfprintf_r+0x7e0>
 80040f8:	08008399 	.word	0x08008399
 80040fc:	08008388 	.word	0x08008388
 8004100:	40300000 	.word	0x40300000
 8004104:	3fe00000 	.word	0x3fe00000
 8004108:	080083ac 	.word	0x080083ac
 800410c:	080083bc 	.word	0x080083bc
 8004110:	2e10      	cmp	r6, #16
 8004112:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004116:	f104 0108 	add.w	r1, r4, #8
 800411a:	f103 0301 	add.w	r3, r3, #1
 800411e:	6027      	str	r7, [r4, #0]
 8004120:	f300 82b7 	bgt.w	8004692 <_vfprintf_r+0xd62>
 8004124:	6066      	str	r6, [r4, #4]
 8004126:	2b07      	cmp	r3, #7
 8004128:	4416      	add	r6, r2
 800412a:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800412e:	f340 82c3 	ble.w	80046b8 <_vfprintf_r+0xd88>
 8004132:	4651      	mov	r1, sl
 8004134:	4640      	mov	r0, r8
 8004136:	aa26      	add	r2, sp, #152	; 0x98
 8004138:	f002 fe1b 	bl	8006d72 <__sprint_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	f040 85af 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004142:	ac29      	add	r4, sp, #164	; 0xa4
 8004144:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004148:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800414a:	f040 82bb 	bne.w	80046c4 <_vfprintf_r+0xd94>
 800414e:	9b07      	ldr	r3, [sp, #28]
 8004150:	f8c4 9000 	str.w	r9, [r4]
 8004154:	441e      	add	r6, r3
 8004156:	6063      	str	r3, [r4, #4]
 8004158:	9628      	str	r6, [sp, #160]	; 0xa0
 800415a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800415c:	3301      	adds	r3, #1
 800415e:	2b07      	cmp	r3, #7
 8004160:	9327      	str	r3, [sp, #156]	; 0x9c
 8004162:	f300 82f4 	bgt.w	800474e <_vfprintf_r+0xe1e>
 8004166:	3408      	adds	r4, #8
 8004168:	f01b 0f04 	tst.w	fp, #4
 800416c:	f040 857a 	bne.w	8004c64 <_vfprintf_r+0x1334>
 8004170:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 8004174:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004176:	428a      	cmp	r2, r1
 8004178:	bfac      	ite	ge
 800417a:	189b      	addge	r3, r3, r2
 800417c:	185b      	addlt	r3, r3, r1
 800417e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004180:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004182:	b13b      	cbz	r3, 8004194 <_vfprintf_r+0x864>
 8004184:	4651      	mov	r1, sl
 8004186:	4640      	mov	r0, r8
 8004188:	aa26      	add	r2, sp, #152	; 0x98
 800418a:	f002 fdf2 	bl	8006d72 <__sprint_r>
 800418e:	2800      	cmp	r0, #0
 8004190:	f040 8586 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004194:	2300      	movs	r3, #0
 8004196:	9327      	str	r3, [sp, #156]	; 0x9c
 8004198:	9b08      	ldr	r3, [sp, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f040 859c 	bne.w	8004cd8 <_vfprintf_r+0x13a8>
 80041a0:	ac29      	add	r4, sp, #164	; 0xa4
 80041a2:	e0e9      	b.n	8004378 <_vfprintf_r+0xa48>
 80041a4:	9008      	str	r0, [sp, #32]
 80041a6:	e636      	b.n	8003e16 <_vfprintf_r+0x4e6>
 80041a8:	2306      	movs	r3, #6
 80041aa:	9008      	str	r0, [sp, #32]
 80041ac:	e623      	b.n	8003df6 <_vfprintf_r+0x4c6>
 80041ae:	9008      	str	r0, [sp, #32]
 80041b0:	e631      	b.n	8003e16 <_vfprintf_r+0x4e6>
 80041b2:	f802 0c01 	strb.w	r0, [r2, #-1]
 80041b6:	e69a      	b.n	8003eee <_vfprintf_r+0x5be>
 80041b8:	f803 0b01 	strb.w	r0, [r3], #1
 80041bc:	1aca      	subs	r2, r1, r3
 80041be:	2a00      	cmp	r2, #0
 80041c0:	dafa      	bge.n	80041b8 <_vfprintf_r+0x888>
 80041c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041c6:	3201      	adds	r2, #1
 80041c8:	f103 0301 	add.w	r3, r3, #1
 80041cc:	bfb8      	it	lt
 80041ce:	2300      	movlt	r3, #0
 80041d0:	441d      	add	r5, r3
 80041d2:	e69c      	b.n	8003f0e <_vfprintf_r+0x5de>
 80041d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041d6:	462b      	mov	r3, r5
 80041d8:	2030      	movs	r0, #48	; 0x30
 80041da:	18a9      	adds	r1, r5, r2
 80041dc:	e7ee      	b.n	80041bc <_vfprintf_r+0x88c>
 80041de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041e0:	2b46      	cmp	r3, #70	; 0x46
 80041e2:	d005      	beq.n	80041f0 <_vfprintf_r+0x8c0>
 80041e4:	2b45      	cmp	r3, #69	; 0x45
 80041e6:	d11b      	bne.n	8004220 <_vfprintf_r+0x8f0>
 80041e8:	9b07      	ldr	r3, [sp, #28]
 80041ea:	1c5e      	adds	r6, r3, #1
 80041ec:	2302      	movs	r3, #2
 80041ee:	e001      	b.n	80041f4 <_vfprintf_r+0x8c4>
 80041f0:	2303      	movs	r3, #3
 80041f2:	9e07      	ldr	r6, [sp, #28]
 80041f4:	aa24      	add	r2, sp, #144	; 0x90
 80041f6:	9204      	str	r2, [sp, #16]
 80041f8:	aa21      	add	r2, sp, #132	; 0x84
 80041fa:	9203      	str	r2, [sp, #12]
 80041fc:	aa20      	add	r2, sp, #128	; 0x80
 80041fe:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	463a      	mov	r2, r7
 8004206:	462b      	mov	r3, r5
 8004208:	4640      	mov	r0, r8
 800420a:	f000 fee5 	bl	8004fd8 <_dtoa_r>
 800420e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004210:	4681      	mov	r9, r0
 8004212:	2b47      	cmp	r3, #71	; 0x47
 8004214:	d106      	bne.n	8004224 <_vfprintf_r+0x8f4>
 8004216:	f01b 0f01 	tst.w	fp, #1
 800421a:	d103      	bne.n	8004224 <_vfprintf_r+0x8f4>
 800421c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800421e:	e676      	b.n	8003f0e <_vfprintf_r+0x5de>
 8004220:	9e07      	ldr	r6, [sp, #28]
 8004222:	e7e3      	b.n	80041ec <_vfprintf_r+0x8bc>
 8004224:	eb09 0306 	add.w	r3, r9, r6
 8004228:	9309      	str	r3, [sp, #36]	; 0x24
 800422a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800422c:	2b46      	cmp	r3, #70	; 0x46
 800422e:	d111      	bne.n	8004254 <_vfprintf_r+0x924>
 8004230:	f899 3000 	ldrb.w	r3, [r9]
 8004234:	2b30      	cmp	r3, #48	; 0x30
 8004236:	d109      	bne.n	800424c <_vfprintf_r+0x91c>
 8004238:	2200      	movs	r2, #0
 800423a:	2300      	movs	r3, #0
 800423c:	4638      	mov	r0, r7
 800423e:	4629      	mov	r1, r5
 8004240:	f7fc fd10 	bl	8000c64 <__aeabi_dcmpeq>
 8004244:	b910      	cbnz	r0, 800424c <_vfprintf_r+0x91c>
 8004246:	f1c6 0601 	rsb	r6, r6, #1
 800424a:	9620      	str	r6, [sp, #128]	; 0x80
 800424c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800424e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004250:	441a      	add	r2, r3
 8004252:	9209      	str	r2, [sp, #36]	; 0x24
 8004254:	2200      	movs	r2, #0
 8004256:	2300      	movs	r3, #0
 8004258:	4638      	mov	r0, r7
 800425a:	4629      	mov	r1, r5
 800425c:	f7fc fd02 	bl	8000c64 <__aeabi_dcmpeq>
 8004260:	b108      	cbz	r0, 8004266 <_vfprintf_r+0x936>
 8004262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004264:	9324      	str	r3, [sp, #144]	; 0x90
 8004266:	2230      	movs	r2, #48	; 0x30
 8004268:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800426a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800426c:	4299      	cmp	r1, r3
 800426e:	d9d5      	bls.n	800421c <_vfprintf_r+0x8ec>
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	9124      	str	r1, [sp, #144]	; 0x90
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e7f7      	b.n	8004268 <_vfprintf_r+0x938>
 8004278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800427a:	2b46      	cmp	r3, #70	; 0x46
 800427c:	f47f ae58 	bne.w	8003f30 <_vfprintf_r+0x600>
 8004280:	9a07      	ldr	r2, [sp, #28]
 8004282:	f00b 0301 	and.w	r3, fp, #1
 8004286:	2d00      	cmp	r5, #0
 8004288:	ea43 0302 	orr.w	r3, r3, r2
 800428c:	dd1a      	ble.n	80042c4 <_vfprintf_r+0x994>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d034      	beq.n	80042fc <_vfprintf_r+0x9cc>
 8004292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004294:	18eb      	adds	r3, r5, r3
 8004296:	441a      	add	r2, r3
 8004298:	9207      	str	r2, [sp, #28]
 800429a:	2366      	movs	r3, #102	; 0x66
 800429c:	930a      	str	r3, [sp, #40]	; 0x28
 800429e:	e033      	b.n	8004308 <_vfprintf_r+0x9d8>
 80042a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80042a4:	f802 6b01 	strb.w	r6, [r2], #1
 80042a8:	e679      	b.n	8003f9e <_vfprintf_r+0x66e>
 80042aa:	b941      	cbnz	r1, 80042be <_vfprintf_r+0x98e>
 80042ac:	2230      	movs	r2, #48	; 0x30
 80042ae:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80042b2:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80042b6:	3330      	adds	r3, #48	; 0x30
 80042b8:	f802 3b01 	strb.w	r3, [r2], #1
 80042bc:	e67b      	b.n	8003fb6 <_vfprintf_r+0x686>
 80042be:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80042c2:	e7f8      	b.n	80042b6 <_vfprintf_r+0x986>
 80042c4:	b1e3      	cbz	r3, 8004300 <_vfprintf_r+0x9d0>
 80042c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042c8:	9a07      	ldr	r2, [sp, #28]
 80042ca:	3301      	adds	r3, #1
 80042cc:	e7e3      	b.n	8004296 <_vfprintf_r+0x966>
 80042ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042d0:	42ab      	cmp	r3, r5
 80042d2:	dc07      	bgt.n	80042e4 <_vfprintf_r+0x9b4>
 80042d4:	f01b 0f01 	tst.w	fp, #1
 80042d8:	d02d      	beq.n	8004336 <_vfprintf_r+0xa06>
 80042da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042dc:	18eb      	adds	r3, r5, r3
 80042de:	9307      	str	r3, [sp, #28]
 80042e0:	2367      	movs	r3, #103	; 0x67
 80042e2:	e7db      	b.n	800429c <_vfprintf_r+0x96c>
 80042e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	4413      	add	r3, r2
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	dcf7      	bgt.n	80042e0 <_vfprintf_r+0x9b0>
 80042f0:	9a07      	ldr	r2, [sp, #28]
 80042f2:	f1c5 0301 	rsb	r3, r5, #1
 80042f6:	441a      	add	r2, r3
 80042f8:	9207      	str	r2, [sp, #28]
 80042fa:	e7f1      	b.n	80042e0 <_vfprintf_r+0x9b0>
 80042fc:	9507      	str	r5, [sp, #28]
 80042fe:	e7cc      	b.n	800429a <_vfprintf_r+0x96a>
 8004300:	2366      	movs	r3, #102	; 0x66
 8004302:	930a      	str	r3, [sp, #40]	; 0x28
 8004304:	2301      	movs	r3, #1
 8004306:	9307      	str	r3, [sp, #28]
 8004308:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800430c:	930d      	str	r3, [sp, #52]	; 0x34
 800430e:	d025      	beq.n	800435c <_vfprintf_r+0xa2c>
 8004310:	2300      	movs	r3, #0
 8004312:	2d00      	cmp	r5, #0
 8004314:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004318:	f77f ae65 	ble.w	8003fe6 <_vfprintf_r+0x6b6>
 800431c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2bff      	cmp	r3, #255	; 0xff
 8004322:	d10a      	bne.n	800433a <_vfprintf_r+0xa0a>
 8004324:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004328:	9916      	ldr	r1, [sp, #88]	; 0x58
 800432a:	4413      	add	r3, r2
 800432c:	9a07      	ldr	r2, [sp, #28]
 800432e:	fb01 2303 	mla	r3, r1, r3, r2
 8004332:	9307      	str	r3, [sp, #28]
 8004334:	e657      	b.n	8003fe6 <_vfprintf_r+0x6b6>
 8004336:	9507      	str	r5, [sp, #28]
 8004338:	e7d2      	b.n	80042e0 <_vfprintf_r+0x9b0>
 800433a:	42ab      	cmp	r3, r5
 800433c:	daf2      	bge.n	8004324 <_vfprintf_r+0x9f4>
 800433e:	1aed      	subs	r5, r5, r3
 8004340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	b133      	cbz	r3, 8004354 <_vfprintf_r+0xa24>
 8004346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004348:	3301      	adds	r3, #1
 800434a:	930d      	str	r3, [sp, #52]	; 0x34
 800434c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800434e:	3301      	adds	r3, #1
 8004350:	930e      	str	r3, [sp, #56]	; 0x38
 8004352:	e7e3      	b.n	800431c <_vfprintf_r+0x9ec>
 8004354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004356:	3301      	adds	r3, #1
 8004358:	930c      	str	r3, [sp, #48]	; 0x30
 800435a:	e7df      	b.n	800431c <_vfprintf_r+0x9ec>
 800435c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800435e:	930c      	str	r3, [sp, #48]	; 0x30
 8004360:	e641      	b.n	8003fe6 <_vfprintf_r+0x6b6>
 8004362:	1d33      	adds	r3, r6, #4
 8004364:	f01b 0f20 	tst.w	fp, #32
 8004368:	930b      	str	r3, [sp, #44]	; 0x2c
 800436a:	d00a      	beq.n	8004382 <_vfprintf_r+0xa52>
 800436c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800436e:	6833      	ldr	r3, [r6, #0]
 8004370:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8004372:	17d2      	asrs	r2, r2, #31
 8004374:	e9c3 1200 	strd	r1, r2, [r3]
 8004378:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800437a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800437e:	f7ff bb57 	b.w	8003a30 <_vfprintf_r+0x100>
 8004382:	f01b 0f10 	tst.w	fp, #16
 8004386:	d003      	beq.n	8004390 <_vfprintf_r+0xa60>
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e7f3      	b.n	8004378 <_vfprintf_r+0xa48>
 8004390:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8004394:	d003      	beq.n	800439e <_vfprintf_r+0xa6e>
 8004396:	6833      	ldr	r3, [r6, #0]
 8004398:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	e7ec      	b.n	8004378 <_vfprintf_r+0xa48>
 800439e:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80043a2:	d0f1      	beq.n	8004388 <_vfprintf_r+0xa58>
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e7e5      	b.n	8004378 <_vfprintf_r+0xa48>
 80043ac:	f04b 0b10 	orr.w	fp, fp, #16
 80043b0:	f01b 0320 	ands.w	r3, fp, #32
 80043b4:	d01f      	beq.n	80043f6 <_vfprintf_r+0xac6>
 80043b6:	3607      	adds	r6, #7
 80043b8:	f026 0307 	bic.w	r3, r6, #7
 80043bc:	461a      	mov	r2, r3
 80043be:	f852 6b08 	ldr.w	r6, [r2], #8
 80043c2:	685d      	ldr	r5, [r3, #4]
 80043c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80043c6:	2300      	movs	r3, #0
 80043c8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80043cc:	2200      	movs	r2, #0
 80043ce:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80043d2:	9a07      	ldr	r2, [sp, #28]
 80043d4:	3201      	adds	r2, #1
 80043d6:	f000 8494 	beq.w	8004d02 <_vfprintf_r+0x13d2>
 80043da:	ea56 0205 	orrs.w	r2, r6, r5
 80043de:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
 80043e2:	f040 8493 	bne.w	8004d0c <_vfprintf_r+0x13dc>
 80043e6:	9a07      	ldr	r2, [sp, #28]
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	f000 80fa 	beq.w	80045e2 <_vfprintf_r+0xcb2>
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f040 848f 	bne.w	8004d12 <_vfprintf_r+0x13e2>
 80043f4:	e09f      	b.n	8004536 <_vfprintf_r+0xc06>
 80043f6:	4632      	mov	r2, r6
 80043f8:	f852 6b04 	ldr.w	r6, [r2], #4
 80043fc:	f01b 0510 	ands.w	r5, fp, #16
 8004400:	920b      	str	r2, [sp, #44]	; 0x2c
 8004402:	d001      	beq.n	8004408 <_vfprintf_r+0xad8>
 8004404:	461d      	mov	r5, r3
 8004406:	e7de      	b.n	80043c6 <_vfprintf_r+0xa96>
 8004408:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800440c:	d001      	beq.n	8004412 <_vfprintf_r+0xae2>
 800440e:	b2b6      	uxth	r6, r6
 8004410:	e7d9      	b.n	80043c6 <_vfprintf_r+0xa96>
 8004412:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8004416:	d0d6      	beq.n	80043c6 <_vfprintf_r+0xa96>
 8004418:	b2f6      	uxtb	r6, r6
 800441a:	e7f3      	b.n	8004404 <_vfprintf_r+0xad4>
 800441c:	4633      	mov	r3, r6
 800441e:	f853 6b04 	ldr.w	r6, [r3], #4
 8004422:	2278      	movs	r2, #120	; 0x78
 8004424:	930b      	str	r3, [sp, #44]	; 0x2c
 8004426:	2330      	movs	r3, #48	; 0x30
 8004428:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800442c:	4ba3      	ldr	r3, [pc, #652]	; (80046bc <_vfprintf_r+0xd8c>)
 800442e:	2500      	movs	r5, #0
 8004430:	931a      	str	r3, [sp, #104]	; 0x68
 8004432:	f04b 0b02 	orr.w	fp, fp, #2
 8004436:	2302      	movs	r3, #2
 8004438:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 800443c:	920a      	str	r2, [sp, #40]	; 0x28
 800443e:	e7c5      	b.n	80043cc <_vfprintf_r+0xa9c>
 8004440:	4633      	mov	r3, r6
 8004442:	2500      	movs	r5, #0
 8004444:	f853 9b04 	ldr.w	r9, [r3], #4
 8004448:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 800444c:	930b      	str	r3, [sp, #44]	; 0x2c
 800444e:	9b07      	ldr	r3, [sp, #28]
 8004450:	1c5e      	adds	r6, r3, #1
 8004452:	d010      	beq.n	8004476 <_vfprintf_r+0xb46>
 8004454:	461a      	mov	r2, r3
 8004456:	4629      	mov	r1, r5
 8004458:	4648      	mov	r0, r9
 800445a:	f002 f887 	bl	800656c <memchr>
 800445e:	9008      	str	r0, [sp, #32]
 8004460:	2800      	cmp	r0, #0
 8004462:	f000 80d5 	beq.w	8004610 <_vfprintf_r+0xce0>
 8004466:	eba0 0309 	sub.w	r3, r0, r9
 800446a:	462e      	mov	r6, r5
 800446c:	e9cd 3507 	strd	r3, r5, [sp, #28]
 8004470:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8004474:	e5bf      	b.n	8003ff6 <_vfprintf_r+0x6c6>
 8004476:	4648      	mov	r0, r9
 8004478:	f7fc fb96 	bl	8000ba8 <strlen>
 800447c:	e9cd 0507 	strd	r0, r5, [sp, #28]
 8004480:	e461      	b.n	8003d46 <_vfprintf_r+0x416>
 8004482:	f04b 0b10 	orr.w	fp, fp, #16
 8004486:	f01b 0320 	ands.w	r3, fp, #32
 800448a:	d009      	beq.n	80044a0 <_vfprintf_r+0xb70>
 800448c:	3607      	adds	r6, #7
 800448e:	f026 0307 	bic.w	r3, r6, #7
 8004492:	461a      	mov	r2, r3
 8004494:	f852 6b08 	ldr.w	r6, [r2], #8
 8004498:	685d      	ldr	r5, [r3, #4]
 800449a:	920b      	str	r2, [sp, #44]	; 0x2c
 800449c:	2301      	movs	r3, #1
 800449e:	e795      	b.n	80043cc <_vfprintf_r+0xa9c>
 80044a0:	4632      	mov	r2, r6
 80044a2:	f852 6b04 	ldr.w	r6, [r2], #4
 80044a6:	f01b 0510 	ands.w	r5, fp, #16
 80044aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80044ac:	d001      	beq.n	80044b2 <_vfprintf_r+0xb82>
 80044ae:	461d      	mov	r5, r3
 80044b0:	e7f4      	b.n	800449c <_vfprintf_r+0xb6c>
 80044b2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80044b6:	d001      	beq.n	80044bc <_vfprintf_r+0xb8c>
 80044b8:	b2b6      	uxth	r6, r6
 80044ba:	e7ef      	b.n	800449c <_vfprintf_r+0xb6c>
 80044bc:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 80044c0:	d0ec      	beq.n	800449c <_vfprintf_r+0xb6c>
 80044c2:	b2f6      	uxtb	r6, r6
 80044c4:	e7f3      	b.n	80044ae <_vfprintf_r+0xb7e>
 80044c6:	4b7e      	ldr	r3, [pc, #504]	; (80046c0 <_vfprintf_r+0xd90>)
 80044c8:	931a      	str	r3, [sp, #104]	; 0x68
 80044ca:	f01b 0320 	ands.w	r3, fp, #32
 80044ce:	d01b      	beq.n	8004508 <_vfprintf_r+0xbd8>
 80044d0:	3607      	adds	r6, #7
 80044d2:	f026 0307 	bic.w	r3, r6, #7
 80044d6:	461a      	mov	r2, r3
 80044d8:	f852 6b08 	ldr.w	r6, [r2], #8
 80044dc:	685d      	ldr	r5, [r3, #4]
 80044de:	920b      	str	r2, [sp, #44]	; 0x2c
 80044e0:	f01b 0f01 	tst.w	fp, #1
 80044e4:	d00a      	beq.n	80044fc <_vfprintf_r+0xbcc>
 80044e6:	ea56 0305 	orrs.w	r3, r6, r5
 80044ea:	d007      	beq.n	80044fc <_vfprintf_r+0xbcc>
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80044f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f4:	f04b 0b02 	orr.w	fp, fp, #2
 80044f8:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80044fc:	2302      	movs	r3, #2
 80044fe:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8004502:	e763      	b.n	80043cc <_vfprintf_r+0xa9c>
 8004504:	4b6d      	ldr	r3, [pc, #436]	; (80046bc <_vfprintf_r+0xd8c>)
 8004506:	e7df      	b.n	80044c8 <_vfprintf_r+0xb98>
 8004508:	4632      	mov	r2, r6
 800450a:	f852 6b04 	ldr.w	r6, [r2], #4
 800450e:	f01b 0510 	ands.w	r5, fp, #16
 8004512:	920b      	str	r2, [sp, #44]	; 0x2c
 8004514:	d001      	beq.n	800451a <_vfprintf_r+0xbea>
 8004516:	461d      	mov	r5, r3
 8004518:	e7e2      	b.n	80044e0 <_vfprintf_r+0xbb0>
 800451a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800451e:	d001      	beq.n	8004524 <_vfprintf_r+0xbf4>
 8004520:	b2b6      	uxth	r6, r6
 8004522:	e7dd      	b.n	80044e0 <_vfprintf_r+0xbb0>
 8004524:	f41b 7500 	ands.w	r5, fp, #512	; 0x200
 8004528:	d0da      	beq.n	80044e0 <_vfprintf_r+0xbb0>
 800452a:	b2f6      	uxtb	r6, r6
 800452c:	e7f3      	b.n	8004516 <_vfprintf_r+0xbe6>
 800452e:	2e0a      	cmp	r6, #10
 8004530:	f175 0300 	sbcs.w	r3, r5, #0
 8004534:	d206      	bcs.n	8004544 <_vfprintf_r+0xc14>
 8004536:	3630      	adds	r6, #48	; 0x30
 8004538:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 800453c:	f20d 1947 	addw	r9, sp, #327	; 0x147
 8004540:	f000 bc02 	b.w	8004d48 <_vfprintf_r+0x1418>
 8004544:	2300      	movs	r3, #0
 8004546:	9309      	str	r3, [sp, #36]	; 0x24
 8004548:	f407 6380 	and.w	r3, r7, #1024	; 0x400
 800454c:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8004550:	9308      	str	r3, [sp, #32]
 8004552:	220a      	movs	r2, #10
 8004554:	2300      	movs	r3, #0
 8004556:	4630      	mov	r0, r6
 8004558:	4629      	mov	r1, r5
 800455a:	f7fc fbf3 	bl	8000d44 <__aeabi_uldivmod>
 800455e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004560:	3230      	adds	r2, #48	; 0x30
 8004562:	3301      	adds	r3, #1
 8004564:	9309      	str	r3, [sp, #36]	; 0x24
 8004566:	9b08      	ldr	r3, [sp, #32]
 8004568:	f10b 39ff 	add.w	r9, fp, #4294967295
 800456c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8004570:	b1d3      	cbz	r3, 80045a8 <_vfprintf_r+0xc78>
 8004572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d115      	bne.n	80045a8 <_vfprintf_r+0xc78>
 800457c:	2aff      	cmp	r2, #255	; 0xff
 800457e:	d013      	beq.n	80045a8 <_vfprintf_r+0xc78>
 8004580:	2e0a      	cmp	r6, #10
 8004582:	f175 0300 	sbcs.w	r3, r5, #0
 8004586:	d30f      	bcc.n	80045a8 <_vfprintf_r+0xc78>
 8004588:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800458a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800458c:	eba9 0903 	sub.w	r9, r9, r3
 8004590:	461a      	mov	r2, r3
 8004592:	4648      	mov	r0, r9
 8004594:	f002 fbcd 	bl	8006d32 <strncpy>
 8004598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	b11b      	cbz	r3, 80045a6 <_vfprintf_r+0xc76>
 800459e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045a0:	3301      	adds	r3, #1
 80045a2:	930e      	str	r3, [sp, #56]	; 0x38
 80045a4:	2300      	movs	r3, #0
 80045a6:	9309      	str	r3, [sp, #36]	; 0x24
 80045a8:	2300      	movs	r3, #0
 80045aa:	220a      	movs	r2, #10
 80045ac:	4630      	mov	r0, r6
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fc fbc8 	bl	8000d44 <__aeabi_uldivmod>
 80045b4:	2e0a      	cmp	r6, #10
 80045b6:	f175 0300 	sbcs.w	r3, r5, #0
 80045ba:	f0c0 83c5 	bcc.w	8004d48 <_vfprintf_r+0x1418>
 80045be:	4606      	mov	r6, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	46cb      	mov	fp, r9
 80045c4:	e7c5      	b.n	8004552 <_vfprintf_r+0xc22>
 80045c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80045c8:	f006 030f 	and.w	r3, r6, #15
 80045cc:	5cd3      	ldrb	r3, [r2, r3]
 80045ce:	0936      	lsrs	r6, r6, #4
 80045d0:	ea46 7605 	orr.w	r6, r6, r5, lsl #28
 80045d4:	092d      	lsrs	r5, r5, #4
 80045d6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80045da:	ea56 0305 	orrs.w	r3, r6, r5
 80045de:	d1f2      	bne.n	80045c6 <_vfprintf_r+0xc96>
 80045e0:	e3b2      	b.n	8004d48 <_vfprintf_r+0x1418>
 80045e2:	b933      	cbnz	r3, 80045f2 <_vfprintf_r+0xcc2>
 80045e4:	f01b 0f01 	tst.w	fp, #1
 80045e8:	d003      	beq.n	80045f2 <_vfprintf_r+0xcc2>
 80045ea:	2330      	movs	r3, #48	; 0x30
 80045ec:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 80045f0:	e7a4      	b.n	800453c <_vfprintf_r+0xc0c>
 80045f2:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 80045f6:	e3a7      	b.n	8004d48 <_vfprintf_r+0x1418>
 80045f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8372 	beq.w	8004ce4 <_vfprintf_r+0x13b4>
 8004600:	2000      	movs	r0, #0
 8004602:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8004606:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 800460a:	960b      	str	r6, [sp, #44]	; 0x2c
 800460c:	f7ff bb2e 	b.w	8003c6c <_vfprintf_r+0x33c>
 8004610:	9e08      	ldr	r6, [sp, #32]
 8004612:	f7ff bb99 	b.w	8003d48 <_vfprintf_r+0x418>
 8004616:	2010      	movs	r0, #16
 8004618:	2b07      	cmp	r3, #7
 800461a:	4402      	add	r2, r0
 800461c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004620:	6060      	str	r0, [r4, #4]
 8004622:	dd08      	ble.n	8004636 <_vfprintf_r+0xd06>
 8004624:	4651      	mov	r1, sl
 8004626:	4640      	mov	r0, r8
 8004628:	aa26      	add	r2, sp, #152	; 0x98
 800462a:	f002 fba2 	bl	8006d72 <__sprint_r>
 800462e:	2800      	cmp	r0, #0
 8004630:	f040 8336 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004634:	a929      	add	r1, sp, #164	; 0xa4
 8004636:	460c      	mov	r4, r1
 8004638:	3f10      	subs	r7, #16
 800463a:	e4f7      	b.n	800402c <_vfprintf_r+0x6fc>
 800463c:	460c      	mov	r4, r1
 800463e:	e510      	b.n	8004062 <_vfprintf_r+0x732>
 8004640:	4651      	mov	r1, sl
 8004642:	4640      	mov	r0, r8
 8004644:	aa26      	add	r2, sp, #152	; 0x98
 8004646:	f002 fb94 	bl	8006d72 <__sprint_r>
 800464a:	2800      	cmp	r0, #0
 800464c:	f040 8328 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004650:	ac29      	add	r4, sp, #164	; 0xa4
 8004652:	e518      	b.n	8004086 <_vfprintf_r+0x756>
 8004654:	4651      	mov	r1, sl
 8004656:	4640      	mov	r0, r8
 8004658:	aa26      	add	r2, sp, #152	; 0x98
 800465a:	f002 fb8a 	bl	8006d72 <__sprint_r>
 800465e:	2800      	cmp	r0, #0
 8004660:	f040 831e 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004664:	ac29      	add	r4, sp, #164	; 0xa4
 8004666:	e51e      	b.n	80040a6 <_vfprintf_r+0x776>
 8004668:	2010      	movs	r0, #16
 800466a:	2b07      	cmp	r3, #7
 800466c:	4402      	add	r2, r0
 800466e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004672:	6060      	str	r0, [r4, #4]
 8004674:	dd08      	ble.n	8004688 <_vfprintf_r+0xd58>
 8004676:	4651      	mov	r1, sl
 8004678:	4640      	mov	r0, r8
 800467a:	aa26      	add	r2, sp, #152	; 0x98
 800467c:	f002 fb79 	bl	8006d72 <__sprint_r>
 8004680:	2800      	cmp	r0, #0
 8004682:	f040 830d 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004686:	a929      	add	r1, sp, #164	; 0xa4
 8004688:	460c      	mov	r4, r1
 800468a:	3f10      	subs	r7, #16
 800468c:	e513      	b.n	80040b6 <_vfprintf_r+0x786>
 800468e:	460c      	mov	r4, r1
 8004690:	e52c      	b.n	80040ec <_vfprintf_r+0x7bc>
 8004692:	2010      	movs	r0, #16
 8004694:	2b07      	cmp	r3, #7
 8004696:	4402      	add	r2, r0
 8004698:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800469c:	6060      	str	r0, [r4, #4]
 800469e:	dd08      	ble.n	80046b2 <_vfprintf_r+0xd82>
 80046a0:	4651      	mov	r1, sl
 80046a2:	4640      	mov	r0, r8
 80046a4:	aa26      	add	r2, sp, #152	; 0x98
 80046a6:	f002 fb64 	bl	8006d72 <__sprint_r>
 80046aa:	2800      	cmp	r0, #0
 80046ac:	f040 82f8 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80046b0:	a929      	add	r1, sp, #164	; 0xa4
 80046b2:	460c      	mov	r4, r1
 80046b4:	3e10      	subs	r6, #16
 80046b6:	e52b      	b.n	8004110 <_vfprintf_r+0x7e0>
 80046b8:	460c      	mov	r4, r1
 80046ba:	e543      	b.n	8004144 <_vfprintf_r+0x814>
 80046bc:	08008388 	.word	0x08008388
 80046c0:	08008399 	.word	0x08008399
 80046c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046c6:	2b65      	cmp	r3, #101	; 0x65
 80046c8:	f340 8232 	ble.w	8004b30 <_vfprintf_r+0x1200>
 80046cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046d0:	2200      	movs	r2, #0
 80046d2:	2300      	movs	r3, #0
 80046d4:	f7fc fac6 	bl	8000c64 <__aeabi_dcmpeq>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d068      	beq.n	80047ae <_vfprintf_r+0xe7e>
 80046dc:	4b6d      	ldr	r3, [pc, #436]	; (8004894 <_vfprintf_r+0xf64>)
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	2301      	movs	r3, #1
 80046e2:	441e      	add	r6, r3
 80046e4:	6063      	str	r3, [r4, #4]
 80046e6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80046e8:	9628      	str	r6, [sp, #160]	; 0xa0
 80046ea:	3301      	adds	r3, #1
 80046ec:	2b07      	cmp	r3, #7
 80046ee:	9327      	str	r3, [sp, #156]	; 0x9c
 80046f0:	dc37      	bgt.n	8004762 <_vfprintf_r+0xe32>
 80046f2:	3408      	adds	r4, #8
 80046f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046f8:	4293      	cmp	r3, r2
 80046fa:	db03      	blt.n	8004704 <_vfprintf_r+0xdd4>
 80046fc:	f01b 0f01 	tst.w	fp, #1
 8004700:	f43f ad32 	beq.w	8004168 <_vfprintf_r+0x838>
 8004704:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800470c:	6063      	str	r3, [r4, #4]
 800470e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004710:	4413      	add	r3, r2
 8004712:	9328      	str	r3, [sp, #160]	; 0xa0
 8004714:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004716:	3301      	adds	r3, #1
 8004718:	2b07      	cmp	r3, #7
 800471a:	9327      	str	r3, [sp, #156]	; 0x9c
 800471c:	dc2b      	bgt.n	8004776 <_vfprintf_r+0xe46>
 800471e:	3408      	adds	r4, #8
 8004720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004722:	1e5d      	subs	r5, r3, #1
 8004724:	2d00      	cmp	r5, #0
 8004726:	f77f ad1f 	ble.w	8004168 <_vfprintf_r+0x838>
 800472a:	2710      	movs	r7, #16
 800472c:	4e5a      	ldr	r6, [pc, #360]	; (8004898 <_vfprintf_r+0xf68>)
 800472e:	2d10      	cmp	r5, #16
 8004730:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004734:	f104 0108 	add.w	r1, r4, #8
 8004738:	f103 0301 	add.w	r3, r3, #1
 800473c:	6026      	str	r6, [r4, #0]
 800473e:	dc24      	bgt.n	800478a <_vfprintf_r+0xe5a>
 8004740:	442a      	add	r2, r5
 8004742:	6065      	str	r5, [r4, #4]
 8004744:	9228      	str	r2, [sp, #160]	; 0xa0
 8004746:	2b07      	cmp	r3, #7
 8004748:	9327      	str	r3, [sp, #156]	; 0x9c
 800474a:	f340 8288 	ble.w	8004c5e <_vfprintf_r+0x132e>
 800474e:	4651      	mov	r1, sl
 8004750:	4640      	mov	r0, r8
 8004752:	aa26      	add	r2, sp, #152	; 0x98
 8004754:	f002 fb0d 	bl	8006d72 <__sprint_r>
 8004758:	2800      	cmp	r0, #0
 800475a:	f040 82a1 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 800475e:	ac29      	add	r4, sp, #164	; 0xa4
 8004760:	e502      	b.n	8004168 <_vfprintf_r+0x838>
 8004762:	4651      	mov	r1, sl
 8004764:	4640      	mov	r0, r8
 8004766:	aa26      	add	r2, sp, #152	; 0x98
 8004768:	f002 fb03 	bl	8006d72 <__sprint_r>
 800476c:	2800      	cmp	r0, #0
 800476e:	f040 8297 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004772:	ac29      	add	r4, sp, #164	; 0xa4
 8004774:	e7be      	b.n	80046f4 <_vfprintf_r+0xdc4>
 8004776:	4651      	mov	r1, sl
 8004778:	4640      	mov	r0, r8
 800477a:	aa26      	add	r2, sp, #152	; 0x98
 800477c:	f002 faf9 	bl	8006d72 <__sprint_r>
 8004780:	2800      	cmp	r0, #0
 8004782:	f040 828d 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004786:	ac29      	add	r4, sp, #164	; 0xa4
 8004788:	e7ca      	b.n	8004720 <_vfprintf_r+0xdf0>
 800478a:	3210      	adds	r2, #16
 800478c:	2b07      	cmp	r3, #7
 800478e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004792:	6067      	str	r7, [r4, #4]
 8004794:	dd08      	ble.n	80047a8 <_vfprintf_r+0xe78>
 8004796:	4651      	mov	r1, sl
 8004798:	4640      	mov	r0, r8
 800479a:	aa26      	add	r2, sp, #152	; 0x98
 800479c:	f002 fae9 	bl	8006d72 <__sprint_r>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	f040 827d 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80047a6:	a929      	add	r1, sp, #164	; 0xa4
 80047a8:	460c      	mov	r4, r1
 80047aa:	3d10      	subs	r5, #16
 80047ac:	e7bf      	b.n	800472e <_vfprintf_r+0xdfe>
 80047ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	dc73      	bgt.n	800489c <_vfprintf_r+0xf6c>
 80047b4:	4b37      	ldr	r3, [pc, #220]	; (8004894 <_vfprintf_r+0xf64>)
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	2301      	movs	r3, #1
 80047ba:	441e      	add	r6, r3
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80047c0:	9628      	str	r6, [sp, #160]	; 0xa0
 80047c2:	3301      	adds	r3, #1
 80047c4:	2b07      	cmp	r3, #7
 80047c6:	9327      	str	r3, [sp, #156]	; 0x9c
 80047c8:	dc3d      	bgt.n	8004846 <_vfprintf_r+0xf16>
 80047ca:	3408      	adds	r4, #8
 80047cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80047d2:	430a      	orrs	r2, r1
 80047d4:	f00b 0101 	and.w	r1, fp, #1
 80047d8:	430a      	orrs	r2, r1
 80047da:	f43f acc5 	beq.w	8004168 <_vfprintf_r+0x838>
 80047de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047e0:	6022      	str	r2, [r4, #0]
 80047e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047e4:	4413      	add	r3, r2
 80047e6:	9328      	str	r3, [sp, #160]	; 0xa0
 80047e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80047ea:	6062      	str	r2, [r4, #4]
 80047ec:	3301      	adds	r3, #1
 80047ee:	2b07      	cmp	r3, #7
 80047f0:	9327      	str	r3, [sp, #156]	; 0x9c
 80047f2:	dc32      	bgt.n	800485a <_vfprintf_r+0xf2a>
 80047f4:	3408      	adds	r4, #8
 80047f6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	da1b      	bge.n	8004834 <_vfprintf_r+0xf04>
 80047fc:	4623      	mov	r3, r4
 80047fe:	2710      	movs	r7, #16
 8004800:	4e25      	ldr	r6, [pc, #148]	; (8004898 <_vfprintf_r+0xf68>)
 8004802:	426d      	negs	r5, r5
 8004804:	2d10      	cmp	r5, #16
 8004806:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 800480a:	f104 0408 	add.w	r4, r4, #8
 800480e:	f102 0201 	add.w	r2, r2, #1
 8004812:	601e      	str	r6, [r3, #0]
 8004814:	dc2b      	bgt.n	800486e <_vfprintf_r+0xf3e>
 8004816:	605d      	str	r5, [r3, #4]
 8004818:	2a07      	cmp	r2, #7
 800481a:	440d      	add	r5, r1
 800481c:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8004820:	dd08      	ble.n	8004834 <_vfprintf_r+0xf04>
 8004822:	4651      	mov	r1, sl
 8004824:	4640      	mov	r0, r8
 8004826:	aa26      	add	r2, sp, #152	; 0x98
 8004828:	f002 faa3 	bl	8006d72 <__sprint_r>
 800482c:	2800      	cmp	r0, #0
 800482e:	f040 8237 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004832:	ac29      	add	r4, sp, #164	; 0xa4
 8004834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004838:	6063      	str	r3, [r4, #4]
 800483a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800483c:	f8c4 9000 	str.w	r9, [r4]
 8004840:	4413      	add	r3, r2
 8004842:	9328      	str	r3, [sp, #160]	; 0xa0
 8004844:	e489      	b.n	800415a <_vfprintf_r+0x82a>
 8004846:	4651      	mov	r1, sl
 8004848:	4640      	mov	r0, r8
 800484a:	aa26      	add	r2, sp, #152	; 0x98
 800484c:	f002 fa91 	bl	8006d72 <__sprint_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	f040 8225 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004856:	ac29      	add	r4, sp, #164	; 0xa4
 8004858:	e7b8      	b.n	80047cc <_vfprintf_r+0xe9c>
 800485a:	4651      	mov	r1, sl
 800485c:	4640      	mov	r0, r8
 800485e:	aa26      	add	r2, sp, #152	; 0x98
 8004860:	f002 fa87 	bl	8006d72 <__sprint_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	f040 821b 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 800486a:	ac29      	add	r4, sp, #164	; 0xa4
 800486c:	e7c3      	b.n	80047f6 <_vfprintf_r+0xec6>
 800486e:	3110      	adds	r1, #16
 8004870:	2a07      	cmp	r2, #7
 8004872:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8004876:	605f      	str	r7, [r3, #4]
 8004878:	dd08      	ble.n	800488c <_vfprintf_r+0xf5c>
 800487a:	4651      	mov	r1, sl
 800487c:	4640      	mov	r0, r8
 800487e:	aa26      	add	r2, sp, #152	; 0x98
 8004880:	f002 fa77 	bl	8006d72 <__sprint_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	f040 820b 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 800488a:	ac29      	add	r4, sp, #164	; 0xa4
 800488c:	4623      	mov	r3, r4
 800488e:	3d10      	subs	r5, #16
 8004890:	e7b8      	b.n	8004804 <_vfprintf_r+0xed4>
 8004892:	bf00      	nop
 8004894:	080083aa 	.word	0x080083aa
 8004898:	080083bc 	.word	0x080083bc
 800489c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800489e:	42af      	cmp	r7, r5
 80048a0:	bfa8      	it	ge
 80048a2:	462f      	movge	r7, r5
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	dd09      	ble.n	80048bc <_vfprintf_r+0xf8c>
 80048a8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80048aa:	443e      	add	r6, r7
 80048ac:	3301      	adds	r3, #1
 80048ae:	2b07      	cmp	r3, #7
 80048b0:	e9c4 9700 	strd	r9, r7, [r4]
 80048b4:	9628      	str	r6, [sp, #160]	; 0xa0
 80048b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80048b8:	dc75      	bgt.n	80049a6 <_vfprintf_r+0x1076>
 80048ba:	3408      	adds	r4, #8
 80048bc:	2f00      	cmp	r7, #0
 80048be:	bfb4      	ite	lt
 80048c0:	462e      	movlt	r6, r5
 80048c2:	1bee      	subge	r6, r5, r7
 80048c4:	2e00      	cmp	r6, #0
 80048c6:	dd18      	ble.n	80048fa <_vfprintf_r+0xfca>
 80048c8:	4f98      	ldr	r7, [pc, #608]	; (8004b2c <_vfprintf_r+0x11fc>)
 80048ca:	2e10      	cmp	r6, #16
 80048cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80048d0:	f104 0108 	add.w	r1, r4, #8
 80048d4:	f103 0301 	add.w	r3, r3, #1
 80048d8:	6027      	str	r7, [r4, #0]
 80048da:	dc6e      	bgt.n	80049ba <_vfprintf_r+0x108a>
 80048dc:	6066      	str	r6, [r4, #4]
 80048de:	2b07      	cmp	r3, #7
 80048e0:	4416      	add	r6, r2
 80048e2:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 80048e6:	dd7b      	ble.n	80049e0 <_vfprintf_r+0x10b0>
 80048e8:	4651      	mov	r1, sl
 80048ea:	4640      	mov	r0, r8
 80048ec:	aa26      	add	r2, sp, #152	; 0x98
 80048ee:	f002 fa40 	bl	8006d72 <__sprint_r>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f040 81d4 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80048f8:	ac29      	add	r4, sp, #164	; 0xa4
 80048fa:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80048fe:	444d      	add	r5, r9
 8004900:	d00a      	beq.n	8004918 <_vfprintf_r+0xfe8>
 8004902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d16d      	bne.n	80049e4 <_vfprintf_r+0x10b4>
 8004908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800490a:	2b00      	cmp	r3, #0
 800490c:	d16d      	bne.n	80049ea <_vfprintf_r+0x10ba>
 800490e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004910:	444b      	add	r3, r9
 8004912:	429d      	cmp	r5, r3
 8004914:	bf28      	it	cs
 8004916:	461d      	movcs	r5, r3
 8004918:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800491a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800491c:	4293      	cmp	r3, r2
 800491e:	db02      	blt.n	8004926 <_vfprintf_r+0xff6>
 8004920:	f01b 0f01 	tst.w	fp, #1
 8004924:	d00e      	beq.n	8004944 <_vfprintf_r+0x1014>
 8004926:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004928:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004932:	4413      	add	r3, r2
 8004934:	9328      	str	r3, [sp, #160]	; 0xa0
 8004936:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004938:	3301      	adds	r3, #1
 800493a:	2b07      	cmp	r3, #7
 800493c:	9327      	str	r3, [sp, #156]	; 0x9c
 800493e:	f300 80cf 	bgt.w	8004ae0 <_vfprintf_r+0x11b0>
 8004942:	3408      	adds	r4, #8
 8004944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004946:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8004948:	eb09 0203 	add.w	r2, r9, r3
 800494c:	1b9e      	subs	r6, r3, r6
 800494e:	1b52      	subs	r2, r2, r5
 8004950:	4296      	cmp	r6, r2
 8004952:	bfa8      	it	ge
 8004954:	4616      	movge	r6, r2
 8004956:	2e00      	cmp	r6, #0
 8004958:	dd0b      	ble.n	8004972 <_vfprintf_r+0x1042>
 800495a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800495c:	e9c4 5600 	strd	r5, r6, [r4]
 8004960:	4433      	add	r3, r6
 8004962:	9328      	str	r3, [sp, #160]	; 0xa0
 8004964:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004966:	3301      	adds	r3, #1
 8004968:	2b07      	cmp	r3, #7
 800496a:	9327      	str	r3, [sp, #156]	; 0x9c
 800496c:	f300 80c2 	bgt.w	8004af4 <_vfprintf_r+0x11c4>
 8004970:	3408      	adds	r4, #8
 8004972:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004976:	2e00      	cmp	r6, #0
 8004978:	eba3 0505 	sub.w	r5, r3, r5
 800497c:	bfa8      	it	ge
 800497e:	1bad      	subge	r5, r5, r6
 8004980:	2d00      	cmp	r5, #0
 8004982:	f77f abf1 	ble.w	8004168 <_vfprintf_r+0x838>
 8004986:	2710      	movs	r7, #16
 8004988:	4e68      	ldr	r6, [pc, #416]	; (8004b2c <_vfprintf_r+0x11fc>)
 800498a:	2d10      	cmp	r5, #16
 800498c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004990:	f104 0108 	add.w	r1, r4, #8
 8004994:	f103 0301 	add.w	r3, r3, #1
 8004998:	6026      	str	r6, [r4, #0]
 800499a:	f300 80b5 	bgt.w	8004b08 <_vfprintf_r+0x11d8>
 800499e:	6065      	str	r5, [r4, #4]
 80049a0:	4415      	add	r5, r2
 80049a2:	9528      	str	r5, [sp, #160]	; 0xa0
 80049a4:	e6cf      	b.n	8004746 <_vfprintf_r+0xe16>
 80049a6:	4651      	mov	r1, sl
 80049a8:	4640      	mov	r0, r8
 80049aa:	aa26      	add	r2, sp, #152	; 0x98
 80049ac:	f002 f9e1 	bl	8006d72 <__sprint_r>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	f040 8175 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80049b6:	ac29      	add	r4, sp, #164	; 0xa4
 80049b8:	e780      	b.n	80048bc <_vfprintf_r+0xf8c>
 80049ba:	2010      	movs	r0, #16
 80049bc:	2b07      	cmp	r3, #7
 80049be:	4402      	add	r2, r0
 80049c0:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80049c4:	6060      	str	r0, [r4, #4]
 80049c6:	dd08      	ble.n	80049da <_vfprintf_r+0x10aa>
 80049c8:	4651      	mov	r1, sl
 80049ca:	4640      	mov	r0, r8
 80049cc:	aa26      	add	r2, sp, #152	; 0x98
 80049ce:	f002 f9d0 	bl	8006d72 <__sprint_r>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	f040 8164 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 80049d8:	a929      	add	r1, sp, #164	; 0xa4
 80049da:	460c      	mov	r4, r1
 80049dc:	3e10      	subs	r6, #16
 80049de:	e774      	b.n	80048ca <_vfprintf_r+0xf9a>
 80049e0:	460c      	mov	r4, r1
 80049e2:	e78a      	b.n	80048fa <_vfprintf_r+0xfca>
 80049e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d04a      	beq.n	8004a80 <_vfprintf_r+0x1150>
 80049ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049ec:	3b01      	subs	r3, #1
 80049ee:	930c      	str	r3, [sp, #48]	; 0x30
 80049f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80049f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80049f4:	6023      	str	r3, [r4, #0]
 80049f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80049fc:	4413      	add	r3, r2
 80049fe:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004a02:	3301      	adds	r3, #1
 8004a04:	2b07      	cmp	r3, #7
 8004a06:	9327      	str	r3, [sp, #156]	; 0x9c
 8004a08:	dc41      	bgt.n	8004a8e <_vfprintf_r+0x115e>
 8004a0a:	3408      	adds	r4, #8
 8004a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a10:	eb09 0703 	add.w	r7, r9, r3
 8004a14:	1b7b      	subs	r3, r7, r5
 8004a16:	7817      	ldrb	r7, [r2, #0]
 8004a18:	429f      	cmp	r7, r3
 8004a1a:	bfa8      	it	ge
 8004a1c:	461f      	movge	r7, r3
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	dd0a      	ble.n	8004a38 <_vfprintf_r+0x1108>
 8004a22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004a24:	e9c4 5700 	strd	r5, r7, [r4]
 8004a28:	443b      	add	r3, r7
 8004a2a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004a2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004a2e:	3301      	adds	r3, #1
 8004a30:	2b07      	cmp	r3, #7
 8004a32:	9327      	str	r3, [sp, #156]	; 0x9c
 8004a34:	dc35      	bgt.n	8004aa2 <_vfprintf_r+0x1172>
 8004a36:	3408      	adds	r4, #8
 8004a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a3a:	2f00      	cmp	r7, #0
 8004a3c:	781e      	ldrb	r6, [r3, #0]
 8004a3e:	bfa8      	it	ge
 8004a40:	1bf6      	subge	r6, r6, r7
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	dd18      	ble.n	8004a78 <_vfprintf_r+0x1148>
 8004a46:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004a4a:	4838      	ldr	r0, [pc, #224]	; (8004b2c <_vfprintf_r+0x11fc>)
 8004a4c:	2e10      	cmp	r6, #16
 8004a4e:	f103 0301 	add.w	r3, r3, #1
 8004a52:	f104 0108 	add.w	r1, r4, #8
 8004a56:	6020      	str	r0, [r4, #0]
 8004a58:	dc2d      	bgt.n	8004ab6 <_vfprintf_r+0x1186>
 8004a5a:	6066      	str	r6, [r4, #4]
 8004a5c:	2b07      	cmp	r3, #7
 8004a5e:	4416      	add	r6, r2
 8004a60:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8004a64:	dd3a      	ble.n	8004adc <_vfprintf_r+0x11ac>
 8004a66:	4651      	mov	r1, sl
 8004a68:	4640      	mov	r0, r8
 8004a6a:	aa26      	add	r2, sp, #152	; 0x98
 8004a6c:	f002 f981 	bl	8006d72 <__sprint_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	f040 8115 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004a76:	ac29      	add	r4, sp, #164	; 0xa4
 8004a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	441d      	add	r5, r3
 8004a7e:	e740      	b.n	8004902 <_vfprintf_r+0xfd2>
 8004a80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a82:	3b01      	subs	r3, #1
 8004a84:	930e      	str	r3, [sp, #56]	; 0x38
 8004a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a8c:	e7b0      	b.n	80049f0 <_vfprintf_r+0x10c0>
 8004a8e:	4651      	mov	r1, sl
 8004a90:	4640      	mov	r0, r8
 8004a92:	aa26      	add	r2, sp, #152	; 0x98
 8004a94:	f002 f96d 	bl	8006d72 <__sprint_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	f040 8101 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004a9e:	ac29      	add	r4, sp, #164	; 0xa4
 8004aa0:	e7b4      	b.n	8004a0c <_vfprintf_r+0x10dc>
 8004aa2:	4651      	mov	r1, sl
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	aa26      	add	r2, sp, #152	; 0x98
 8004aa8:	f002 f963 	bl	8006d72 <__sprint_r>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	f040 80f7 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004ab2:	ac29      	add	r4, sp, #164	; 0xa4
 8004ab4:	e7c0      	b.n	8004a38 <_vfprintf_r+0x1108>
 8004ab6:	2010      	movs	r0, #16
 8004ab8:	2b07      	cmp	r3, #7
 8004aba:	4402      	add	r2, r0
 8004abc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004ac0:	6060      	str	r0, [r4, #4]
 8004ac2:	dd08      	ble.n	8004ad6 <_vfprintf_r+0x11a6>
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	4640      	mov	r0, r8
 8004ac8:	aa26      	add	r2, sp, #152	; 0x98
 8004aca:	f002 f952 	bl	8006d72 <__sprint_r>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f040 80e6 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004ad4:	a929      	add	r1, sp, #164	; 0xa4
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	3e10      	subs	r6, #16
 8004ada:	e7b4      	b.n	8004a46 <_vfprintf_r+0x1116>
 8004adc:	460c      	mov	r4, r1
 8004ade:	e7cb      	b.n	8004a78 <_vfprintf_r+0x1148>
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	aa26      	add	r2, sp, #152	; 0x98
 8004ae6:	f002 f944 	bl	8006d72 <__sprint_r>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f040 80d8 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004af0:	ac29      	add	r4, sp, #164	; 0xa4
 8004af2:	e727      	b.n	8004944 <_vfprintf_r+0x1014>
 8004af4:	4651      	mov	r1, sl
 8004af6:	4640      	mov	r0, r8
 8004af8:	aa26      	add	r2, sp, #152	; 0x98
 8004afa:	f002 f93a 	bl	8006d72 <__sprint_r>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f040 80ce 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004b04:	ac29      	add	r4, sp, #164	; 0xa4
 8004b06:	e734      	b.n	8004972 <_vfprintf_r+0x1042>
 8004b08:	3210      	adds	r2, #16
 8004b0a:	2b07      	cmp	r3, #7
 8004b0c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004b10:	6067      	str	r7, [r4, #4]
 8004b12:	dd08      	ble.n	8004b26 <_vfprintf_r+0x11f6>
 8004b14:	4651      	mov	r1, sl
 8004b16:	4640      	mov	r0, r8
 8004b18:	aa26      	add	r2, sp, #152	; 0x98
 8004b1a:	f002 f92a 	bl	8006d72 <__sprint_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f040 80be 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004b24:	a929      	add	r1, sp, #164	; 0xa4
 8004b26:	460c      	mov	r4, r1
 8004b28:	3d10      	subs	r5, #16
 8004b2a:	e72e      	b.n	800498a <_vfprintf_r+0x105a>
 8004b2c:	080083bc 	.word	0x080083bc
 8004b30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004b34:	2a01      	cmp	r2, #1
 8004b36:	f106 0601 	add.w	r6, r6, #1
 8004b3a:	f103 0301 	add.w	r3, r3, #1
 8004b3e:	f104 0508 	add.w	r5, r4, #8
 8004b42:	dc02      	bgt.n	8004b4a <_vfprintf_r+0x121a>
 8004b44:	f01b 0f01 	tst.w	fp, #1
 8004b48:	d07e      	beq.n	8004c48 <_vfprintf_r+0x1318>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2b07      	cmp	r3, #7
 8004b4e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8004b52:	f8c4 9000 	str.w	r9, [r4]
 8004b56:	6062      	str	r2, [r4, #4]
 8004b58:	dd08      	ble.n	8004b6c <_vfprintf_r+0x123c>
 8004b5a:	4651      	mov	r1, sl
 8004b5c:	4640      	mov	r0, r8
 8004b5e:	aa26      	add	r2, sp, #152	; 0x98
 8004b60:	f002 f907 	bl	8006d72 <__sprint_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f040 809b 	bne.w	8004ca0 <_vfprintf_r+0x1370>
 8004b6a:	ad29      	add	r5, sp, #164	; 0xa4
 8004b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004b6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004b74:	606b      	str	r3, [r5, #4]
 8004b76:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004b78:	4413      	add	r3, r2
 8004b7a:	9328      	str	r3, [sp, #160]	; 0xa0
 8004b7c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004b7e:	3301      	adds	r3, #1
 8004b80:	2b07      	cmp	r3, #7
 8004b82:	9327      	str	r3, [sp, #156]	; 0x9c
 8004b84:	dc32      	bgt.n	8004bec <_vfprintf_r+0x12bc>
 8004b86:	3508      	adds	r5, #8
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b90:	1e5c      	subs	r4, r3, #1
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7fc f866 	bl	8000c64 <__aeabi_dcmpeq>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d130      	bne.n	8004bfe <_vfprintf_r+0x12ce>
 8004b9c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8004b9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ba2:	3101      	adds	r1, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	f109 0001 	add.w	r0, r9, #1
 8004baa:	4413      	add	r3, r2
 8004bac:	2907      	cmp	r1, #7
 8004bae:	e9c5 0400 	strd	r0, r4, [r5]
 8004bb2:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 8004bb6:	dd50      	ble.n	8004c5a <_vfprintf_r+0x132a>
 8004bb8:	4651      	mov	r1, sl
 8004bba:	4640      	mov	r0, r8
 8004bbc:	aa26      	add	r2, sp, #152	; 0x98
 8004bbe:	f002 f8d8 	bl	8006d72 <__sprint_r>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d16c      	bne.n	8004ca0 <_vfprintf_r+0x1370>
 8004bc6:	ad29      	add	r5, sp, #164	; 0xa4
 8004bc8:	ab22      	add	r3, sp, #136	; 0x88
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004bd0:	606b      	str	r3, [r5, #4]
 8004bd2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004bd4:	4413      	add	r3, r2
 8004bd6:	9328      	str	r3, [sp, #160]	; 0xa0
 8004bd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004bda:	3301      	adds	r3, #1
 8004bdc:	2b07      	cmp	r3, #7
 8004bde:	9327      	str	r3, [sp, #156]	; 0x9c
 8004be0:	f73f adb5 	bgt.w	800474e <_vfprintf_r+0xe1e>
 8004be4:	f105 0408 	add.w	r4, r5, #8
 8004be8:	f7ff babe 	b.w	8004168 <_vfprintf_r+0x838>
 8004bec:	4651      	mov	r1, sl
 8004bee:	4640      	mov	r0, r8
 8004bf0:	aa26      	add	r2, sp, #152	; 0x98
 8004bf2:	f002 f8be 	bl	8006d72 <__sprint_r>
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d152      	bne.n	8004ca0 <_vfprintf_r+0x1370>
 8004bfa:	ad29      	add	r5, sp, #164	; 0xa4
 8004bfc:	e7c4      	b.n	8004b88 <_vfprintf_r+0x1258>
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	dde2      	ble.n	8004bc8 <_vfprintf_r+0x1298>
 8004c02:	2710      	movs	r7, #16
 8004c04:	4e57      	ldr	r6, [pc, #348]	; (8004d64 <_vfprintf_r+0x1434>)
 8004c06:	2c10      	cmp	r4, #16
 8004c08:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004c0c:	f105 0108 	add.w	r1, r5, #8
 8004c10:	f103 0301 	add.w	r3, r3, #1
 8004c14:	602e      	str	r6, [r5, #0]
 8004c16:	dc07      	bgt.n	8004c28 <_vfprintf_r+0x12f8>
 8004c18:	606c      	str	r4, [r5, #4]
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	4414      	add	r4, r2
 8004c1e:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 8004c22:	dcc9      	bgt.n	8004bb8 <_vfprintf_r+0x1288>
 8004c24:	460d      	mov	r5, r1
 8004c26:	e7cf      	b.n	8004bc8 <_vfprintf_r+0x1298>
 8004c28:	3210      	adds	r2, #16
 8004c2a:	2b07      	cmp	r3, #7
 8004c2c:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004c30:	606f      	str	r7, [r5, #4]
 8004c32:	dd06      	ble.n	8004c42 <_vfprintf_r+0x1312>
 8004c34:	4651      	mov	r1, sl
 8004c36:	4640      	mov	r0, r8
 8004c38:	aa26      	add	r2, sp, #152	; 0x98
 8004c3a:	f002 f89a 	bl	8006d72 <__sprint_r>
 8004c3e:	bb78      	cbnz	r0, 8004ca0 <_vfprintf_r+0x1370>
 8004c40:	a929      	add	r1, sp, #164	; 0xa4
 8004c42:	460d      	mov	r5, r1
 8004c44:	3c10      	subs	r4, #16
 8004c46:	e7de      	b.n	8004c06 <_vfprintf_r+0x12d6>
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2b07      	cmp	r3, #7
 8004c4c:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8004c50:	f8c4 9000 	str.w	r9, [r4]
 8004c54:	6062      	str	r2, [r4, #4]
 8004c56:	ddb7      	ble.n	8004bc8 <_vfprintf_r+0x1298>
 8004c58:	e7ae      	b.n	8004bb8 <_vfprintf_r+0x1288>
 8004c5a:	3508      	adds	r5, #8
 8004c5c:	e7b4      	b.n	8004bc8 <_vfprintf_r+0x1298>
 8004c5e:	460c      	mov	r4, r1
 8004c60:	f7ff ba82 	b.w	8004168 <_vfprintf_r+0x838>
 8004c64:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8004c68:	1a9d      	subs	r5, r3, r2
 8004c6a:	2d00      	cmp	r5, #0
 8004c6c:	f77f aa80 	ble.w	8004170 <_vfprintf_r+0x840>
 8004c70:	2710      	movs	r7, #16
 8004c72:	4e3d      	ldr	r6, [pc, #244]	; (8004d68 <_vfprintf_r+0x1438>)
 8004c74:	2d10      	cmp	r5, #16
 8004c76:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8004c7a:	6026      	str	r6, [r4, #0]
 8004c7c:	f103 0301 	add.w	r3, r3, #1
 8004c80:	dc18      	bgt.n	8004cb4 <_vfprintf_r+0x1384>
 8004c82:	6065      	str	r5, [r4, #4]
 8004c84:	2b07      	cmp	r3, #7
 8004c86:	4415      	add	r5, r2
 8004c88:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8004c8c:	f77f aa70 	ble.w	8004170 <_vfprintf_r+0x840>
 8004c90:	4651      	mov	r1, sl
 8004c92:	4640      	mov	r0, r8
 8004c94:	aa26      	add	r2, sp, #152	; 0x98
 8004c96:	f002 f86c 	bl	8006d72 <__sprint_r>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f43f aa68 	beq.w	8004170 <_vfprintf_r+0x840>
 8004ca0:	9b08      	ldr	r3, [sp, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f43f a887 	beq.w	8003db6 <_vfprintf_r+0x486>
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4640      	mov	r0, r8
 8004cac:	f001 f8ce 	bl	8005e4c <_free_r>
 8004cb0:	f7ff b881 	b.w	8003db6 <_vfprintf_r+0x486>
 8004cb4:	3210      	adds	r2, #16
 8004cb6:	2b07      	cmp	r3, #7
 8004cb8:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8004cbc:	6067      	str	r7, [r4, #4]
 8004cbe:	dc02      	bgt.n	8004cc6 <_vfprintf_r+0x1396>
 8004cc0:	3408      	adds	r4, #8
 8004cc2:	3d10      	subs	r5, #16
 8004cc4:	e7d6      	b.n	8004c74 <_vfprintf_r+0x1344>
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	4640      	mov	r0, r8
 8004cca:	aa26      	add	r2, sp, #152	; 0x98
 8004ccc:	f002 f851 	bl	8006d72 <__sprint_r>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <_vfprintf_r+0x1370>
 8004cd4:	ac29      	add	r4, sp, #164	; 0xa4
 8004cd6:	e7f4      	b.n	8004cc2 <_vfprintf_r+0x1392>
 8004cd8:	4640      	mov	r0, r8
 8004cda:	9908      	ldr	r1, [sp, #32]
 8004cdc:	f001 f8b6 	bl	8005e4c <_free_r>
 8004ce0:	f7ff ba5e 	b.w	80041a0 <_vfprintf_r+0x870>
 8004ce4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ce6:	b91b      	cbnz	r3, 8004cf0 <_vfprintf_r+0x13c0>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9327      	str	r3, [sp, #156]	; 0x9c
 8004cec:	f7ff b863 	b.w	8003db6 <_vfprintf_r+0x486>
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	4640      	mov	r0, r8
 8004cf4:	aa26      	add	r2, sp, #152	; 0x98
 8004cf6:	f002 f83c 	bl	8006d72 <__sprint_r>
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d0f4      	beq.n	8004ce8 <_vfprintf_r+0x13b8>
 8004cfe:	f7ff b85a 	b.w	8003db6 <_vfprintf_r+0x486>
 8004d02:	ea56 0205 	orrs.w	r2, r6, r5
 8004d06:	465f      	mov	r7, fp
 8004d08:	f43f ab71 	beq.w	80043ee <_vfprintf_r+0xabe>
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	f43f ac0e 	beq.w	800452e <_vfprintf_r+0xbfe>
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8004d18:	f43f ac55 	beq.w	80045c6 <_vfprintf_r+0xc96>
 8004d1c:	f006 0307 	and.w	r3, r6, #7
 8004d20:	08f6      	lsrs	r6, r6, #3
 8004d22:	ea46 7645 	orr.w	r6, r6, r5, lsl #29
 8004d26:	08ed      	lsrs	r5, r5, #3
 8004d28:	3330      	adds	r3, #48	; 0x30
 8004d2a:	ea56 0105 	orrs.w	r1, r6, r5
 8004d2e:	464a      	mov	r2, r9
 8004d30:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8004d34:	d1f2      	bne.n	8004d1c <_vfprintf_r+0x13ec>
 8004d36:	07f8      	lsls	r0, r7, #31
 8004d38:	d506      	bpl.n	8004d48 <_vfprintf_r+0x1418>
 8004d3a:	2b30      	cmp	r3, #48	; 0x30
 8004d3c:	d004      	beq.n	8004d48 <_vfprintf_r+0x1418>
 8004d3e:	2330      	movs	r3, #48	; 0x30
 8004d40:	f809 3c01 	strb.w	r3, [r9, #-1]
 8004d44:	f1a2 0902 	sub.w	r9, r2, #2
 8004d48:	ab52      	add	r3, sp, #328	; 0x148
 8004d4a:	eba3 0309 	sub.w	r3, r3, r9
 8004d4e:	9e07      	ldr	r6, [sp, #28]
 8004d50:	9307      	str	r3, [sp, #28]
 8004d52:	2300      	movs	r3, #0
 8004d54:	46bb      	mov	fp, r7
 8004d56:	9308      	str	r3, [sp, #32]
 8004d58:	461d      	mov	r5, r3
 8004d5a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8004d5e:	f7ff b94a 	b.w	8003ff6 <_vfprintf_r+0x6c6>
 8004d62:	bf00      	nop
 8004d64:	080083bc 	.word	0x080083bc
 8004d68:	080083ac 	.word	0x080083ac

08004d6c <__sbprintf>:
 8004d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6e:	461f      	mov	r7, r3
 8004d70:	898b      	ldrh	r3, [r1, #12]
 8004d72:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8004d76:	f023 0302 	bic.w	r3, r3, #2
 8004d7a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004d7e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8004d80:	4615      	mov	r5, r2
 8004d82:	9319      	str	r3, [sp, #100]	; 0x64
 8004d84:	89cb      	ldrh	r3, [r1, #14]
 8004d86:	4606      	mov	r6, r0
 8004d88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004d8c:	69cb      	ldr	r3, [r1, #28]
 8004d8e:	a816      	add	r0, sp, #88	; 0x58
 8004d90:	9307      	str	r3, [sp, #28]
 8004d92:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8004d94:	460c      	mov	r4, r1
 8004d96:	9309      	str	r3, [sp, #36]	; 0x24
 8004d98:	ab1a      	add	r3, sp, #104	; 0x68
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	9304      	str	r3, [sp, #16]
 8004d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004da2:	9302      	str	r3, [sp, #8]
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	2300      	movs	r3, #0
 8004da8:	9306      	str	r3, [sp, #24]
 8004daa:	f001 f933 	bl	8006014 <__retarget_lock_init_recursive>
 8004dae:	462a      	mov	r2, r5
 8004db0:	463b      	mov	r3, r7
 8004db2:	4669      	mov	r1, sp
 8004db4:	4630      	mov	r0, r6
 8004db6:	f7fe fdbb 	bl	8003930 <_vfprintf_r>
 8004dba:	1e05      	subs	r5, r0, #0
 8004dbc:	db07      	blt.n	8004dce <__sbprintf+0x62>
 8004dbe:	4669      	mov	r1, sp
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 ff47 	bl	8005c54 <_fflush_r>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	bf18      	it	ne
 8004dca:	f04f 35ff 	movne.w	r5, #4294967295
 8004dce:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004dd2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004dd4:	065b      	lsls	r3, r3, #25
 8004dd6:	bf42      	ittt	mi
 8004dd8:	89a3      	ldrhmi	r3, [r4, #12]
 8004dda:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004dde:	81a3      	strhmi	r3, [r4, #12]
 8004de0:	f001 f919 	bl	8006016 <__retarget_lock_close_recursive>
 8004de4:	4628      	mov	r0, r5
 8004de6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dec <__swsetup_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <__swsetup_r+0xac>)
 8004df0:	4605      	mov	r5, r0
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	460c      	mov	r4, r1
 8004df6:	b118      	cbz	r0, 8004e00 <__swsetup_r+0x14>
 8004df8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004dfa:	b90b      	cbnz	r3, 8004e00 <__swsetup_r+0x14>
 8004dfc:	f000 ff96 	bl	8005d2c <__sinit>
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e06:	0718      	lsls	r0, r3, #28
 8004e08:	d422      	bmi.n	8004e50 <__swsetup_r+0x64>
 8004e0a:	06d9      	lsls	r1, r3, #27
 8004e0c:	d407      	bmi.n	8004e1e <__swsetup_r+0x32>
 8004e0e:	2309      	movs	r3, #9
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e16:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	e034      	b.n	8004e88 <__swsetup_r+0x9c>
 8004e1e:	0758      	lsls	r0, r3, #29
 8004e20:	d512      	bpl.n	8004e48 <__swsetup_r+0x5c>
 8004e22:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004e24:	b141      	cbz	r1, 8004e38 <__swsetup_r+0x4c>
 8004e26:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8004e2a:	4299      	cmp	r1, r3
 8004e2c:	d002      	beq.n	8004e34 <__swsetup_r+0x48>
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f001 f80c 	bl	8005e4c <_free_r>
 8004e34:	2300      	movs	r3, #0
 8004e36:	6323      	str	r3, [r4, #48]	; 0x30
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	2300      	movs	r3, #0
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0308 	orr.w	r3, r3, #8
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	b94b      	cbnz	r3, 8004e68 <__swsetup_r+0x7c>
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e5e:	d003      	beq.n	8004e68 <__swsetup_r+0x7c>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f001 f906 	bl	8006074 <__smakebuf_r>
 8004e68:	89a0      	ldrh	r0, [r4, #12]
 8004e6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e6e:	f010 0301 	ands.w	r3, r0, #1
 8004e72:	d00a      	beq.n	8004e8a <__swsetup_r+0x9e>
 8004e74:	2300      	movs	r3, #0
 8004e76:	60a3      	str	r3, [r4, #8]
 8004e78:	6963      	ldr	r3, [r4, #20]
 8004e7a:	425b      	negs	r3, r3
 8004e7c:	61a3      	str	r3, [r4, #24]
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	b943      	cbnz	r3, 8004e94 <__swsetup_r+0xa8>
 8004e82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e86:	d1c4      	bne.n	8004e12 <__swsetup_r+0x26>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	0781      	lsls	r1, r0, #30
 8004e8c:	bf58      	it	pl
 8004e8e:	6963      	ldrpl	r3, [r4, #20]
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	e7f4      	b.n	8004e7e <__swsetup_r+0x92>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e7f7      	b.n	8004e88 <__swsetup_r+0x9c>
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <register_fini>:
 8004e9c:	4b02      	ldr	r3, [pc, #8]	; (8004ea8 <register_fini+0xc>)
 8004e9e:	b113      	cbz	r3, 8004ea6 <register_fini+0xa>
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <register_fini+0x10>)
 8004ea2:	f000 b805 	b.w	8004eb0 <atexit>
 8004ea6:	4770      	bx	lr
 8004ea8:	00000000 	.word	0x00000000
 8004eac:	08005d7d 	.word	0x08005d7d

08004eb0 <atexit>:
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f002 bc6e 	b.w	8007798 <__register_exitproc>

08004ebc <quorem>:
 8004ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec0:	6903      	ldr	r3, [r0, #16]
 8004ec2:	690c      	ldr	r4, [r1, #16]
 8004ec4:	4607      	mov	r7, r0
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	f2c0 8082 	blt.w	8004fd0 <quorem+0x114>
 8004ecc:	3c01      	subs	r4, #1
 8004ece:	f100 0514 	add.w	r5, r0, #20
 8004ed2:	f101 0814 	add.w	r8, r1, #20
 8004ed6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ef0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ef4:	d331      	bcc.n	8004f5a <quorem+0x9e>
 8004ef6:	f04f 0e00 	mov.w	lr, #0
 8004efa:	4640      	mov	r0, r8
 8004efc:	46ac      	mov	ip, r5
 8004efe:	46f2      	mov	sl, lr
 8004f00:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f04:	b293      	uxth	r3, r2
 8004f06:	fb06 e303 	mla	r3, r6, r3, lr
 8004f0a:	0c12      	lsrs	r2, r2, #16
 8004f0c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	fb06 e202 	mla	r2, r6, r2, lr
 8004f16:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1a:	f8dc a000 	ldr.w	sl, [ip]
 8004f1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f22:	fa1f fa8a 	uxth.w	sl, sl
 8004f26:	4453      	add	r3, sl
 8004f28:	f8dc a000 	ldr.w	sl, [ip]
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f3c:	4581      	cmp	r9, r0
 8004f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f42:	f84c 3b04 	str.w	r3, [ip], #4
 8004f46:	d2db      	bcs.n	8004f00 <quorem+0x44>
 8004f48:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f4c:	b92b      	cbnz	r3, 8004f5a <quorem+0x9e>
 8004f4e:	9b01      	ldr	r3, [sp, #4]
 8004f50:	3b04      	subs	r3, #4
 8004f52:	429d      	cmp	r5, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	d32f      	bcc.n	8004fb8 <quorem+0xfc>
 8004f58:	613c      	str	r4, [r7, #16]
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f001 fd5e 	bl	8006a1c <__mcmp>
 8004f60:	2800      	cmp	r0, #0
 8004f62:	db25      	blt.n	8004fb0 <quorem+0xf4>
 8004f64:	4628      	mov	r0, r5
 8004f66:	f04f 0c00 	mov.w	ip, #0
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f70:	f8d0 e000 	ldr.w	lr, [r0]
 8004f74:	b28b      	uxth	r3, r1
 8004f76:	ebac 0303 	sub.w	r3, ip, r3
 8004f7a:	fa1f f28e 	uxth.w	r2, lr
 8004f7e:	4413      	add	r3, r2
 8004f80:	0c0a      	lsrs	r2, r1, #16
 8004f82:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f90:	45c1      	cmp	r9, r8
 8004f92:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f96:	f840 3b04 	str.w	r3, [r0], #4
 8004f9a:	d2e7      	bcs.n	8004f6c <quorem+0xb0>
 8004f9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa4:	b922      	cbnz	r2, 8004fb0 <quorem+0xf4>
 8004fa6:	3b04      	subs	r3, #4
 8004fa8:	429d      	cmp	r5, r3
 8004faa:	461a      	mov	r2, r3
 8004fac:	d30a      	bcc.n	8004fc4 <quorem+0x108>
 8004fae:	613c      	str	r4, [r7, #16]
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	b003      	add	sp, #12
 8004fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	3b04      	subs	r3, #4
 8004fbc:	2a00      	cmp	r2, #0
 8004fbe:	d1cb      	bne.n	8004f58 <quorem+0x9c>
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	e7c6      	b.n	8004f52 <quorem+0x96>
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	2a00      	cmp	r2, #0
 8004fca:	d1f0      	bne.n	8004fae <quorem+0xf2>
 8004fcc:	3c01      	subs	r4, #1
 8004fce:	e7eb      	b.n	8004fa8 <quorem+0xec>
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e7ee      	b.n	8004fb2 <quorem+0xf6>
 8004fd4:	0000      	movs	r0, r0
	...

08004fd8 <_dtoa_r>:
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004fde:	b097      	sub	sp, #92	; 0x5c
 8004fe0:	4681      	mov	r9, r0
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	4692      	mov	sl, r2
 8004fe8:	469b      	mov	fp, r3
 8004fea:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8004fec:	b149      	cbz	r1, 8005002 <_dtoa_r+0x2a>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004ff2:	4093      	lsls	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
 8004ff6:	604a      	str	r2, [r1, #4]
 8004ff8:	f001 fb05 	bl	8006606 <_Bfree>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8005002:	1e2b      	subs	r3, r5, #0
 8005004:	bfad      	iteet	ge
 8005006:	2300      	movge	r3, #0
 8005008:	2201      	movlt	r2, #1
 800500a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800500e:	6033      	strge	r3, [r6, #0]
 8005010:	4b9f      	ldr	r3, [pc, #636]	; (8005290 <_dtoa_r+0x2b8>)
 8005012:	bfb8      	it	lt
 8005014:	6032      	strlt	r2, [r6, #0]
 8005016:	ea33 030b 	bics.w	r3, r3, fp
 800501a:	d119      	bne.n	8005050 <_dtoa_r+0x78>
 800501c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005020:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005028:	4323      	orrs	r3, r4
 800502a:	f000 8574 	beq.w	8005b16 <_dtoa_r+0xb3e>
 800502e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005030:	b90b      	cbnz	r3, 8005036 <_dtoa_r+0x5e>
 8005032:	4b98      	ldr	r3, [pc, #608]	; (8005294 <_dtoa_r+0x2bc>)
 8005034:	e020      	b.n	8005078 <_dtoa_r+0xa0>
 8005036:	4b97      	ldr	r3, [pc, #604]	; (8005294 <_dtoa_r+0x2bc>)
 8005038:	9304      	str	r3, [sp, #16]
 800503a:	3303      	adds	r3, #3
 800503c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	9804      	ldr	r0, [sp, #16]
 8005042:	b017      	add	sp, #92	; 0x5c
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005048:	4b93      	ldr	r3, [pc, #588]	; (8005298 <_dtoa_r+0x2c0>)
 800504a:	9304      	str	r3, [sp, #16]
 800504c:	3308      	adds	r3, #8
 800504e:	e7f5      	b.n	800503c <_dtoa_r+0x64>
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	4650      	mov	r0, sl
 8005056:	4659      	mov	r1, fp
 8005058:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 800505c:	f7fb fe02 	bl	8000c64 <__aeabi_dcmpeq>
 8005060:	4607      	mov	r7, r0
 8005062:	b158      	cbz	r0, 800507c <_dtoa_r+0xa4>
 8005064:	2301      	movs	r3, #1
 8005066:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 854f 	beq.w	8005b10 <_dtoa_r+0xb38>
 8005072:	488a      	ldr	r0, [pc, #552]	; (800529c <_dtoa_r+0x2c4>)
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	9304      	str	r3, [sp, #16]
 800507a:	e7e1      	b.n	8005040 <_dtoa_r+0x68>
 800507c:	ab14      	add	r3, sp, #80	; 0x50
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	ab15      	add	r3, sp, #84	; 0x54
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4648      	mov	r0, r9
 8005086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800508a:	f001 fd6f 	bl	8006b6c <__d2b>
 800508e:	f3cb 560a 	ubfx	r6, fp, #20, #11
 8005092:	9003      	str	r0, [sp, #12]
 8005094:	2e00      	cmp	r6, #0
 8005096:	d07c      	beq.n	8005192 <_dtoa_r+0x1ba>
 8005098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800509e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80050a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050ae:	9713      	str	r7, [sp, #76]	; 0x4c
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b7b      	ldr	r3, [pc, #492]	; (80052a0 <_dtoa_r+0x2c8>)
 80050b4:	f7fb f850 	bl	8000158 <__aeabi_dsub>
 80050b8:	a36f      	add	r3, pc, #444	; (adr r3, 8005278 <_dtoa_r+0x2a0>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb fa03 	bl	80004c8 <__aeabi_dmul>
 80050c2:	a36f      	add	r3, pc, #444	; (adr r3, 8005280 <_dtoa_r+0x2a8>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f7fb f848 	bl	800015c <__adddf3>
 80050cc:	4604      	mov	r4, r0
 80050ce:	4630      	mov	r0, r6
 80050d0:	460d      	mov	r5, r1
 80050d2:	f7fb f98f 	bl	80003f4 <__aeabi_i2d>
 80050d6:	a36c      	add	r3, pc, #432	; (adr r3, 8005288 <_dtoa_r+0x2b0>)
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f7fb f9f4 	bl	80004c8 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4620      	mov	r0, r4
 80050e6:	4629      	mov	r1, r5
 80050e8:	f7fb f838 	bl	800015c <__adddf3>
 80050ec:	4604      	mov	r4, r0
 80050ee:	460d      	mov	r5, r1
 80050f0:	f7fb fe00 	bl	8000cf4 <__aeabi_d2iz>
 80050f4:	2200      	movs	r2, #0
 80050f6:	4680      	mov	r8, r0
 80050f8:	2300      	movs	r3, #0
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f7fb fdbb 	bl	8000c78 <__aeabi_dcmplt>
 8005102:	b148      	cbz	r0, 8005118 <_dtoa_r+0x140>
 8005104:	4640      	mov	r0, r8
 8005106:	f7fb f975 	bl	80003f4 <__aeabi_i2d>
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	f7fb fda9 	bl	8000c64 <__aeabi_dcmpeq>
 8005112:	b908      	cbnz	r0, 8005118 <_dtoa_r+0x140>
 8005114:	f108 38ff 	add.w	r8, r8, #4294967295
 8005118:	f1b8 0f16 	cmp.w	r8, #22
 800511c:	d856      	bhi.n	80051cc <_dtoa_r+0x1f4>
 800511e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005122:	4b60      	ldr	r3, [pc, #384]	; (80052a4 <_dtoa_r+0x2cc>)
 8005124:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f7fb fda4 	bl	8000c78 <__aeabi_dcmplt>
 8005130:	2800      	cmp	r0, #0
 8005132:	d04d      	beq.n	80051d0 <_dtoa_r+0x1f8>
 8005134:	2300      	movs	r3, #0
 8005136:	f108 38ff 	add.w	r8, r8, #4294967295
 800513a:	930f      	str	r3, [sp, #60]	; 0x3c
 800513c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800513e:	1b9e      	subs	r6, r3, r6
 8005140:	1e73      	subs	r3, r6, #1
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	bf49      	itett	mi
 8005146:	f1c6 0301 	rsbmi	r3, r6, #1
 800514a:	2300      	movpl	r3, #0
 800514c:	9306      	strmi	r3, [sp, #24]
 800514e:	2300      	movmi	r3, #0
 8005150:	bf54      	ite	pl
 8005152:	9306      	strpl	r3, [sp, #24]
 8005154:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005156:	f1b8 0f00 	cmp.w	r8, #0
 800515a:	db3b      	blt.n	80051d4 <_dtoa_r+0x1fc>
 800515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005162:	4443      	add	r3, r8
 8005164:	9309      	str	r3, [sp, #36]	; 0x24
 8005166:	2300      	movs	r3, #0
 8005168:	930a      	str	r3, [sp, #40]	; 0x28
 800516a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800516c:	2b09      	cmp	r3, #9
 800516e:	d86b      	bhi.n	8005248 <_dtoa_r+0x270>
 8005170:	2b05      	cmp	r3, #5
 8005172:	bfc4      	itt	gt
 8005174:	3b04      	subgt	r3, #4
 8005176:	9320      	strgt	r3, [sp, #128]	; 0x80
 8005178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800517a:	bfc8      	it	gt
 800517c:	2400      	movgt	r4, #0
 800517e:	f1a3 0302 	sub.w	r3, r3, #2
 8005182:	bfd8      	it	le
 8005184:	2401      	movle	r4, #1
 8005186:	2b03      	cmp	r3, #3
 8005188:	d869      	bhi.n	800525e <_dtoa_r+0x286>
 800518a:	e8df f003 	tbb	[pc, r3]
 800518e:	3a2d      	.short	0x3a2d
 8005190:	5b38      	.short	0x5b38
 8005192:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 8005196:	441e      	add	r6, r3
 8005198:	f206 4332 	addw	r3, r6, #1074	; 0x432
 800519c:	2b20      	cmp	r3, #32
 800519e:	bfc3      	ittte	gt
 80051a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051a4:	f206 4012 	addwgt	r0, r6, #1042	; 0x412
 80051a8:	fa0b f303 	lslgt.w	r3, fp, r3
 80051ac:	f1c3 0320 	rsble	r3, r3, #32
 80051b0:	bfc6      	itte	gt
 80051b2:	fa24 f000 	lsrgt.w	r0, r4, r0
 80051b6:	4318      	orrgt	r0, r3
 80051b8:	fa04 f003 	lslle.w	r0, r4, r3
 80051bc:	f7fb f90a 	bl	80003d4 <__aeabi_ui2d>
 80051c0:	2301      	movs	r3, #1
 80051c2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80051c6:	3e01      	subs	r6, #1
 80051c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80051ca:	e771      	b.n	80050b0 <_dtoa_r+0xd8>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e7b4      	b.n	800513a <_dtoa_r+0x162>
 80051d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80051d2:	e7b3      	b.n	800513c <_dtoa_r+0x164>
 80051d4:	9b06      	ldr	r3, [sp, #24]
 80051d6:	eba3 0308 	sub.w	r3, r3, r8
 80051da:	9306      	str	r3, [sp, #24]
 80051dc:	f1c8 0300 	rsb	r3, r8, #0
 80051e0:	930a      	str	r3, [sp, #40]	; 0x28
 80051e2:	2300      	movs	r3, #0
 80051e4:	930e      	str	r3, [sp, #56]	; 0x38
 80051e6:	e7c0      	b.n	800516a <_dtoa_r+0x192>
 80051e8:	2300      	movs	r3, #0
 80051ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80051ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	dc38      	bgt.n	8005264 <_dtoa_r+0x28c>
 80051f2:	2301      	movs	r3, #1
 80051f4:	461a      	mov	r2, r3
 80051f6:	9308      	str	r3, [sp, #32]
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	9221      	str	r2, [sp, #132]	; 0x84
 80051fc:	e00b      	b.n	8005216 <_dtoa_r+0x23e>
 80051fe:	2301      	movs	r3, #1
 8005200:	e7f3      	b.n	80051ea <_dtoa_r+0x212>
 8005202:	2300      	movs	r3, #0
 8005204:	930b      	str	r3, [sp, #44]	; 0x2c
 8005206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005208:	4443      	add	r3, r8
 800520a:	9308      	str	r3, [sp, #32]
 800520c:	3301      	adds	r3, #1
 800520e:	2b01      	cmp	r3, #1
 8005210:	9305      	str	r3, [sp, #20]
 8005212:	bfb8      	it	lt
 8005214:	2301      	movlt	r3, #1
 8005216:	2200      	movs	r2, #0
 8005218:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 800521c:	2204      	movs	r2, #4
 800521e:	f102 0014 	add.w	r0, r2, #20
 8005222:	4298      	cmp	r0, r3
 8005224:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8005228:	d920      	bls.n	800526c <_dtoa_r+0x294>
 800522a:	4648      	mov	r0, r9
 800522c:	f001 f9c6 	bl	80065bc <_Balloc>
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	2800      	cmp	r0, #0
 8005234:	d13c      	bne.n	80052b0 <_dtoa_r+0x2d8>
 8005236:	4602      	mov	r2, r0
 8005238:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <_dtoa_r+0x2d0>)
 800523e:	481b      	ldr	r0, [pc, #108]	; (80052ac <_dtoa_r+0x2d4>)
 8005240:	f002 faec 	bl	800781c <__assert_func>
 8005244:	2301      	movs	r3, #1
 8005246:	e7dd      	b.n	8005204 <_dtoa_r+0x22c>
 8005248:	2401      	movs	r4, #1
 800524a:	2300      	movs	r3, #0
 800524c:	940b      	str	r4, [sp, #44]	; 0x2c
 800524e:	9320      	str	r3, [sp, #128]	; 0x80
 8005250:	f04f 33ff 	mov.w	r3, #4294967295
 8005254:	2200      	movs	r2, #0
 8005256:	9308      	str	r3, [sp, #32]
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	2312      	movs	r3, #18
 800525c:	e7cd      	b.n	80051fa <_dtoa_r+0x222>
 800525e:	2301      	movs	r3, #1
 8005260:	930b      	str	r3, [sp, #44]	; 0x2c
 8005262:	e7f5      	b.n	8005250 <_dtoa_r+0x278>
 8005264:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005266:	9308      	str	r3, [sp, #32]
 8005268:	9305      	str	r3, [sp, #20]
 800526a:	e7d4      	b.n	8005216 <_dtoa_r+0x23e>
 800526c:	3101      	adds	r1, #1
 800526e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8005272:	0052      	lsls	r2, r2, #1
 8005274:	e7d3      	b.n	800521e <_dtoa_r+0x246>
 8005276:	bf00      	nop
 8005278:	636f4361 	.word	0x636f4361
 800527c:	3fd287a7 	.word	0x3fd287a7
 8005280:	8b60c8b3 	.word	0x8b60c8b3
 8005284:	3fc68a28 	.word	0x3fc68a28
 8005288:	509f79fb 	.word	0x509f79fb
 800528c:	3fd34413 	.word	0x3fd34413
 8005290:	7ff00000 	.word	0x7ff00000
 8005294:	080083cc 	.word	0x080083cc
 8005298:	080083d0 	.word	0x080083d0
 800529c:	080083ab 	.word	0x080083ab
 80052a0:	3ff80000 	.word	0x3ff80000
 80052a4:	080084d0 	.word	0x080084d0
 80052a8:	080083d9 	.word	0x080083d9
 80052ac:	080083ea 	.word	0x080083ea
 80052b0:	9b04      	ldr	r3, [sp, #16]
 80052b2:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	2b0e      	cmp	r3, #14
 80052ba:	f200 80a1 	bhi.w	8005400 <_dtoa_r+0x428>
 80052be:	2c00      	cmp	r4, #0
 80052c0:	f000 809e 	beq.w	8005400 <_dtoa_r+0x428>
 80052c4:	f1b8 0f00 	cmp.w	r8, #0
 80052c8:	dd34      	ble.n	8005334 <_dtoa_r+0x35c>
 80052ca:	4a96      	ldr	r2, [pc, #600]	; (8005524 <_dtoa_r+0x54c>)
 80052cc:	f008 030f 	and.w	r3, r8, #15
 80052d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052d4:	f418 7f80 	tst.w	r8, #256	; 0x100
 80052d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052dc:	ea4f 1528 	mov.w	r5, r8, asr #4
 80052e0:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052e4:	d016      	beq.n	8005314 <_dtoa_r+0x33c>
 80052e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052ea:	4b8f      	ldr	r3, [pc, #572]	; (8005528 <_dtoa_r+0x550>)
 80052ec:	2603      	movs	r6, #3
 80052ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052f2:	f7fb fa13 	bl	800071c <__aeabi_ddiv>
 80052f6:	4682      	mov	sl, r0
 80052f8:	468b      	mov	fp, r1
 80052fa:	f005 050f 	and.w	r5, r5, #15
 80052fe:	4c8a      	ldr	r4, [pc, #552]	; (8005528 <_dtoa_r+0x550>)
 8005300:	b955      	cbnz	r5, 8005318 <_dtoa_r+0x340>
 8005302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005306:	4650      	mov	r0, sl
 8005308:	4659      	mov	r1, fp
 800530a:	f7fb fa07 	bl	800071c <__aeabi_ddiv>
 800530e:	4682      	mov	sl, r0
 8005310:	468b      	mov	fp, r1
 8005312:	e028      	b.n	8005366 <_dtoa_r+0x38e>
 8005314:	2602      	movs	r6, #2
 8005316:	e7f2      	b.n	80052fe <_dtoa_r+0x326>
 8005318:	07e9      	lsls	r1, r5, #31
 800531a:	d508      	bpl.n	800532e <_dtoa_r+0x356>
 800531c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005320:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005324:	f7fb f8d0 	bl	80004c8 <__aeabi_dmul>
 8005328:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800532c:	3601      	adds	r6, #1
 800532e:	106d      	asrs	r5, r5, #1
 8005330:	3408      	adds	r4, #8
 8005332:	e7e5      	b.n	8005300 <_dtoa_r+0x328>
 8005334:	f000 809e 	beq.w	8005474 <_dtoa_r+0x49c>
 8005338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800533c:	f1c8 0400 	rsb	r4, r8, #0
 8005340:	4b78      	ldr	r3, [pc, #480]	; (8005524 <_dtoa_r+0x54c>)
 8005342:	f004 020f 	and.w	r2, r4, #15
 8005346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb f8bb 	bl	80004c8 <__aeabi_dmul>
 8005352:	2602      	movs	r6, #2
 8005354:	4682      	mov	sl, r0
 8005356:	468b      	mov	fp, r1
 8005358:	2300      	movs	r3, #0
 800535a:	4d73      	ldr	r5, [pc, #460]	; (8005528 <_dtoa_r+0x550>)
 800535c:	1124      	asrs	r4, r4, #4
 800535e:	2c00      	cmp	r4, #0
 8005360:	d17d      	bne.n	800545e <_dtoa_r+0x486>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1d3      	bne.n	800530e <_dtoa_r+0x336>
 8005366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 8085 	beq.w	8005478 <_dtoa_r+0x4a0>
 800536e:	2200      	movs	r2, #0
 8005370:	4650      	mov	r0, sl
 8005372:	4659      	mov	r1, fp
 8005374:	4b6d      	ldr	r3, [pc, #436]	; (800552c <_dtoa_r+0x554>)
 8005376:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800537a:	f7fb fc7d 	bl	8000c78 <__aeabi_dcmplt>
 800537e:	2800      	cmp	r0, #0
 8005380:	d07a      	beq.n	8005478 <_dtoa_r+0x4a0>
 8005382:	9b05      	ldr	r3, [sp, #20]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d077      	beq.n	8005478 <_dtoa_r+0x4a0>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd36      	ble.n	80053fc <_dtoa_r+0x424>
 800538e:	4650      	mov	r0, sl
 8005390:	4659      	mov	r1, fp
 8005392:	2200      	movs	r2, #0
 8005394:	4b66      	ldr	r3, [pc, #408]	; (8005530 <_dtoa_r+0x558>)
 8005396:	f7fb f897 	bl	80004c8 <__aeabi_dmul>
 800539a:	4682      	mov	sl, r0
 800539c:	468b      	mov	fp, r1
 800539e:	9c08      	ldr	r4, [sp, #32]
 80053a0:	f108 35ff 	add.w	r5, r8, #4294967295
 80053a4:	3601      	adds	r6, #1
 80053a6:	4630      	mov	r0, r6
 80053a8:	f7fb f824 	bl	80003f4 <__aeabi_i2d>
 80053ac:	4652      	mov	r2, sl
 80053ae:	465b      	mov	r3, fp
 80053b0:	f7fb f88a 	bl	80004c8 <__aeabi_dmul>
 80053b4:	2200      	movs	r2, #0
 80053b6:	4b5f      	ldr	r3, [pc, #380]	; (8005534 <_dtoa_r+0x55c>)
 80053b8:	f7fa fed0 	bl	800015c <__adddf3>
 80053bc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053c4:	9611      	str	r6, [sp, #68]	; 0x44
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	d159      	bne.n	800547e <_dtoa_r+0x4a6>
 80053ca:	2200      	movs	r2, #0
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <_dtoa_r+0x560>)
 80053d2:	f7fa fec1 	bl	8000158 <__aeabi_dsub>
 80053d6:	4633      	mov	r3, r6
 80053d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053da:	4682      	mov	sl, r0
 80053dc:	468b      	mov	fp, r1
 80053de:	f7fb fc69 	bl	8000cb4 <__aeabi_dcmpgt>
 80053e2:	2800      	cmp	r0, #0
 80053e4:	f040 828b 	bne.w	80058fe <_dtoa_r+0x926>
 80053e8:	4650      	mov	r0, sl
 80053ea:	4659      	mov	r1, fp
 80053ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80053f2:	f7fb fc41 	bl	8000c78 <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f040 827f 	bne.w	80058fa <_dtoa_r+0x922>
 80053fc:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8005400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005402:	2b00      	cmp	r3, #0
 8005404:	f2c0 814d 	blt.w	80056a2 <_dtoa_r+0x6ca>
 8005408:	f1b8 0f0e 	cmp.w	r8, #14
 800540c:	f300 8149 	bgt.w	80056a2 <_dtoa_r+0x6ca>
 8005410:	4b44      	ldr	r3, [pc, #272]	; (8005524 <_dtoa_r+0x54c>)
 8005412:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005416:	e9d3 3400 	ldrd	r3, r4, [r3]
 800541a:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800541e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005420:	2b00      	cmp	r3, #0
 8005422:	f280 80d6 	bge.w	80055d2 <_dtoa_r+0x5fa>
 8005426:	9b05      	ldr	r3, [sp, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	f300 80d2 	bgt.w	80055d2 <_dtoa_r+0x5fa>
 800542e:	f040 8263 	bne.w	80058f8 <_dtoa_r+0x920>
 8005432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005436:	2200      	movs	r2, #0
 8005438:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <_dtoa_r+0x560>)
 800543a:	f7fb f845 	bl	80004c8 <__aeabi_dmul>
 800543e:	4652      	mov	r2, sl
 8005440:	465b      	mov	r3, fp
 8005442:	f7fb fc2d 	bl	8000ca0 <__aeabi_dcmpge>
 8005446:	9c05      	ldr	r4, [sp, #20]
 8005448:	4625      	mov	r5, r4
 800544a:	2800      	cmp	r0, #0
 800544c:	f040 823c 	bne.w	80058c8 <_dtoa_r+0x8f0>
 8005450:	2331      	movs	r3, #49	; 0x31
 8005452:	9e04      	ldr	r6, [sp, #16]
 8005454:	f108 0801 	add.w	r8, r8, #1
 8005458:	f806 3b01 	strb.w	r3, [r6], #1
 800545c:	e238      	b.n	80058d0 <_dtoa_r+0x8f8>
 800545e:	07e2      	lsls	r2, r4, #31
 8005460:	d505      	bpl.n	800546e <_dtoa_r+0x496>
 8005462:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005466:	f7fb f82f 	bl	80004c8 <__aeabi_dmul>
 800546a:	2301      	movs	r3, #1
 800546c:	3601      	adds	r6, #1
 800546e:	1064      	asrs	r4, r4, #1
 8005470:	3508      	adds	r5, #8
 8005472:	e774      	b.n	800535e <_dtoa_r+0x386>
 8005474:	2602      	movs	r6, #2
 8005476:	e776      	b.n	8005366 <_dtoa_r+0x38e>
 8005478:	4645      	mov	r5, r8
 800547a:	9c05      	ldr	r4, [sp, #20]
 800547c:	e793      	b.n	80053a6 <_dtoa_r+0x3ce>
 800547e:	9904      	ldr	r1, [sp, #16]
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <_dtoa_r+0x54c>)
 8005482:	4421      	add	r1, r4
 8005484:	9112      	str	r1, [sp, #72]	; 0x48
 8005486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800548c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005490:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005494:	2900      	cmp	r1, #0
 8005496:	d053      	beq.n	8005540 <_dtoa_r+0x568>
 8005498:	2000      	movs	r0, #0
 800549a:	4928      	ldr	r1, [pc, #160]	; (800553c <_dtoa_r+0x564>)
 800549c:	f7fb f93e 	bl	800071c <__aeabi_ddiv>
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	f7fa fe58 	bl	8000158 <__aeabi_dsub>
 80054a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054ac:	9e04      	ldr	r6, [sp, #16]
 80054ae:	4659      	mov	r1, fp
 80054b0:	4650      	mov	r0, sl
 80054b2:	f7fb fc1f 	bl	8000cf4 <__aeabi_d2iz>
 80054b6:	4604      	mov	r4, r0
 80054b8:	f7fa ff9c 	bl	80003f4 <__aeabi_i2d>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4650      	mov	r0, sl
 80054c2:	4659      	mov	r1, fp
 80054c4:	f7fa fe48 	bl	8000158 <__aeabi_dsub>
 80054c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054cc:	3430      	adds	r4, #48	; 0x30
 80054ce:	f806 4b01 	strb.w	r4, [r6], #1
 80054d2:	4682      	mov	sl, r0
 80054d4:	468b      	mov	fp, r1
 80054d6:	f7fb fbcf 	bl	8000c78 <__aeabi_dcmplt>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d171      	bne.n	80055c2 <_dtoa_r+0x5ea>
 80054de:	4652      	mov	r2, sl
 80054e0:	465b      	mov	r3, fp
 80054e2:	2000      	movs	r0, #0
 80054e4:	4911      	ldr	r1, [pc, #68]	; (800552c <_dtoa_r+0x554>)
 80054e6:	f7fa fe37 	bl	8000158 <__aeabi_dsub>
 80054ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054ee:	f7fb fbc3 	bl	8000c78 <__aeabi_dcmplt>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f040 80b7 	bne.w	8005666 <_dtoa_r+0x68e>
 80054f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054fa:	429e      	cmp	r6, r3
 80054fc:	f43f af7e 	beq.w	80053fc <_dtoa_r+0x424>
 8005500:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005504:	2200      	movs	r2, #0
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <_dtoa_r+0x558>)
 8005508:	f7fa ffde 	bl	80004c8 <__aeabi_dmul>
 800550c:	2200      	movs	r2, #0
 800550e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <_dtoa_r+0x558>)
 8005514:	4650      	mov	r0, sl
 8005516:	4659      	mov	r1, fp
 8005518:	f7fa ffd6 	bl	80004c8 <__aeabi_dmul>
 800551c:	4682      	mov	sl, r0
 800551e:	468b      	mov	fp, r1
 8005520:	e7c5      	b.n	80054ae <_dtoa_r+0x4d6>
 8005522:	bf00      	nop
 8005524:	080084d0 	.word	0x080084d0
 8005528:	080084a8 	.word	0x080084a8
 800552c:	3ff00000 	.word	0x3ff00000
 8005530:	40240000 	.word	0x40240000
 8005534:	401c0000 	.word	0x401c0000
 8005538:	40140000 	.word	0x40140000
 800553c:	3fe00000 	.word	0x3fe00000
 8005540:	4630      	mov	r0, r6
 8005542:	4639      	mov	r1, r7
 8005544:	f7fa ffc0 	bl	80004c8 <__aeabi_dmul>
 8005548:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800554c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800554e:	9e04      	ldr	r6, [sp, #16]
 8005550:	4659      	mov	r1, fp
 8005552:	4650      	mov	r0, sl
 8005554:	f7fb fbce 	bl	8000cf4 <__aeabi_d2iz>
 8005558:	4604      	mov	r4, r0
 800555a:	f7fa ff4b 	bl	80003f4 <__aeabi_i2d>
 800555e:	4602      	mov	r2, r0
 8005560:	460b      	mov	r3, r1
 8005562:	4650      	mov	r0, sl
 8005564:	4659      	mov	r1, fp
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	3430      	adds	r4, #48	; 0x30
 800556c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800556e:	f806 4b01 	strb.w	r4, [r6], #1
 8005572:	429e      	cmp	r6, r3
 8005574:	4682      	mov	sl, r0
 8005576:	468b      	mov	fp, r1
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	d123      	bne.n	80055c6 <_dtoa_r+0x5ee>
 800557e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005582:	4baf      	ldr	r3, [pc, #700]	; (8005840 <_dtoa_r+0x868>)
 8005584:	f7fa fdea 	bl	800015c <__adddf3>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4650      	mov	r0, sl
 800558e:	4659      	mov	r1, fp
 8005590:	f7fb fb90 	bl	8000cb4 <__aeabi_dcmpgt>
 8005594:	2800      	cmp	r0, #0
 8005596:	d166      	bne.n	8005666 <_dtoa_r+0x68e>
 8005598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800559c:	2000      	movs	r0, #0
 800559e:	49a8      	ldr	r1, [pc, #672]	; (8005840 <_dtoa_r+0x868>)
 80055a0:	f7fa fdda 	bl	8000158 <__aeabi_dsub>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4650      	mov	r0, sl
 80055aa:	4659      	mov	r1, fp
 80055ac:	f7fb fb64 	bl	8000c78 <__aeabi_dcmplt>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	f43f af23 	beq.w	80053fc <_dtoa_r+0x424>
 80055b6:	463e      	mov	r6, r7
 80055b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80055bc:	3f01      	subs	r7, #1
 80055be:	2b30      	cmp	r3, #48	; 0x30
 80055c0:	d0f9      	beq.n	80055b6 <_dtoa_r+0x5de>
 80055c2:	46a8      	mov	r8, r5
 80055c4:	e03e      	b.n	8005644 <_dtoa_r+0x66c>
 80055c6:	4b9f      	ldr	r3, [pc, #636]	; (8005844 <_dtoa_r+0x86c>)
 80055c8:	f7fa ff7e 	bl	80004c8 <__aeabi_dmul>
 80055cc:	4682      	mov	sl, r0
 80055ce:	468b      	mov	fp, r1
 80055d0:	e7be      	b.n	8005550 <_dtoa_r+0x578>
 80055d2:	4654      	mov	r4, sl
 80055d4:	f04f 0a00 	mov.w	sl, #0
 80055d8:	465d      	mov	r5, fp
 80055da:	9e04      	ldr	r6, [sp, #16]
 80055dc:	f8df b264 	ldr.w	fp, [pc, #612]	; 8005844 <_dtoa_r+0x86c>
 80055e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fb f898 	bl	800071c <__aeabi_ddiv>
 80055ec:	f7fb fb82 	bl	8000cf4 <__aeabi_d2iz>
 80055f0:	4607      	mov	r7, r0
 80055f2:	f7fa feff 	bl	80003f4 <__aeabi_i2d>
 80055f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055fa:	f7fa ff65 	bl	80004c8 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4620      	mov	r0, r4
 8005604:	4629      	mov	r1, r5
 8005606:	f7fa fda7 	bl	8000158 <__aeabi_dsub>
 800560a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800560e:	f806 4b01 	strb.w	r4, [r6], #1
 8005612:	9c04      	ldr	r4, [sp, #16]
 8005614:	9d05      	ldr	r5, [sp, #20]
 8005616:	1b34      	subs	r4, r6, r4
 8005618:	42a5      	cmp	r5, r4
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	d133      	bne.n	8005688 <_dtoa_r+0x6b0>
 8005620:	f7fa fd9c 	bl	800015c <__adddf3>
 8005624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005628:	4604      	mov	r4, r0
 800562a:	460d      	mov	r5, r1
 800562c:	f7fb fb42 	bl	8000cb4 <__aeabi_dcmpgt>
 8005630:	b9c0      	cbnz	r0, 8005664 <_dtoa_r+0x68c>
 8005632:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005636:	4620      	mov	r0, r4
 8005638:	4629      	mov	r1, r5
 800563a:	f7fb fb13 	bl	8000c64 <__aeabi_dcmpeq>
 800563e:	b108      	cbz	r0, 8005644 <_dtoa_r+0x66c>
 8005640:	07fb      	lsls	r3, r7, #31
 8005642:	d40f      	bmi.n	8005664 <_dtoa_r+0x68c>
 8005644:	4648      	mov	r0, r9
 8005646:	9903      	ldr	r1, [sp, #12]
 8005648:	f000 ffdd 	bl	8006606 <_Bfree>
 800564c:	2300      	movs	r3, #0
 800564e:	7033      	strb	r3, [r6, #0]
 8005650:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005652:	f108 0001 	add.w	r0, r8, #1
 8005656:	6018      	str	r0, [r3, #0]
 8005658:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800565a:	2b00      	cmp	r3, #0
 800565c:	f43f acf0 	beq.w	8005040 <_dtoa_r+0x68>
 8005660:	601e      	str	r6, [r3, #0]
 8005662:	e4ed      	b.n	8005040 <_dtoa_r+0x68>
 8005664:	4645      	mov	r5, r8
 8005666:	4633      	mov	r3, r6
 8005668:	461e      	mov	r6, r3
 800566a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800566e:	2a39      	cmp	r2, #57	; 0x39
 8005670:	d106      	bne.n	8005680 <_dtoa_r+0x6a8>
 8005672:	9a04      	ldr	r2, [sp, #16]
 8005674:	429a      	cmp	r2, r3
 8005676:	d1f7      	bne.n	8005668 <_dtoa_r+0x690>
 8005678:	2230      	movs	r2, #48	; 0x30
 800567a:	9904      	ldr	r1, [sp, #16]
 800567c:	3501      	adds	r5, #1
 800567e:	700a      	strb	r2, [r1, #0]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	3201      	adds	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e79c      	b.n	80055c2 <_dtoa_r+0x5ea>
 8005688:	4652      	mov	r2, sl
 800568a:	465b      	mov	r3, fp
 800568c:	f7fa ff1c 	bl	80004c8 <__aeabi_dmul>
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	4604      	mov	r4, r0
 8005696:	460d      	mov	r5, r1
 8005698:	f7fb fae4 	bl	8000c64 <__aeabi_dcmpeq>
 800569c:	2800      	cmp	r0, #0
 800569e:	d09f      	beq.n	80055e0 <_dtoa_r+0x608>
 80056a0:	e7d0      	b.n	8005644 <_dtoa_r+0x66c>
 80056a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	f000 80cf 	beq.w	8005848 <_dtoa_r+0x870>
 80056aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056ac:	2a01      	cmp	r2, #1
 80056ae:	f300 80ad 	bgt.w	800580c <_dtoa_r+0x834>
 80056b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	f000 80a5 	beq.w	8005804 <_dtoa_r+0x82c>
 80056ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056c0:	9e06      	ldr	r6, [sp, #24]
 80056c2:	9a06      	ldr	r2, [sp, #24]
 80056c4:	2101      	movs	r1, #1
 80056c6:	441a      	add	r2, r3
 80056c8:	9206      	str	r2, [sp, #24]
 80056ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056cc:	4648      	mov	r0, r9
 80056ce:	441a      	add	r2, r3
 80056d0:	9209      	str	r2, [sp, #36]	; 0x24
 80056d2:	f001 f835 	bl	8006740 <__i2b>
 80056d6:	4605      	mov	r5, r0
 80056d8:	2e00      	cmp	r6, #0
 80056da:	dd0c      	ble.n	80056f6 <_dtoa_r+0x71e>
 80056dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	dd09      	ble.n	80056f6 <_dtoa_r+0x71e>
 80056e2:	42b3      	cmp	r3, r6
 80056e4:	bfa8      	it	ge
 80056e6:	4633      	movge	r3, r6
 80056e8:	9a06      	ldr	r2, [sp, #24]
 80056ea:	1af6      	subs	r6, r6, r3
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	9206      	str	r2, [sp, #24]
 80056f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	9309      	str	r3, [sp, #36]	; 0x24
 80056f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f8:	b1f3      	cbz	r3, 8005738 <_dtoa_r+0x760>
 80056fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a7 	beq.w	8005850 <_dtoa_r+0x878>
 8005702:	2c00      	cmp	r4, #0
 8005704:	dd10      	ble.n	8005728 <_dtoa_r+0x750>
 8005706:	4629      	mov	r1, r5
 8005708:	4622      	mov	r2, r4
 800570a:	4648      	mov	r0, r9
 800570c:	f001 f8d6 	bl	80068bc <__pow5mult>
 8005710:	9a03      	ldr	r2, [sp, #12]
 8005712:	4601      	mov	r1, r0
 8005714:	4605      	mov	r5, r0
 8005716:	4648      	mov	r0, r9
 8005718:	f001 f828 	bl	800676c <__multiply>
 800571c:	4607      	mov	r7, r0
 800571e:	9903      	ldr	r1, [sp, #12]
 8005720:	4648      	mov	r0, r9
 8005722:	f000 ff70 	bl	8006606 <_Bfree>
 8005726:	9703      	str	r7, [sp, #12]
 8005728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572a:	1b1a      	subs	r2, r3, r4
 800572c:	d004      	beq.n	8005738 <_dtoa_r+0x760>
 800572e:	4648      	mov	r0, r9
 8005730:	9903      	ldr	r1, [sp, #12]
 8005732:	f001 f8c3 	bl	80068bc <__pow5mult>
 8005736:	9003      	str	r0, [sp, #12]
 8005738:	2101      	movs	r1, #1
 800573a:	4648      	mov	r0, r9
 800573c:	f001 f800 	bl	8006740 <__i2b>
 8005740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005742:	4604      	mov	r4, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	f340 8085 	ble.w	8005854 <_dtoa_r+0x87c>
 800574a:	461a      	mov	r2, r3
 800574c:	4601      	mov	r1, r0
 800574e:	4648      	mov	r0, r9
 8005750:	f001 f8b4 	bl	80068bc <__pow5mult>
 8005754:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005756:	4604      	mov	r4, r0
 8005758:	2b01      	cmp	r3, #1
 800575a:	dd7e      	ble.n	800585a <_dtoa_r+0x882>
 800575c:	2700      	movs	r7, #0
 800575e:	6923      	ldr	r3, [r4, #16]
 8005760:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005764:	6918      	ldr	r0, [r3, #16]
 8005766:	f000 ff9d 	bl	80066a4 <__hi0bits>
 800576a:	f1c0 0020 	rsb	r0, r0, #32
 800576e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005770:	4418      	add	r0, r3
 8005772:	f010 001f 	ands.w	r0, r0, #31
 8005776:	f000 808e 	beq.w	8005896 <_dtoa_r+0x8be>
 800577a:	f1c0 0320 	rsb	r3, r0, #32
 800577e:	2b04      	cmp	r3, #4
 8005780:	f340 8087 	ble.w	8005892 <_dtoa_r+0x8ba>
 8005784:	f1c0 001c 	rsb	r0, r0, #28
 8005788:	9b06      	ldr	r3, [sp, #24]
 800578a:	4406      	add	r6, r0
 800578c:	4403      	add	r3, r0
 800578e:	9306      	str	r3, [sp, #24]
 8005790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005792:	4403      	add	r3, r0
 8005794:	9309      	str	r3, [sp, #36]	; 0x24
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	2b00      	cmp	r3, #0
 800579a:	dd05      	ble.n	80057a8 <_dtoa_r+0x7d0>
 800579c:	461a      	mov	r2, r3
 800579e:	4648      	mov	r0, r9
 80057a0:	9903      	ldr	r1, [sp, #12]
 80057a2:	f001 f8cb 	bl	800693c <__lshift>
 80057a6:	9003      	str	r0, [sp, #12]
 80057a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd05      	ble.n	80057ba <_dtoa_r+0x7e2>
 80057ae:	4621      	mov	r1, r4
 80057b0:	461a      	mov	r2, r3
 80057b2:	4648      	mov	r0, r9
 80057b4:	f001 f8c2 	bl	800693c <__lshift>
 80057b8:	4604      	mov	r4, r0
 80057ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06c      	beq.n	800589a <_dtoa_r+0x8c2>
 80057c0:	4621      	mov	r1, r4
 80057c2:	9803      	ldr	r0, [sp, #12]
 80057c4:	f001 f92a 	bl	8006a1c <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	da66      	bge.n	800589a <_dtoa_r+0x8c2>
 80057cc:	2300      	movs	r3, #0
 80057ce:	220a      	movs	r2, #10
 80057d0:	4648      	mov	r0, r9
 80057d2:	9903      	ldr	r1, [sp, #12]
 80057d4:	f000 ff20 	bl	8006618 <__multadd>
 80057d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057da:	f108 38ff 	add.w	r8, r8, #4294967295
 80057de:	9003      	str	r0, [sp, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 819f 	beq.w	8005b24 <_dtoa_r+0xb4c>
 80057e6:	2300      	movs	r3, #0
 80057e8:	4629      	mov	r1, r5
 80057ea:	220a      	movs	r2, #10
 80057ec:	4648      	mov	r0, r9
 80057ee:	f000 ff13 	bl	8006618 <__multadd>
 80057f2:	9b08      	ldr	r3, [sp, #32]
 80057f4:	4605      	mov	r5, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f300 808a 	bgt.w	8005910 <_dtoa_r+0x938>
 80057fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057fe:	2b02      	cmp	r3, #2
 8005800:	dc53      	bgt.n	80058aa <_dtoa_r+0x8d2>
 8005802:	e085      	b.n	8005910 <_dtoa_r+0x938>
 8005804:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800580a:	e758      	b.n	80056be <_dtoa_r+0x6e6>
 800580c:	9b05      	ldr	r3, [sp, #20]
 800580e:	1e5c      	subs	r4, r3, #1
 8005810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005812:	42a3      	cmp	r3, r4
 8005814:	bfb7      	itett	lt
 8005816:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005818:	1b1c      	subge	r4, r3, r4
 800581a:	1ae2      	sublt	r2, r4, r3
 800581c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800581e:	bfbe      	ittt	lt
 8005820:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005822:	189b      	addlt	r3, r3, r2
 8005824:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005826:	9b05      	ldr	r3, [sp, #20]
 8005828:	bfb8      	it	lt
 800582a:	2400      	movlt	r4, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfb7      	itett	lt
 8005830:	e9dd 2305 	ldrdlt	r2, r3, [sp, #20]
 8005834:	e9dd 3605 	ldrdge	r3, r6, [sp, #20]
 8005838:	1a9e      	sublt	r6, r3, r2
 800583a:	2300      	movlt	r3, #0
 800583c:	e741      	b.n	80056c2 <_dtoa_r+0x6ea>
 800583e:	bf00      	nop
 8005840:	3fe00000 	.word	0x3fe00000
 8005844:	40240000 	.word	0x40240000
 8005848:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800584a:	9e06      	ldr	r6, [sp, #24]
 800584c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800584e:	e743      	b.n	80056d8 <_dtoa_r+0x700>
 8005850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005852:	e76c      	b.n	800572e <_dtoa_r+0x756>
 8005854:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005856:	2b01      	cmp	r3, #1
 8005858:	dc17      	bgt.n	800588a <_dtoa_r+0x8b2>
 800585a:	f1ba 0f00 	cmp.w	sl, #0
 800585e:	d114      	bne.n	800588a <_dtoa_r+0x8b2>
 8005860:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005864:	b99b      	cbnz	r3, 800588e <_dtoa_r+0x8b6>
 8005866:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800586a:	0d3f      	lsrs	r7, r7, #20
 800586c:	053f      	lsls	r7, r7, #20
 800586e:	b137      	cbz	r7, 800587e <_dtoa_r+0x8a6>
 8005870:	2701      	movs	r7, #1
 8005872:	9b06      	ldr	r3, [sp, #24]
 8005874:	3301      	adds	r3, #1
 8005876:	9306      	str	r3, [sp, #24]
 8005878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	9309      	str	r3, [sp, #36]	; 0x24
 800587e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f af6c 	bne.w	800575e <_dtoa_r+0x786>
 8005886:	2001      	movs	r0, #1
 8005888:	e771      	b.n	800576e <_dtoa_r+0x796>
 800588a:	2700      	movs	r7, #0
 800588c:	e7f7      	b.n	800587e <_dtoa_r+0x8a6>
 800588e:	4657      	mov	r7, sl
 8005890:	e7f5      	b.n	800587e <_dtoa_r+0x8a6>
 8005892:	d080      	beq.n	8005796 <_dtoa_r+0x7be>
 8005894:	4618      	mov	r0, r3
 8005896:	301c      	adds	r0, #28
 8005898:	e776      	b.n	8005788 <_dtoa_r+0x7b0>
 800589a:	9b05      	ldr	r3, [sp, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc31      	bgt.n	8005904 <_dtoa_r+0x92c>
 80058a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	dd2e      	ble.n	8005904 <_dtoa_r+0x92c>
 80058a6:	9b05      	ldr	r3, [sp, #20]
 80058a8:	9308      	str	r3, [sp, #32]
 80058aa:	9b08      	ldr	r3, [sp, #32]
 80058ac:	b963      	cbnz	r3, 80058c8 <_dtoa_r+0x8f0>
 80058ae:	4621      	mov	r1, r4
 80058b0:	2205      	movs	r2, #5
 80058b2:	4648      	mov	r0, r9
 80058b4:	f000 feb0 	bl	8006618 <__multadd>
 80058b8:	4601      	mov	r1, r0
 80058ba:	4604      	mov	r4, r0
 80058bc:	9803      	ldr	r0, [sp, #12]
 80058be:	f001 f8ad 	bl	8006a1c <__mcmp>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f73f adc4 	bgt.w	8005450 <_dtoa_r+0x478>
 80058c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058ca:	9e04      	ldr	r6, [sp, #16]
 80058cc:	ea6f 0803 	mvn.w	r8, r3
 80058d0:	2700      	movs	r7, #0
 80058d2:	4621      	mov	r1, r4
 80058d4:	4648      	mov	r0, r9
 80058d6:	f000 fe96 	bl	8006606 <_Bfree>
 80058da:	2d00      	cmp	r5, #0
 80058dc:	f43f aeb2 	beq.w	8005644 <_dtoa_r+0x66c>
 80058e0:	b12f      	cbz	r7, 80058ee <_dtoa_r+0x916>
 80058e2:	42af      	cmp	r7, r5
 80058e4:	d003      	beq.n	80058ee <_dtoa_r+0x916>
 80058e6:	4639      	mov	r1, r7
 80058e8:	4648      	mov	r0, r9
 80058ea:	f000 fe8c 	bl	8006606 <_Bfree>
 80058ee:	4629      	mov	r1, r5
 80058f0:	4648      	mov	r0, r9
 80058f2:	f000 fe88 	bl	8006606 <_Bfree>
 80058f6:	e6a5      	b.n	8005644 <_dtoa_r+0x66c>
 80058f8:	2400      	movs	r4, #0
 80058fa:	4625      	mov	r5, r4
 80058fc:	e7e4      	b.n	80058c8 <_dtoa_r+0x8f0>
 80058fe:	46a8      	mov	r8, r5
 8005900:	4625      	mov	r5, r4
 8005902:	e5a5      	b.n	8005450 <_dtoa_r+0x478>
 8005904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80c4 	beq.w	8005a94 <_dtoa_r+0xabc>
 800590c:	9b05      	ldr	r3, [sp, #20]
 800590e:	9308      	str	r3, [sp, #32]
 8005910:	2e00      	cmp	r6, #0
 8005912:	dd05      	ble.n	8005920 <_dtoa_r+0x948>
 8005914:	4629      	mov	r1, r5
 8005916:	4632      	mov	r2, r6
 8005918:	4648      	mov	r0, r9
 800591a:	f001 f80f 	bl	800693c <__lshift>
 800591e:	4605      	mov	r5, r0
 8005920:	2f00      	cmp	r7, #0
 8005922:	d058      	beq.n	80059d6 <_dtoa_r+0x9fe>
 8005924:	4648      	mov	r0, r9
 8005926:	6869      	ldr	r1, [r5, #4]
 8005928:	f000 fe48 	bl	80065bc <_Balloc>
 800592c:	4606      	mov	r6, r0
 800592e:	b920      	cbnz	r0, 800593a <_dtoa_r+0x962>
 8005930:	4602      	mov	r2, r0
 8005932:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005936:	4b7f      	ldr	r3, [pc, #508]	; (8005b34 <_dtoa_r+0xb5c>)
 8005938:	e481      	b.n	800523e <_dtoa_r+0x266>
 800593a:	692a      	ldr	r2, [r5, #16]
 800593c:	f105 010c 	add.w	r1, r5, #12
 8005940:	3202      	adds	r2, #2
 8005942:	0092      	lsls	r2, r2, #2
 8005944:	300c      	adds	r0, #12
 8005946:	f000 fe1f 	bl	8006588 <memcpy>
 800594a:	2201      	movs	r2, #1
 800594c:	4631      	mov	r1, r6
 800594e:	4648      	mov	r0, r9
 8005950:	f000 fff4 	bl	800693c <__lshift>
 8005954:	462f      	mov	r7, r5
 8005956:	4605      	mov	r5, r0
 8005958:	9b04      	ldr	r3, [sp, #16]
 800595a:	9a04      	ldr	r2, [sp, #16]
 800595c:	3301      	adds	r3, #1
 800595e:	9305      	str	r3, [sp, #20]
 8005960:	9b08      	ldr	r3, [sp, #32]
 8005962:	4413      	add	r3, r2
 8005964:	930a      	str	r3, [sp, #40]	; 0x28
 8005966:	f00a 0301 	and.w	r3, sl, #1
 800596a:	9309      	str	r3, [sp, #36]	; 0x24
 800596c:	9b05      	ldr	r3, [sp, #20]
 800596e:	4621      	mov	r1, r4
 8005970:	9803      	ldr	r0, [sp, #12]
 8005972:	f103 3bff 	add.w	fp, r3, #4294967295
 8005976:	f7ff faa1 	bl	8004ebc <quorem>
 800597a:	4639      	mov	r1, r7
 800597c:	9006      	str	r0, [sp, #24]
 800597e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005982:	9803      	ldr	r0, [sp, #12]
 8005984:	f001 f84a 	bl	8006a1c <__mcmp>
 8005988:	462a      	mov	r2, r5
 800598a:	9008      	str	r0, [sp, #32]
 800598c:	4621      	mov	r1, r4
 800598e:	4648      	mov	r0, r9
 8005990:	f001 f860 	bl	8006a54 <__mdiff>
 8005994:	68c2      	ldr	r2, [r0, #12]
 8005996:	4606      	mov	r6, r0
 8005998:	b9fa      	cbnz	r2, 80059da <_dtoa_r+0xa02>
 800599a:	4601      	mov	r1, r0
 800599c:	9803      	ldr	r0, [sp, #12]
 800599e:	f001 f83d 	bl	8006a1c <__mcmp>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4631      	mov	r1, r6
 80059a6:	4648      	mov	r0, r9
 80059a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80059aa:	f000 fe2c 	bl	8006606 <_Bfree>
 80059ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b2:	9e05      	ldr	r6, [sp, #20]
 80059b4:	ea43 0102 	orr.w	r1, r3, r2
 80059b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ba:	430b      	orrs	r3, r1
 80059bc:	d10f      	bne.n	80059de <_dtoa_r+0xa06>
 80059be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059c2:	d028      	beq.n	8005a16 <_dtoa_r+0xa3e>
 80059c4:	9b08      	ldr	r3, [sp, #32]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dd02      	ble.n	80059d0 <_dtoa_r+0x9f8>
 80059ca:	9b06      	ldr	r3, [sp, #24]
 80059cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059d0:	f88b a000 	strb.w	sl, [fp]
 80059d4:	e77d      	b.n	80058d2 <_dtoa_r+0x8fa>
 80059d6:	4628      	mov	r0, r5
 80059d8:	e7bc      	b.n	8005954 <_dtoa_r+0x97c>
 80059da:	2201      	movs	r2, #1
 80059dc:	e7e2      	b.n	80059a4 <_dtoa_r+0x9cc>
 80059de:	9b08      	ldr	r3, [sp, #32]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db04      	blt.n	80059ee <_dtoa_r+0xa16>
 80059e4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80059e6:	430b      	orrs	r3, r1
 80059e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ea:	430b      	orrs	r3, r1
 80059ec:	d120      	bne.n	8005a30 <_dtoa_r+0xa58>
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	ddee      	ble.n	80059d0 <_dtoa_r+0x9f8>
 80059f2:	2201      	movs	r2, #1
 80059f4:	9903      	ldr	r1, [sp, #12]
 80059f6:	4648      	mov	r0, r9
 80059f8:	f000 ffa0 	bl	800693c <__lshift>
 80059fc:	4621      	mov	r1, r4
 80059fe:	9003      	str	r0, [sp, #12]
 8005a00:	f001 f80c 	bl	8006a1c <__mcmp>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	dc03      	bgt.n	8005a10 <_dtoa_r+0xa38>
 8005a08:	d1e2      	bne.n	80059d0 <_dtoa_r+0x9f8>
 8005a0a:	f01a 0f01 	tst.w	sl, #1
 8005a0e:	d0df      	beq.n	80059d0 <_dtoa_r+0x9f8>
 8005a10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a14:	d1d9      	bne.n	80059ca <_dtoa_r+0x9f2>
 8005a16:	2339      	movs	r3, #57	; 0x39
 8005a18:	f88b 3000 	strb.w	r3, [fp]
 8005a1c:	4633      	mov	r3, r6
 8005a1e:	461e      	mov	r6, r3
 8005a20:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	2a39      	cmp	r2, #57	; 0x39
 8005a28:	d06a      	beq.n	8005b00 <_dtoa_r+0xb28>
 8005a2a:	3201      	adds	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	e750      	b.n	80058d2 <_dtoa_r+0x8fa>
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	dd07      	ble.n	8005a44 <_dtoa_r+0xa6c>
 8005a34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a38:	d0ed      	beq.n	8005a16 <_dtoa_r+0xa3e>
 8005a3a:	f10a 0301 	add.w	r3, sl, #1
 8005a3e:	f88b 3000 	strb.w	r3, [fp]
 8005a42:	e746      	b.n	80058d2 <_dtoa_r+0x8fa>
 8005a44:	9b05      	ldr	r3, [sp, #20]
 8005a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a48:	f803 ac01 	strb.w	sl, [r3, #-1]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d041      	beq.n	8005ad4 <_dtoa_r+0xafc>
 8005a50:	2300      	movs	r3, #0
 8005a52:	220a      	movs	r2, #10
 8005a54:	9903      	ldr	r1, [sp, #12]
 8005a56:	4648      	mov	r0, r9
 8005a58:	f000 fdde 	bl	8006618 <__multadd>
 8005a5c:	42af      	cmp	r7, r5
 8005a5e:	9003      	str	r0, [sp, #12]
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	f04f 020a 	mov.w	r2, #10
 8005a68:	4639      	mov	r1, r7
 8005a6a:	4648      	mov	r0, r9
 8005a6c:	d107      	bne.n	8005a7e <_dtoa_r+0xaa6>
 8005a6e:	f000 fdd3 	bl	8006618 <__multadd>
 8005a72:	4607      	mov	r7, r0
 8005a74:	4605      	mov	r5, r0
 8005a76:	9b05      	ldr	r3, [sp, #20]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	9305      	str	r3, [sp, #20]
 8005a7c:	e776      	b.n	800596c <_dtoa_r+0x994>
 8005a7e:	f000 fdcb 	bl	8006618 <__multadd>
 8005a82:	4629      	mov	r1, r5
 8005a84:	4607      	mov	r7, r0
 8005a86:	2300      	movs	r3, #0
 8005a88:	220a      	movs	r2, #10
 8005a8a:	4648      	mov	r0, r9
 8005a8c:	f000 fdc4 	bl	8006618 <__multadd>
 8005a90:	4605      	mov	r5, r0
 8005a92:	e7f0      	b.n	8005a76 <_dtoa_r+0xa9e>
 8005a94:	9b05      	ldr	r3, [sp, #20]
 8005a96:	9308      	str	r3, [sp, #32]
 8005a98:	9e04      	ldr	r6, [sp, #16]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	9803      	ldr	r0, [sp, #12]
 8005a9e:	f7ff fa0d 	bl	8004ebc <quorem>
 8005aa2:	9b04      	ldr	r3, [sp, #16]
 8005aa4:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005aa8:	f806 ab01 	strb.w	sl, [r6], #1
 8005aac:	1af2      	subs	r2, r6, r3
 8005aae:	9b08      	ldr	r3, [sp, #32]
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	dd07      	ble.n	8005ac4 <_dtoa_r+0xaec>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	220a      	movs	r2, #10
 8005ab8:	4648      	mov	r0, r9
 8005aba:	9903      	ldr	r1, [sp, #12]
 8005abc:	f000 fdac 	bl	8006618 <__multadd>
 8005ac0:	9003      	str	r0, [sp, #12]
 8005ac2:	e7ea      	b.n	8005a9a <_dtoa_r+0xac2>
 8005ac4:	9b08      	ldr	r3, [sp, #32]
 8005ac6:	2700      	movs	r7, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfcc      	ite	gt
 8005acc:	461e      	movgt	r6, r3
 8005ace:	2601      	movle	r6, #1
 8005ad0:	9b04      	ldr	r3, [sp, #16]
 8005ad2:	441e      	add	r6, r3
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	9903      	ldr	r1, [sp, #12]
 8005ad8:	4648      	mov	r0, r9
 8005ada:	f000 ff2f 	bl	800693c <__lshift>
 8005ade:	4621      	mov	r1, r4
 8005ae0:	9003      	str	r0, [sp, #12]
 8005ae2:	f000 ff9b 	bl	8006a1c <__mcmp>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	dc98      	bgt.n	8005a1c <_dtoa_r+0xa44>
 8005aea:	d102      	bne.n	8005af2 <_dtoa_r+0xb1a>
 8005aec:	f01a 0f01 	tst.w	sl, #1
 8005af0:	d194      	bne.n	8005a1c <_dtoa_r+0xa44>
 8005af2:	4633      	mov	r3, r6
 8005af4:	461e      	mov	r6, r3
 8005af6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005afa:	2a30      	cmp	r2, #48	; 0x30
 8005afc:	d0fa      	beq.n	8005af4 <_dtoa_r+0xb1c>
 8005afe:	e6e8      	b.n	80058d2 <_dtoa_r+0x8fa>
 8005b00:	9a04      	ldr	r2, [sp, #16]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d18b      	bne.n	8005a1e <_dtoa_r+0xa46>
 8005b06:	2331      	movs	r3, #49	; 0x31
 8005b08:	f108 0801 	add.w	r8, r8, #1
 8005b0c:	7013      	strb	r3, [r2, #0]
 8005b0e:	e6e0      	b.n	80058d2 <_dtoa_r+0x8fa>
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <_dtoa_r+0xb60>)
 8005b12:	f7ff bab1 	b.w	8005078 <_dtoa_r+0xa0>
 8005b16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f aa95 	bne.w	8005048 <_dtoa_r+0x70>
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <_dtoa_r+0xb64>)
 8005b20:	f7ff baaa 	b.w	8005078 <_dtoa_r+0xa0>
 8005b24:	9b08      	ldr	r3, [sp, #32]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dcb6      	bgt.n	8005a98 <_dtoa_r+0xac0>
 8005b2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	f73f aebc 	bgt.w	80058aa <_dtoa_r+0x8d2>
 8005b32:	e7b1      	b.n	8005a98 <_dtoa_r+0xac0>
 8005b34:	080083d9 	.word	0x080083d9
 8005b38:	080083aa 	.word	0x080083aa
 8005b3c:	080083d0 	.word	0x080083d0

08005b40 <__sflush_r>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	898b      	ldrh	r3, [r1, #12]
 8005b44:	4605      	mov	r5, r0
 8005b46:	0718      	lsls	r0, r3, #28
 8005b48:	460c      	mov	r4, r1
 8005b4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b4e:	d45e      	bmi.n	8005c0e <__sflush_r+0xce>
 8005b50:	684b      	ldr	r3, [r1, #4]
 8005b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	818a      	strh	r2, [r1, #12]
 8005b5a:	dc04      	bgt.n	8005b66 <__sflush_r+0x26>
 8005b5c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dc01      	bgt.n	8005b66 <__sflush_r+0x26>
 8005b62:	2000      	movs	r0, #0
 8005b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b68:	2e00      	cmp	r6, #0
 8005b6a:	d0fa      	beq.n	8005b62 <__sflush_r+0x22>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b72:	682f      	ldr	r7, [r5, #0]
 8005b74:	602b      	str	r3, [r5, #0]
 8005b76:	d036      	beq.n	8005be6 <__sflush_r+0xa6>
 8005b78:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	075a      	lsls	r2, r3, #29
 8005b7e:	d505      	bpl.n	8005b8c <__sflush_r+0x4c>
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	1ac0      	subs	r0, r0, r3
 8005b84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005b86:	b10b      	cbz	r3, 8005b8c <__sflush_r+0x4c>
 8005b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b8a:	1ac0      	subs	r0, r0, r3
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	4602      	mov	r2, r0
 8005b90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b92:	4628      	mov	r0, r5
 8005b94:	69e1      	ldr	r1, [r4, #28]
 8005b96:	47b0      	blx	r6
 8005b98:	1c43      	adds	r3, r0, #1
 8005b9a:	89a3      	ldrh	r3, [r4, #12]
 8005b9c:	d106      	bne.n	8005bac <__sflush_r+0x6c>
 8005b9e:	6829      	ldr	r1, [r5, #0]
 8005ba0:	291d      	cmp	r1, #29
 8005ba2:	d830      	bhi.n	8005c06 <__sflush_r+0xc6>
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	; (8005c50 <__sflush_r+0x110>)
 8005ba6:	40ca      	lsrs	r2, r1
 8005ba8:	07d6      	lsls	r6, r2, #31
 8005baa:	d52c      	bpl.n	8005c06 <__sflush_r+0xc6>
 8005bac:	2200      	movs	r2, #0
 8005bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb2:	b21b      	sxth	r3, r3
 8005bb4:	6062      	str	r2, [r4, #4]
 8005bb6:	6922      	ldr	r2, [r4, #16]
 8005bb8:	04d9      	lsls	r1, r3, #19
 8005bba:	81a3      	strh	r3, [r4, #12]
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	d504      	bpl.n	8005bca <__sflush_r+0x8a>
 8005bc0:	1c42      	adds	r2, r0, #1
 8005bc2:	d101      	bne.n	8005bc8 <__sflush_r+0x88>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b903      	cbnz	r3, 8005bca <__sflush_r+0x8a>
 8005bc8:	6520      	str	r0, [r4, #80]	; 0x50
 8005bca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005bcc:	602f      	str	r7, [r5, #0]
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d0c7      	beq.n	8005b62 <__sflush_r+0x22>
 8005bd2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d002      	beq.n	8005be0 <__sflush_r+0xa0>
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 f936 	bl	8005e4c <_free_r>
 8005be0:	2000      	movs	r0, #0
 8005be2:	6320      	str	r0, [r4, #48]	; 0x30
 8005be4:	e7be      	b.n	8005b64 <__sflush_r+0x24>
 8005be6:	69e1      	ldr	r1, [r4, #28]
 8005be8:	2301      	movs	r3, #1
 8005bea:	4628      	mov	r0, r5
 8005bec:	47b0      	blx	r6
 8005bee:	1c41      	adds	r1, r0, #1
 8005bf0:	d1c3      	bne.n	8005b7a <__sflush_r+0x3a>
 8005bf2:	682b      	ldr	r3, [r5, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0c0      	beq.n	8005b7a <__sflush_r+0x3a>
 8005bf8:	2b1d      	cmp	r3, #29
 8005bfa:	d001      	beq.n	8005c00 <__sflush_r+0xc0>
 8005bfc:	2b16      	cmp	r3, #22
 8005bfe:	d101      	bne.n	8005c04 <__sflush_r+0xc4>
 8005c00:	602f      	str	r7, [r5, #0]
 8005c02:	e7ae      	b.n	8005b62 <__sflush_r+0x22>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c0a:	81a3      	strh	r3, [r4, #12]
 8005c0c:	e7aa      	b.n	8005b64 <__sflush_r+0x24>
 8005c0e:	690f      	ldr	r7, [r1, #16]
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	d0a6      	beq.n	8005b62 <__sflush_r+0x22>
 8005c14:	079b      	lsls	r3, r3, #30
 8005c16:	bf18      	it	ne
 8005c18:	2300      	movne	r3, #0
 8005c1a:	680e      	ldr	r6, [r1, #0]
 8005c1c:	bf08      	it	eq
 8005c1e:	694b      	ldreq	r3, [r1, #20]
 8005c20:	1bf6      	subs	r6, r6, r7
 8005c22:	600f      	str	r7, [r1, #0]
 8005c24:	608b      	str	r3, [r1, #8]
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	dd9b      	ble.n	8005b62 <__sflush_r+0x22>
 8005c2a:	4633      	mov	r3, r6
 8005c2c:	463a      	mov	r2, r7
 8005c2e:	4628      	mov	r0, r5
 8005c30:	69e1      	ldr	r1, [r4, #28]
 8005c32:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8005c36:	47e0      	blx	ip
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	dc06      	bgt.n	8005c4a <__sflush_r+0x10a>
 8005c3c:	89a3      	ldrh	r3, [r4, #12]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c46:	81a3      	strh	r3, [r4, #12]
 8005c48:	e78c      	b.n	8005b64 <__sflush_r+0x24>
 8005c4a:	4407      	add	r7, r0
 8005c4c:	1a36      	subs	r6, r6, r0
 8005c4e:	e7ea      	b.n	8005c26 <__sflush_r+0xe6>
 8005c50:	20400001 	.word	0x20400001

08005c54 <_fflush_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	460c      	mov	r4, r1
 8005c58:	4605      	mov	r5, r0
 8005c5a:	b118      	cbz	r0, 8005c64 <_fflush_r+0x10>
 8005c5c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005c5e:	b90b      	cbnz	r3, 8005c64 <_fflush_r+0x10>
 8005c60:	f000 f864 	bl	8005d2c <__sinit>
 8005c64:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8005c68:	b1b8      	cbz	r0, 8005c9a <_fflush_r+0x46>
 8005c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c6c:	07db      	lsls	r3, r3, #31
 8005c6e:	d404      	bmi.n	8005c7a <_fflush_r+0x26>
 8005c70:	0581      	lsls	r1, r0, #22
 8005c72:	d402      	bmi.n	8005c7a <_fflush_r+0x26>
 8005c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c76:	f000 f9cf 	bl	8006018 <__retarget_lock_acquire_recursive>
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	f7ff ff5f 	bl	8005b40 <__sflush_r>
 8005c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c84:	4605      	mov	r5, r0
 8005c86:	07da      	lsls	r2, r3, #31
 8005c88:	d405      	bmi.n	8005c96 <_fflush_r+0x42>
 8005c8a:	89a3      	ldrh	r3, [r4, #12]
 8005c8c:	059b      	lsls	r3, r3, #22
 8005c8e:	d402      	bmi.n	8005c96 <_fflush_r+0x42>
 8005c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c92:	f000 f9c2 	bl	800601a <__retarget_lock_release_recursive>
 8005c96:	4628      	mov	r0, r5
 8005c98:	bd38      	pop	{r3, r4, r5, pc}
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	e7fb      	b.n	8005c96 <_fflush_r+0x42>
	...

08005ca0 <std>:
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	b510      	push	{r4, lr}
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8005caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cae:	6083      	str	r3, [r0, #8]
 8005cb0:	8181      	strh	r1, [r0, #12]
 8005cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8005cb4:	81c2      	strh	r2, [r0, #14]
 8005cb6:	6183      	str	r3, [r0, #24]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	2208      	movs	r2, #8
 8005cbc:	305c      	adds	r0, #92	; 0x5c
 8005cbe:	f7fd fe1d 	bl	80038fc <memset>
 8005cc2:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <std+0x40>)
 8005cc4:	61e4      	str	r4, [r4, #28]
 8005cc6:	6223      	str	r3, [r4, #32]
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <std+0x44>)
 8005cca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cce:	6263      	str	r3, [r4, #36]	; 0x24
 8005cd0:	4b05      	ldr	r3, [pc, #20]	; (8005ce8 <std+0x48>)
 8005cd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <std+0x4c>)
 8005cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cdc:	f000 b99a 	b.w	8006014 <__retarget_lock_init_recursive>
 8005ce0:	08006cad 	.word	0x08006cad
 8005ce4:	08006ccf 	.word	0x08006ccf
 8005ce8:	08006d07 	.word	0x08006d07
 8005cec:	08006d2b 	.word	0x08006d2b

08005cf0 <_cleanup_r>:
 8005cf0:	4901      	ldr	r1, [pc, #4]	; (8005cf8 <_cleanup_r+0x8>)
 8005cf2:	f000 b96b 	b.w	8005fcc <_fwalk_reent>
 8005cf6:	bf00      	nop
 8005cf8:	080078e5 	.word	0x080078e5

08005cfc <__sfp_lock_acquire>:
 8005cfc:	4801      	ldr	r0, [pc, #4]	; (8005d04 <__sfp_lock_acquire+0x8>)
 8005cfe:	f000 b98b 	b.w	8006018 <__retarget_lock_acquire_recursive>
 8005d02:	bf00      	nop
 8005d04:	20000a62 	.word	0x20000a62

08005d08 <__sfp_lock_release>:
 8005d08:	4801      	ldr	r0, [pc, #4]	; (8005d10 <__sfp_lock_release+0x8>)
 8005d0a:	f000 b986 	b.w	800601a <__retarget_lock_release_recursive>
 8005d0e:	bf00      	nop
 8005d10:	20000a62 	.word	0x20000a62

08005d14 <__sinit_lock_acquire>:
 8005d14:	4801      	ldr	r0, [pc, #4]	; (8005d1c <__sinit_lock_acquire+0x8>)
 8005d16:	f000 b97f 	b.w	8006018 <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20000a63 	.word	0x20000a63

08005d20 <__sinit_lock_release>:
 8005d20:	4801      	ldr	r0, [pc, #4]	; (8005d28 <__sinit_lock_release+0x8>)
 8005d22:	f000 b97a 	b.w	800601a <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	20000a63 	.word	0x20000a63

08005d2c <__sinit>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	4604      	mov	r4, r0
 8005d30:	f7ff fff0 	bl	8005d14 <__sinit_lock_acquire>
 8005d34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d36:	b11a      	cbz	r2, 8005d40 <__sinit+0x14>
 8005d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d3c:	f7ff bff0 	b.w	8005d20 <__sinit_lock_release>
 8005d40:	4b0d      	ldr	r3, [pc, #52]	; (8005d78 <__sinit+0x4c>)
 8005d42:	2104      	movs	r1, #4
 8005d44:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005d46:	2303      	movs	r3, #3
 8005d48:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8005d4c:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 8005d50:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 8005d54:	6860      	ldr	r0, [r4, #4]
 8005d56:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 8005d5a:	f7ff ffa1 	bl	8005ca0 <std>
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2109      	movs	r1, #9
 8005d62:	68a0      	ldr	r0, [r4, #8]
 8005d64:	f7ff ff9c 	bl	8005ca0 <std>
 8005d68:	2202      	movs	r2, #2
 8005d6a:	2112      	movs	r1, #18
 8005d6c:	68e0      	ldr	r0, [r4, #12]
 8005d6e:	f7ff ff97 	bl	8005ca0 <std>
 8005d72:	2301      	movs	r3, #1
 8005d74:	63a3      	str	r3, [r4, #56]	; 0x38
 8005d76:	e7df      	b.n	8005d38 <__sinit+0xc>
 8005d78:	08005cf1 	.word	0x08005cf1

08005d7c <__libc_fini_array>:
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4d07      	ldr	r5, [pc, #28]	; (8005d9c <__libc_fini_array+0x20>)
 8005d80:	4c07      	ldr	r4, [pc, #28]	; (8005da0 <__libc_fini_array+0x24>)
 8005d82:	1b64      	subs	r4, r4, r5
 8005d84:	10a4      	asrs	r4, r4, #2
 8005d86:	b91c      	cbnz	r4, 8005d90 <__libc_fini_array+0x14>
 8005d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8c:	f002 baa6 	b.w	80082dc <_fini>
 8005d90:	3c01      	subs	r4, #1
 8005d92:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005d96:	4798      	blx	r3
 8005d98:	e7f5      	b.n	8005d86 <__libc_fini_array+0xa>
 8005d9a:	bf00      	nop
 8005d9c:	0800871c 	.word	0x0800871c
 8005da0:	08008720 	.word	0x08008720

08005da4 <_malloc_trim_r>:
 8005da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da8:	4606      	mov	r6, r0
 8005daa:	2008      	movs	r0, #8
 8005dac:	460c      	mov	r4, r1
 8005dae:	f000 ffd3 	bl	8006d58 <sysconf>
 8005db2:	4680      	mov	r8, r0
 8005db4:	4f22      	ldr	r7, [pc, #136]	; (8005e40 <_malloc_trim_r+0x9c>)
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 fbf4 	bl	80065a4 <__malloc_lock>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	685d      	ldr	r5, [r3, #4]
 8005dc0:	f025 0503 	bic.w	r5, r5, #3
 8005dc4:	1b2c      	subs	r4, r5, r4
 8005dc6:	3c11      	subs	r4, #17
 8005dc8:	4444      	add	r4, r8
 8005dca:	fbb4 f4f8 	udiv	r4, r4, r8
 8005dce:	3c01      	subs	r4, #1
 8005dd0:	fb08 f404 	mul.w	r4, r8, r4
 8005dd4:	45a0      	cmp	r8, r4
 8005dd6:	dd05      	ble.n	8005de4 <_malloc_trim_r+0x40>
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 fbe9 	bl	80065b0 <__malloc_unlock>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005de4:	2100      	movs	r1, #0
 8005de6:	4630      	mov	r0, r6
 8005de8:	f000 ff50 	bl	8006c8c <_sbrk_r>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	442b      	add	r3, r5
 8005df0:	4298      	cmp	r0, r3
 8005df2:	d1f1      	bne.n	8005dd8 <_malloc_trim_r+0x34>
 8005df4:	4630      	mov	r0, r6
 8005df6:	4261      	negs	r1, r4
 8005df8:	f000 ff48 	bl	8006c8c <_sbrk_r>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d110      	bne.n	8005e22 <_malloc_trim_r+0x7e>
 8005e00:	2100      	movs	r1, #0
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 ff42 	bl	8006c8c <_sbrk_r>
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	1a83      	subs	r3, r0, r2
 8005e0c:	2b0f      	cmp	r3, #15
 8005e0e:	dde3      	ble.n	8005dd8 <_malloc_trim_r+0x34>
 8005e10:	490c      	ldr	r1, [pc, #48]	; (8005e44 <_malloc_trim_r+0xa0>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6809      	ldr	r1, [r1, #0]
 8005e18:	6053      	str	r3, [r2, #4]
 8005e1a:	1a40      	subs	r0, r0, r1
 8005e1c:	490a      	ldr	r1, [pc, #40]	; (8005e48 <_malloc_trim_r+0xa4>)
 8005e1e:	6008      	str	r0, [r1, #0]
 8005e20:	e7da      	b.n	8005dd8 <_malloc_trim_r+0x34>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a08      	ldr	r2, [pc, #32]	; (8005e48 <_malloc_trim_r+0xa4>)
 8005e26:	1b2d      	subs	r5, r5, r4
 8005e28:	f045 0501 	orr.w	r5, r5, #1
 8005e2c:	605d      	str	r5, [r3, #4]
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	4630      	mov	r0, r6
 8005e32:	1b1b      	subs	r3, r3, r4
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	f000 fbbb 	bl	80065b0 <__malloc_unlock>
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	e7d0      	b.n	8005de0 <_malloc_trim_r+0x3c>
 8005e3e:	bf00      	nop
 8005e40:	2000043c 	.word	0x2000043c
 8005e44:	20000844 	.word	0x20000844
 8005e48:	20000a64 	.word	0x20000a64

08005e4c <_free_r>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	4605      	mov	r5, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	2900      	cmp	r1, #0
 8005e54:	f000 80b1 	beq.w	8005fba <_free_r+0x16e>
 8005e58:	f000 fba4 	bl	80065a4 <__malloc_lock>
 8005e5c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005e60:	4856      	ldr	r0, [pc, #344]	; (8005fbc <_free_r+0x170>)
 8005e62:	f022 0401 	bic.w	r4, r2, #1
 8005e66:	f1a7 0308 	sub.w	r3, r7, #8
 8005e6a:	eb03 0c04 	add.w	ip, r3, r4
 8005e6e:	6881      	ldr	r1, [r0, #8]
 8005e70:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005e74:	4561      	cmp	r1, ip
 8005e76:	f026 0603 	bic.w	r6, r6, #3
 8005e7a:	f002 0201 	and.w	r2, r2, #1
 8005e7e:	d11b      	bne.n	8005eb8 <_free_r+0x6c>
 8005e80:	4434      	add	r4, r6
 8005e82:	b93a      	cbnz	r2, 8005e94 <_free_r+0x48>
 8005e84:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	4414      	add	r4, r2
 8005e8c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8005e90:	60ca      	str	r2, [r1, #12]
 8005e92:	6091      	str	r1, [r2, #8]
 8005e94:	f044 0201 	orr.w	r2, r4, #1
 8005e98:	605a      	str	r2, [r3, #4]
 8005e9a:	6083      	str	r3, [r0, #8]
 8005e9c:	4b48      	ldr	r3, [pc, #288]	; (8005fc0 <_free_r+0x174>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	42a3      	cmp	r3, r4
 8005ea2:	d804      	bhi.n	8005eae <_free_r+0x62>
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <_free_r+0x178>)
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	f7ff ff7b 	bl	8005da4 <_malloc_trim_r>
 8005eae:	4628      	mov	r0, r5
 8005eb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005eb4:	f000 bb7c 	b.w	80065b0 <__malloc_unlock>
 8005eb8:	f8cc 6004 	str.w	r6, [ip, #4]
 8005ebc:	2a00      	cmp	r2, #0
 8005ebe:	d138      	bne.n	8005f32 <_free_r+0xe6>
 8005ec0:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8005ec4:	f100 0708 	add.w	r7, r0, #8
 8005ec8:	1a5b      	subs	r3, r3, r1
 8005eca:	440c      	add	r4, r1
 8005ecc:	6899      	ldr	r1, [r3, #8]
 8005ece:	42b9      	cmp	r1, r7
 8005ed0:	d031      	beq.n	8005f36 <_free_r+0xea>
 8005ed2:	68df      	ldr	r7, [r3, #12]
 8005ed4:	60cf      	str	r7, [r1, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	eb0c 0106 	add.w	r1, ip, r6
 8005edc:	6849      	ldr	r1, [r1, #4]
 8005ede:	07c9      	lsls	r1, r1, #31
 8005ee0:	d40b      	bmi.n	8005efa <_free_r+0xae>
 8005ee2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005ee6:	4434      	add	r4, r6
 8005ee8:	bb3a      	cbnz	r2, 8005f3a <_free_r+0xee>
 8005eea:	4e37      	ldr	r6, [pc, #220]	; (8005fc8 <_free_r+0x17c>)
 8005eec:	42b1      	cmp	r1, r6
 8005eee:	d124      	bne.n	8005f3a <_free_r+0xee>
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005efa:	f044 0101 	orr.w	r1, r4, #1
 8005efe:	6059      	str	r1, [r3, #4]
 8005f00:	511c      	str	r4, [r3, r4]
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	d1d3      	bne.n	8005eae <_free_r+0x62>
 8005f06:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8005f0a:	d21b      	bcs.n	8005f44 <_free_r+0xf8>
 8005f0c:	0961      	lsrs	r1, r4, #5
 8005f0e:	08e2      	lsrs	r2, r4, #3
 8005f10:	2401      	movs	r4, #1
 8005f12:	408c      	lsls	r4, r1
 8005f14:	6841      	ldr	r1, [r0, #4]
 8005f16:	3201      	adds	r2, #1
 8005f18:	430c      	orrs	r4, r1
 8005f1a:	6044      	str	r4, [r0, #4]
 8005f1c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8005f20:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8005f24:	3908      	subs	r1, #8
 8005f26:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8005f2a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8005f2e:	60e3      	str	r3, [r4, #12]
 8005f30:	e7bd      	b.n	8005eae <_free_r+0x62>
 8005f32:	2200      	movs	r2, #0
 8005f34:	e7d0      	b.n	8005ed8 <_free_r+0x8c>
 8005f36:	2201      	movs	r2, #1
 8005f38:	e7ce      	b.n	8005ed8 <_free_r+0x8c>
 8005f3a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8005f3e:	60ce      	str	r6, [r1, #12]
 8005f40:	60b1      	str	r1, [r6, #8]
 8005f42:	e7da      	b.n	8005efa <_free_r+0xae>
 8005f44:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8005f48:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8005f4c:	d214      	bcs.n	8005f78 <_free_r+0x12c>
 8005f4e:	09a2      	lsrs	r2, r4, #6
 8005f50:	3238      	adds	r2, #56	; 0x38
 8005f52:	1c51      	adds	r1, r2, #1
 8005f54:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8005f58:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8005f5c:	428e      	cmp	r6, r1
 8005f5e:	d125      	bne.n	8005fac <_free_r+0x160>
 8005f60:	2401      	movs	r4, #1
 8005f62:	1092      	asrs	r2, r2, #2
 8005f64:	fa04 f202 	lsl.w	r2, r4, r2
 8005f68:	6844      	ldr	r4, [r0, #4]
 8005f6a:	4322      	orrs	r2, r4
 8005f6c:	6042      	str	r2, [r0, #4]
 8005f6e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8005f72:	60b3      	str	r3, [r6, #8]
 8005f74:	60cb      	str	r3, [r1, #12]
 8005f76:	e79a      	b.n	8005eae <_free_r+0x62>
 8005f78:	2a14      	cmp	r2, #20
 8005f7a:	d801      	bhi.n	8005f80 <_free_r+0x134>
 8005f7c:	325b      	adds	r2, #91	; 0x5b
 8005f7e:	e7e8      	b.n	8005f52 <_free_r+0x106>
 8005f80:	2a54      	cmp	r2, #84	; 0x54
 8005f82:	d802      	bhi.n	8005f8a <_free_r+0x13e>
 8005f84:	0b22      	lsrs	r2, r4, #12
 8005f86:	326e      	adds	r2, #110	; 0x6e
 8005f88:	e7e3      	b.n	8005f52 <_free_r+0x106>
 8005f8a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005f8e:	d802      	bhi.n	8005f96 <_free_r+0x14a>
 8005f90:	0be2      	lsrs	r2, r4, #15
 8005f92:	3277      	adds	r2, #119	; 0x77
 8005f94:	e7dd      	b.n	8005f52 <_free_r+0x106>
 8005f96:	f240 5154 	movw	r1, #1364	; 0x554
 8005f9a:	428a      	cmp	r2, r1
 8005f9c:	bf96      	itet	ls
 8005f9e:	0ca2      	lsrls	r2, r4, #18
 8005fa0:	227e      	movhi	r2, #126	; 0x7e
 8005fa2:	327c      	addls	r2, #124	; 0x7c
 8005fa4:	e7d5      	b.n	8005f52 <_free_r+0x106>
 8005fa6:	6889      	ldr	r1, [r1, #8]
 8005fa8:	428e      	cmp	r6, r1
 8005faa:	d004      	beq.n	8005fb6 <_free_r+0x16a>
 8005fac:	684a      	ldr	r2, [r1, #4]
 8005fae:	f022 0203 	bic.w	r2, r2, #3
 8005fb2:	42a2      	cmp	r2, r4
 8005fb4:	d8f7      	bhi.n	8005fa6 <_free_r+0x15a>
 8005fb6:	68ce      	ldr	r6, [r1, #12]
 8005fb8:	e7d9      	b.n	8005f6e <_free_r+0x122>
 8005fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fbc:	2000043c 	.word	0x2000043c
 8005fc0:	20000848 	.word	0x20000848
 8005fc4:	20000a94 	.word	0x20000a94
 8005fc8:	20000444 	.word	0x20000444

08005fcc <_fwalk_reent>:
 8005fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	4688      	mov	r8, r1
 8005fd4:	2700      	movs	r7, #0
 8005fd6:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 8005fda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fde:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe2:	d505      	bpl.n	8005ff0 <_fwalk_reent+0x24>
 8005fe4:	6824      	ldr	r4, [r4, #0]
 8005fe6:	2c00      	cmp	r4, #0
 8005fe8:	d1f7      	bne.n	8005fda <_fwalk_reent+0xe>
 8005fea:	4638      	mov	r0, r7
 8005fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff0:	89ab      	ldrh	r3, [r5, #12]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d907      	bls.n	8006006 <_fwalk_reent+0x3a>
 8005ff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	d003      	beq.n	8006006 <_fwalk_reent+0x3a>
 8005ffe:	4629      	mov	r1, r5
 8006000:	4630      	mov	r0, r6
 8006002:	47c0      	blx	r8
 8006004:	4307      	orrs	r7, r0
 8006006:	3568      	adds	r5, #104	; 0x68
 8006008:	e7e9      	b.n	8005fde <_fwalk_reent+0x12>
	...

0800600c <_localeconv_r>:
 800600c:	4800      	ldr	r0, [pc, #0]	; (8006010 <_localeconv_r+0x4>)
 800600e:	4770      	bx	lr
 8006010:	2000093c 	.word	0x2000093c

08006014 <__retarget_lock_init_recursive>:
 8006014:	4770      	bx	lr

08006016 <__retarget_lock_close_recursive>:
 8006016:	4770      	bx	lr

08006018 <__retarget_lock_acquire_recursive>:
 8006018:	4770      	bx	lr

0800601a <__retarget_lock_release_recursive>:
 800601a:	4770      	bx	lr

0800601c <__swhatbuf_r>:
 800601c:	b570      	push	{r4, r5, r6, lr}
 800601e:	460e      	mov	r6, r1
 8006020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006024:	4614      	mov	r4, r2
 8006026:	2900      	cmp	r1, #0
 8006028:	461d      	mov	r5, r3
 800602a:	b096      	sub	sp, #88	; 0x58
 800602c:	da0a      	bge.n	8006044 <__swhatbuf_r+0x28>
 800602e:	2300      	movs	r3, #0
 8006030:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8006034:	602b      	str	r3, [r5, #0]
 8006036:	f011 0080 	ands.w	r0, r1, #128	; 0x80
 800603a:	d116      	bne.n	800606a <__swhatbuf_r+0x4e>
 800603c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	e015      	b.n	8006070 <__swhatbuf_r+0x54>
 8006044:	466a      	mov	r2, sp
 8006046:	f001 fd21 	bl	8007a8c <_fstat_r>
 800604a:	2800      	cmp	r0, #0
 800604c:	dbef      	blt.n	800602e <__swhatbuf_r+0x12>
 800604e:	9a01      	ldr	r2, [sp, #4]
 8006050:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800605c:	425a      	negs	r2, r3
 800605e:	415a      	adcs	r2, r3
 8006060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	6023      	str	r3, [r4, #0]
 8006068:	e002      	b.n	8006070 <__swhatbuf_r+0x54>
 800606a:	2240      	movs	r2, #64	; 0x40
 800606c:	4618      	mov	r0, r3
 800606e:	6022      	str	r2, [r4, #0]
 8006070:	b016      	add	sp, #88	; 0x58
 8006072:	bd70      	pop	{r4, r5, r6, pc}

08006074 <__smakebuf_r>:
 8006074:	898b      	ldrh	r3, [r1, #12]
 8006076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006078:	079d      	lsls	r5, r3, #30
 800607a:	4606      	mov	r6, r0
 800607c:	460c      	mov	r4, r1
 800607e:	d507      	bpl.n	8006090 <__smakebuf_r+0x1c>
 8006080:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2301      	movs	r3, #1
 800608a:	6163      	str	r3, [r4, #20]
 800608c:	b002      	add	sp, #8
 800608e:	bd70      	pop	{r4, r5, r6, pc}
 8006090:	466a      	mov	r2, sp
 8006092:	ab01      	add	r3, sp, #4
 8006094:	f7ff ffc2 	bl	800601c <__swhatbuf_r>
 8006098:	9900      	ldr	r1, [sp, #0]
 800609a:	4605      	mov	r5, r0
 800609c:	4630      	mov	r0, r6
 800609e:	f000 f829 	bl	80060f4 <_malloc_r>
 80060a2:	b948      	cbnz	r0, 80060b8 <__smakebuf_r+0x44>
 80060a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d4ef      	bmi.n	800608c <__smakebuf_r+0x18>
 80060ac:	f023 0303 	bic.w	r3, r3, #3
 80060b0:	f043 0302 	orr.w	r3, r3, #2
 80060b4:	81a3      	strh	r3, [r4, #12]
 80060b6:	e7e3      	b.n	8006080 <__smakebuf_r+0xc>
 80060b8:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <__smakebuf_r+0x7c>)
 80060ba:	63f3      	str	r3, [r6, #60]	; 0x3c
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	6020      	str	r0, [r4, #0]
 80060c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	9b00      	ldr	r3, [sp, #0]
 80060c8:	6120      	str	r0, [r4, #16]
 80060ca:	6163      	str	r3, [r4, #20]
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	b15b      	cbz	r3, 80060e8 <__smakebuf_r+0x74>
 80060d0:	4630      	mov	r0, r6
 80060d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060d6:	f001 fe33 	bl	8007d40 <_isatty_r>
 80060da:	b128      	cbz	r0, 80060e8 <__smakebuf_r+0x74>
 80060dc:	89a3      	ldrh	r3, [r4, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	f043 0301 	orr.w	r3, r3, #1
 80060e6:	81a3      	strh	r3, [r4, #12]
 80060e8:	89a0      	ldrh	r0, [r4, #12]
 80060ea:	4305      	orrs	r5, r0
 80060ec:	81a5      	strh	r5, [r4, #12]
 80060ee:	e7cd      	b.n	800608c <__smakebuf_r+0x18>
 80060f0:	08005cf1 	.word	0x08005cf1

080060f4 <_malloc_r>:
 80060f4:	f101 030b 	add.w	r3, r1, #11
 80060f8:	2b16      	cmp	r3, #22
 80060fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fe:	4605      	mov	r5, r0
 8006100:	d906      	bls.n	8006110 <_malloc_r+0x1c>
 8006102:	f033 0707 	bics.w	r7, r3, #7
 8006106:	d504      	bpl.n	8006112 <_malloc_r+0x1e>
 8006108:	230c      	movs	r3, #12
 800610a:	602b      	str	r3, [r5, #0]
 800610c:	2400      	movs	r4, #0
 800610e:	e1a3      	b.n	8006458 <_malloc_r+0x364>
 8006110:	2710      	movs	r7, #16
 8006112:	42b9      	cmp	r1, r7
 8006114:	d8f8      	bhi.n	8006108 <_malloc_r+0x14>
 8006116:	4628      	mov	r0, r5
 8006118:	f000 fa44 	bl	80065a4 <__malloc_lock>
 800611c:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8006120:	4eaf      	ldr	r6, [pc, #700]	; (80063e0 <_malloc_r+0x2ec>)
 8006122:	d237      	bcs.n	8006194 <_malloc_r+0xa0>
 8006124:	f107 0208 	add.w	r2, r7, #8
 8006128:	4432      	add	r2, r6
 800612a:	6854      	ldr	r4, [r2, #4]
 800612c:	f1a2 0108 	sub.w	r1, r2, #8
 8006130:	428c      	cmp	r4, r1
 8006132:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8006136:	d102      	bne.n	800613e <_malloc_r+0x4a>
 8006138:	68d4      	ldr	r4, [r2, #12]
 800613a:	42a2      	cmp	r2, r4
 800613c:	d010      	beq.n	8006160 <_malloc_r+0x6c>
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006144:	f023 0303 	bic.w	r3, r3, #3
 8006148:	60ca      	str	r2, [r1, #12]
 800614a:	4423      	add	r3, r4
 800614c:	6091      	str	r1, [r2, #8]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	4628      	mov	r0, r5
 8006158:	f000 fa2a 	bl	80065b0 <__malloc_unlock>
 800615c:	3408      	adds	r4, #8
 800615e:	e17b      	b.n	8006458 <_malloc_r+0x364>
 8006160:	3302      	adds	r3, #2
 8006162:	6934      	ldr	r4, [r6, #16]
 8006164:	499f      	ldr	r1, [pc, #636]	; (80063e4 <_malloc_r+0x2f0>)
 8006166:	428c      	cmp	r4, r1
 8006168:	d077      	beq.n	800625a <_malloc_r+0x166>
 800616a:	6862      	ldr	r2, [r4, #4]
 800616c:	f022 0c03 	bic.w	ip, r2, #3
 8006170:	ebac 0007 	sub.w	r0, ip, r7
 8006174:	280f      	cmp	r0, #15
 8006176:	dd48      	ble.n	800620a <_malloc_r+0x116>
 8006178:	19e2      	adds	r2, r4, r7
 800617a:	f040 0301 	orr.w	r3, r0, #1
 800617e:	f047 0701 	orr.w	r7, r7, #1
 8006182:	6067      	str	r7, [r4, #4]
 8006184:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006188:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800618c:	6053      	str	r3, [r2, #4]
 800618e:	f844 000c 	str.w	r0, [r4, ip]
 8006192:	e7e0      	b.n	8006156 <_malloc_r+0x62>
 8006194:	0a7b      	lsrs	r3, r7, #9
 8006196:	d02a      	beq.n	80061ee <_malloc_r+0xfa>
 8006198:	2b04      	cmp	r3, #4
 800619a:	d812      	bhi.n	80061c2 <_malloc_r+0xce>
 800619c:	09bb      	lsrs	r3, r7, #6
 800619e:	3338      	adds	r3, #56	; 0x38
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80061a6:	6854      	ldr	r4, [r2, #4]
 80061a8:	f1a2 0c08 	sub.w	ip, r2, #8
 80061ac:	4564      	cmp	r4, ip
 80061ae:	d006      	beq.n	80061be <_malloc_r+0xca>
 80061b0:	6862      	ldr	r2, [r4, #4]
 80061b2:	f022 0203 	bic.w	r2, r2, #3
 80061b6:	1bd0      	subs	r0, r2, r7
 80061b8:	280f      	cmp	r0, #15
 80061ba:	dd1c      	ble.n	80061f6 <_malloc_r+0x102>
 80061bc:	3b01      	subs	r3, #1
 80061be:	3301      	adds	r3, #1
 80061c0:	e7cf      	b.n	8006162 <_malloc_r+0x6e>
 80061c2:	2b14      	cmp	r3, #20
 80061c4:	d801      	bhi.n	80061ca <_malloc_r+0xd6>
 80061c6:	335b      	adds	r3, #91	; 0x5b
 80061c8:	e7ea      	b.n	80061a0 <_malloc_r+0xac>
 80061ca:	2b54      	cmp	r3, #84	; 0x54
 80061cc:	d802      	bhi.n	80061d4 <_malloc_r+0xe0>
 80061ce:	0b3b      	lsrs	r3, r7, #12
 80061d0:	336e      	adds	r3, #110	; 0x6e
 80061d2:	e7e5      	b.n	80061a0 <_malloc_r+0xac>
 80061d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80061d8:	d802      	bhi.n	80061e0 <_malloc_r+0xec>
 80061da:	0bfb      	lsrs	r3, r7, #15
 80061dc:	3377      	adds	r3, #119	; 0x77
 80061de:	e7df      	b.n	80061a0 <_malloc_r+0xac>
 80061e0:	f240 5254 	movw	r2, #1364	; 0x554
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d804      	bhi.n	80061f2 <_malloc_r+0xfe>
 80061e8:	0cbb      	lsrs	r3, r7, #18
 80061ea:	337c      	adds	r3, #124	; 0x7c
 80061ec:	e7d8      	b.n	80061a0 <_malloc_r+0xac>
 80061ee:	233f      	movs	r3, #63	; 0x3f
 80061f0:	e7d6      	b.n	80061a0 <_malloc_r+0xac>
 80061f2:	237e      	movs	r3, #126	; 0x7e
 80061f4:	e7d4      	b.n	80061a0 <_malloc_r+0xac>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	68e1      	ldr	r1, [r4, #12]
 80061fa:	db04      	blt.n	8006206 <_malloc_r+0x112>
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	60d9      	str	r1, [r3, #12]
 8006200:	608b      	str	r3, [r1, #8]
 8006202:	18a3      	adds	r3, r4, r2
 8006204:	e7a3      	b.n	800614e <_malloc_r+0x5a>
 8006206:	460c      	mov	r4, r1
 8006208:	e7d0      	b.n	80061ac <_malloc_r+0xb8>
 800620a:	2800      	cmp	r0, #0
 800620c:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8006210:	db07      	blt.n	8006222 <_malloc_r+0x12e>
 8006212:	44a4      	add	ip, r4
 8006214:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	f8cc 3004 	str.w	r3, [ip, #4]
 8006220:	e799      	b.n	8006156 <_malloc_r+0x62>
 8006222:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8006226:	6870      	ldr	r0, [r6, #4]
 8006228:	f080 8094 	bcs.w	8006354 <_malloc_r+0x260>
 800622c:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8006230:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8006234:	f04f 0c01 	mov.w	ip, #1
 8006238:	fa0c fc0e 	lsl.w	ip, ip, lr
 800623c:	ea4c 0000 	orr.w	r0, ip, r0
 8006240:	3201      	adds	r2, #1
 8006242:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8006246:	6070      	str	r0, [r6, #4]
 8006248:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800624c:	3808      	subs	r0, #8
 800624e:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8006252:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8006256:	f8cc 400c 	str.w	r4, [ip, #12]
 800625a:	2001      	movs	r0, #1
 800625c:	109a      	asrs	r2, r3, #2
 800625e:	fa00 f202 	lsl.w	r2, r0, r2
 8006262:	6870      	ldr	r0, [r6, #4]
 8006264:	4290      	cmp	r0, r2
 8006266:	d326      	bcc.n	80062b6 <_malloc_r+0x1c2>
 8006268:	4210      	tst	r0, r2
 800626a:	d106      	bne.n	800627a <_malloc_r+0x186>
 800626c:	f023 0303 	bic.w	r3, r3, #3
 8006270:	0052      	lsls	r2, r2, #1
 8006272:	4210      	tst	r0, r2
 8006274:	f103 0304 	add.w	r3, r3, #4
 8006278:	d0fa      	beq.n	8006270 <_malloc_r+0x17c>
 800627a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800627e:	46c1      	mov	r9, r8
 8006280:	469e      	mov	lr, r3
 8006282:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8006286:	454c      	cmp	r4, r9
 8006288:	f040 80b8 	bne.w	80063fc <_malloc_r+0x308>
 800628c:	f10e 0e01 	add.w	lr, lr, #1
 8006290:	f01e 0f03 	tst.w	lr, #3
 8006294:	f109 0908 	add.w	r9, r9, #8
 8006298:	d1f3      	bne.n	8006282 <_malloc_r+0x18e>
 800629a:	0798      	lsls	r0, r3, #30
 800629c:	f040 80e2 	bne.w	8006464 <_malloc_r+0x370>
 80062a0:	6873      	ldr	r3, [r6, #4]
 80062a2:	ea23 0302 	bic.w	r3, r3, r2
 80062a6:	6073      	str	r3, [r6, #4]
 80062a8:	6870      	ldr	r0, [r6, #4]
 80062aa:	0052      	lsls	r2, r2, #1
 80062ac:	4290      	cmp	r0, r2
 80062ae:	d302      	bcc.n	80062b6 <_malloc_r+0x1c2>
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	f040 80e3 	bne.w	800647c <_malloc_r+0x388>
 80062b6:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80062ba:	f8da 3004 	ldr.w	r3, [sl, #4]
 80062be:	f023 0903 	bic.w	r9, r3, #3
 80062c2:	45b9      	cmp	r9, r7
 80062c4:	d304      	bcc.n	80062d0 <_malloc_r+0x1dc>
 80062c6:	eba9 0207 	sub.w	r2, r9, r7
 80062ca:	2a0f      	cmp	r2, #15
 80062cc:	f300 8141 	bgt.w	8006552 <_malloc_r+0x45e>
 80062d0:	4b45      	ldr	r3, [pc, #276]	; (80063e8 <_malloc_r+0x2f4>)
 80062d2:	2008      	movs	r0, #8
 80062d4:	6819      	ldr	r1, [r3, #0]
 80062d6:	eb0a 0b09 	add.w	fp, sl, r9
 80062da:	3110      	adds	r1, #16
 80062dc:	4439      	add	r1, r7
 80062de:	9101      	str	r1, [sp, #4]
 80062e0:	f000 fd3a 	bl	8006d58 <sysconf>
 80062e4:	4a41      	ldr	r2, [pc, #260]	; (80063ec <_malloc_r+0x2f8>)
 80062e6:	9901      	ldr	r1, [sp, #4]
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	4680      	mov	r8, r0
 80062ec:	3301      	adds	r3, #1
 80062ee:	bf1f      	itttt	ne
 80062f0:	f101 31ff 	addne.w	r1, r1, #4294967295
 80062f4:	1809      	addne	r1, r1, r0
 80062f6:	4243      	negne	r3, r0
 80062f8:	4019      	andne	r1, r3
 80062fa:	4628      	mov	r0, r5
 80062fc:	9101      	str	r1, [sp, #4]
 80062fe:	f000 fcc5 	bl	8006c8c <_sbrk_r>
 8006302:	1c42      	adds	r2, r0, #1
 8006304:	4604      	mov	r4, r0
 8006306:	f000 80f7 	beq.w	80064f8 <_malloc_r+0x404>
 800630a:	4583      	cmp	fp, r0
 800630c:	9901      	ldr	r1, [sp, #4]
 800630e:	4a37      	ldr	r2, [pc, #220]	; (80063ec <_malloc_r+0x2f8>)
 8006310:	d902      	bls.n	8006318 <_malloc_r+0x224>
 8006312:	45b2      	cmp	sl, r6
 8006314:	f040 80f0 	bne.w	80064f8 <_malloc_r+0x404>
 8006318:	4b35      	ldr	r3, [pc, #212]	; (80063f0 <_malloc_r+0x2fc>)
 800631a:	45a3      	cmp	fp, r4
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f108 3cff 	add.w	ip, r8, #4294967295
 8006322:	4408      	add	r0, r1
 8006324:	6018      	str	r0, [r3, #0]
 8006326:	f040 80ab 	bne.w	8006480 <_malloc_r+0x38c>
 800632a:	ea1b 0f0c 	tst.w	fp, ip
 800632e:	f040 80a7 	bne.w	8006480 <_malloc_r+0x38c>
 8006332:	68b2      	ldr	r2, [r6, #8]
 8006334:	4449      	add	r1, r9
 8006336:	f041 0101 	orr.w	r1, r1, #1
 800633a:	6051      	str	r1, [r2, #4]
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <_malloc_r+0x300>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	428b      	cmp	r3, r1
 8006344:	bf88      	it	hi
 8006346:	6013      	strhi	r3, [r2, #0]
 8006348:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <_malloc_r+0x304>)
 800634a:	6811      	ldr	r1, [r2, #0]
 800634c:	428b      	cmp	r3, r1
 800634e:	bf88      	it	hi
 8006350:	6013      	strhi	r3, [r2, #0]
 8006352:	e0d1      	b.n	80064f8 <_malloc_r+0x404>
 8006354:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8006358:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800635c:	d218      	bcs.n	8006390 <_malloc_r+0x29c>
 800635e:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8006362:	3238      	adds	r2, #56	; 0x38
 8006364:	f102 0e01 	add.w	lr, r2, #1
 8006368:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800636c:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006370:	45f0      	cmp	r8, lr
 8006372:	d12b      	bne.n	80063cc <_malloc_r+0x2d8>
 8006374:	f04f 0c01 	mov.w	ip, #1
 8006378:	1092      	asrs	r2, r2, #2
 800637a:	fa0c f202 	lsl.w	r2, ip, r2
 800637e:	4310      	orrs	r0, r2
 8006380:	6070      	str	r0, [r6, #4]
 8006382:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006386:	f8c8 4008 	str.w	r4, [r8, #8]
 800638a:	f8ce 400c 	str.w	r4, [lr, #12]
 800638e:	e764      	b.n	800625a <_malloc_r+0x166>
 8006390:	2a14      	cmp	r2, #20
 8006392:	d801      	bhi.n	8006398 <_malloc_r+0x2a4>
 8006394:	325b      	adds	r2, #91	; 0x5b
 8006396:	e7e5      	b.n	8006364 <_malloc_r+0x270>
 8006398:	2a54      	cmp	r2, #84	; 0x54
 800639a:	d803      	bhi.n	80063a4 <_malloc_r+0x2b0>
 800639c:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80063a0:	326e      	adds	r2, #110	; 0x6e
 80063a2:	e7df      	b.n	8006364 <_malloc_r+0x270>
 80063a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80063a8:	d803      	bhi.n	80063b2 <_malloc_r+0x2be>
 80063aa:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80063ae:	3277      	adds	r2, #119	; 0x77
 80063b0:	e7d8      	b.n	8006364 <_malloc_r+0x270>
 80063b2:	f240 5e54 	movw	lr, #1364	; 0x554
 80063b6:	4572      	cmp	r2, lr
 80063b8:	bf96      	itet	ls
 80063ba:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80063be:	227e      	movhi	r2, #126	; 0x7e
 80063c0:	327c      	addls	r2, #124	; 0x7c
 80063c2:	e7cf      	b.n	8006364 <_malloc_r+0x270>
 80063c4:	f8de e008 	ldr.w	lr, [lr, #8]
 80063c8:	45f0      	cmp	r8, lr
 80063ca:	d005      	beq.n	80063d8 <_malloc_r+0x2e4>
 80063cc:	f8de 2004 	ldr.w	r2, [lr, #4]
 80063d0:	f022 0203 	bic.w	r2, r2, #3
 80063d4:	4562      	cmp	r2, ip
 80063d6:	d8f5      	bhi.n	80063c4 <_malloc_r+0x2d0>
 80063d8:	f8de 800c 	ldr.w	r8, [lr, #12]
 80063dc:	e7d1      	b.n	8006382 <_malloc_r+0x28e>
 80063de:	bf00      	nop
 80063e0:	2000043c 	.word	0x2000043c
 80063e4:	20000444 	.word	0x20000444
 80063e8:	20000a94 	.word	0x20000a94
 80063ec:	20000844 	.word	0x20000844
 80063f0:	20000a64 	.word	0x20000a64
 80063f4:	20000a8c 	.word	0x20000a8c
 80063f8:	20000a90 	.word	0x20000a90
 80063fc:	6860      	ldr	r0, [r4, #4]
 80063fe:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8006402:	f020 0003 	bic.w	r0, r0, #3
 8006406:	eba0 0a07 	sub.w	sl, r0, r7
 800640a:	f1ba 0f0f 	cmp.w	sl, #15
 800640e:	dd12      	ble.n	8006436 <_malloc_r+0x342>
 8006410:	68a3      	ldr	r3, [r4, #8]
 8006412:	19e2      	adds	r2, r4, r7
 8006414:	f047 0701 	orr.w	r7, r7, #1
 8006418:	6067      	str	r7, [r4, #4]
 800641a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800641e:	f8cc 3008 	str.w	r3, [ip, #8]
 8006422:	f04a 0301 	orr.w	r3, sl, #1
 8006426:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800642a:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800642e:	6053      	str	r3, [r2, #4]
 8006430:	f844 a000 	str.w	sl, [r4, r0]
 8006434:	e68f      	b.n	8006156 <_malloc_r+0x62>
 8006436:	f1ba 0f00 	cmp.w	sl, #0
 800643a:	db11      	blt.n	8006460 <_malloc_r+0x36c>
 800643c:	4420      	add	r0, r4
 800643e:	6843      	ldr	r3, [r0, #4]
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	6043      	str	r3, [r0, #4]
 8006446:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800644a:	4628      	mov	r0, r5
 800644c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8006450:	f8cc 3008 	str.w	r3, [ip, #8]
 8006454:	f000 f8ac 	bl	80065b0 <__malloc_unlock>
 8006458:	4620      	mov	r0, r4
 800645a:	b003      	add	sp, #12
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	4664      	mov	r4, ip
 8006462:	e710      	b.n	8006286 <_malloc_r+0x192>
 8006464:	f858 0908 	ldr.w	r0, [r8], #-8
 8006468:	3b01      	subs	r3, #1
 800646a:	4540      	cmp	r0, r8
 800646c:	f43f af15 	beq.w	800629a <_malloc_r+0x1a6>
 8006470:	e71a      	b.n	80062a8 <_malloc_r+0x1b4>
 8006472:	3304      	adds	r3, #4
 8006474:	0052      	lsls	r2, r2, #1
 8006476:	4210      	tst	r0, r2
 8006478:	d0fb      	beq.n	8006472 <_malloc_r+0x37e>
 800647a:	e6fe      	b.n	800627a <_malloc_r+0x186>
 800647c:	4673      	mov	r3, lr
 800647e:	e7fa      	b.n	8006476 <_malloc_r+0x382>
 8006480:	f8d2 e000 	ldr.w	lr, [r2]
 8006484:	f1be 3fff 	cmp.w	lr, #4294967295
 8006488:	bf1b      	ittet	ne
 800648a:	eba4 0b0b 	subne.w	fp, r4, fp
 800648e:	eb0b 0200 	addne.w	r2, fp, r0
 8006492:	6014      	streq	r4, [r2, #0]
 8006494:	601a      	strne	r2, [r3, #0]
 8006496:	f014 0b07 	ands.w	fp, r4, #7
 800649a:	bf0e      	itee	eq
 800649c:	4658      	moveq	r0, fp
 800649e:	f1cb 0008 	rsbne	r0, fp, #8
 80064a2:	1824      	addne	r4, r4, r0
 80064a4:	1862      	adds	r2, r4, r1
 80064a6:	ea02 010c 	and.w	r1, r2, ip
 80064aa:	4480      	add	r8, r0
 80064ac:	eba8 0801 	sub.w	r8, r8, r1
 80064b0:	ea08 080c 	and.w	r8, r8, ip
 80064b4:	4641      	mov	r1, r8
 80064b6:	4628      	mov	r0, r5
 80064b8:	9201      	str	r2, [sp, #4]
 80064ba:	f000 fbe7 	bl	8006c8c <_sbrk_r>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	9a01      	ldr	r2, [sp, #4]
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <_malloc_r+0x474>)
 80064c4:	d107      	bne.n	80064d6 <_malloc_r+0x3e2>
 80064c6:	f1bb 0f00 	cmp.w	fp, #0
 80064ca:	d023      	beq.n	8006514 <_malloc_r+0x420>
 80064cc:	f04f 0800 	mov.w	r8, #0
 80064d0:	f1ab 0008 	sub.w	r0, fp, #8
 80064d4:	4410      	add	r0, r2
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	1b00      	subs	r0, r0, r4
 80064da:	4440      	add	r0, r8
 80064dc:	4442      	add	r2, r8
 80064de:	f040 0001 	orr.w	r0, r0, #1
 80064e2:	45b2      	cmp	sl, r6
 80064e4:	60b4      	str	r4, [r6, #8]
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	6060      	str	r0, [r4, #4]
 80064ea:	f43f af27 	beq.w	800633c <_malloc_r+0x248>
 80064ee:	f1b9 0f0f 	cmp.w	r9, #15
 80064f2:	d812      	bhi.n	800651a <_malloc_r+0x426>
 80064f4:	2301      	movs	r3, #1
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	68b3      	ldr	r3, [r6, #8]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	42bb      	cmp	r3, r7
 8006502:	eba3 0207 	sub.w	r2, r3, r7
 8006506:	d301      	bcc.n	800650c <_malloc_r+0x418>
 8006508:	2a0f      	cmp	r2, #15
 800650a:	dc22      	bgt.n	8006552 <_malloc_r+0x45e>
 800650c:	4628      	mov	r0, r5
 800650e:	f000 f84f 	bl	80065b0 <__malloc_unlock>
 8006512:	e5fb      	b.n	800610c <_malloc_r+0x18>
 8006514:	4610      	mov	r0, r2
 8006516:	46d8      	mov	r8, fp
 8006518:	e7dd      	b.n	80064d6 <_malloc_r+0x3e2>
 800651a:	2105      	movs	r1, #5
 800651c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006520:	f1a9 090c 	sub.w	r9, r9, #12
 8006524:	f029 0907 	bic.w	r9, r9, #7
 8006528:	f002 0201 	and.w	r2, r2, #1
 800652c:	ea42 0209 	orr.w	r2, r2, r9
 8006530:	f8ca 2004 	str.w	r2, [sl, #4]
 8006534:	f1b9 0f0f 	cmp.w	r9, #15
 8006538:	eb0a 0209 	add.w	r2, sl, r9
 800653c:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8006540:	f67f aefc 	bls.w	800633c <_malloc_r+0x248>
 8006544:	4628      	mov	r0, r5
 8006546:	f10a 0108 	add.w	r1, sl, #8
 800654a:	f7ff fc7f 	bl	8005e4c <_free_r>
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <_malloc_r+0x474>)
 8006550:	e6f4      	b.n	800633c <_malloc_r+0x248>
 8006552:	68b4      	ldr	r4, [r6, #8]
 8006554:	f047 0301 	orr.w	r3, r7, #1
 8006558:	f042 0201 	orr.w	r2, r2, #1
 800655c:	4427      	add	r7, r4
 800655e:	6063      	str	r3, [r4, #4]
 8006560:	60b7      	str	r7, [r6, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	e5f7      	b.n	8006156 <_malloc_r+0x62>
 8006566:	bf00      	nop
 8006568:	20000a64 	.word	0x20000a64

0800656c <memchr>:
 800656c:	4603      	mov	r3, r0
 800656e:	b510      	push	{r4, lr}
 8006570:	b2c9      	uxtb	r1, r1
 8006572:	4402      	add	r2, r0
 8006574:	4293      	cmp	r3, r2
 8006576:	4618      	mov	r0, r3
 8006578:	d101      	bne.n	800657e <memchr+0x12>
 800657a:	2000      	movs	r0, #0
 800657c:	e003      	b.n	8006586 <memchr+0x1a>
 800657e:	7804      	ldrb	r4, [r0, #0]
 8006580:	3301      	adds	r3, #1
 8006582:	428c      	cmp	r4, r1
 8006584:	d1f6      	bne.n	8006574 <memchr+0x8>
 8006586:	bd10      	pop	{r4, pc}

08006588 <memcpy>:
 8006588:	440a      	add	r2, r1
 800658a:	4291      	cmp	r1, r2
 800658c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006590:	d100      	bne.n	8006594 <memcpy+0xc>
 8006592:	4770      	bx	lr
 8006594:	b510      	push	{r4, lr}
 8006596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800659a:	4291      	cmp	r1, r2
 800659c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a0:	d1f9      	bne.n	8006596 <memcpy+0xe>
 80065a2:	bd10      	pop	{r4, pc}

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_lock+0x8>)
 80065a6:	f7ff bd37 	b.w	8006018 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000a61 	.word	0x20000a61

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f7ff bd32 	b.w	800601a <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000a61 	.word	0x20000a61

080065bc <_Balloc>:
 80065bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80065be:	b570      	push	{r4, r5, r6, lr}
 80065c0:	4605      	mov	r5, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b17b      	cbz	r3, 80065e6 <_Balloc+0x2a>
 80065c6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80065c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80065cc:	b9a0      	cbnz	r0, 80065f8 <_Balloc+0x3c>
 80065ce:	2101      	movs	r1, #1
 80065d0:	fa01 f604 	lsl.w	r6, r1, r4
 80065d4:	1d72      	adds	r2, r6, #5
 80065d6:	4628      	mov	r0, r5
 80065d8:	0092      	lsls	r2, r2, #2
 80065da:	f001 f93d 	bl	8007858 <_calloc_r>
 80065de:	b148      	cbz	r0, 80065f4 <_Balloc+0x38>
 80065e0:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80065e4:	e00b      	b.n	80065fe <_Balloc+0x42>
 80065e6:	2221      	movs	r2, #33	; 0x21
 80065e8:	2104      	movs	r1, #4
 80065ea:	f001 f935 	bl	8007858 <_calloc_r>
 80065ee:	64e8      	str	r0, [r5, #76]	; 0x4c
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d1e8      	bne.n	80065c6 <_Balloc+0xa>
 80065f4:	2000      	movs	r0, #0
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	6802      	ldr	r2, [r0, #0]
 80065fa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80065fe:	2300      	movs	r3, #0
 8006600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006604:	e7f7      	b.n	80065f6 <_Balloc+0x3a>

08006606 <_Bfree>:
 8006606:	b131      	cbz	r1, 8006616 <_Bfree+0x10>
 8006608:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800660a:	684a      	ldr	r2, [r1, #4]
 800660c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006610:	6008      	str	r0, [r1, #0]
 8006612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006616:	4770      	bx	lr

08006618 <__multadd>:
 8006618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800661c:	4607      	mov	r7, r0
 800661e:	460c      	mov	r4, r1
 8006620:	461e      	mov	r6, r3
 8006622:	2000      	movs	r0, #0
 8006624:	690d      	ldr	r5, [r1, #16]
 8006626:	f101 0c14 	add.w	ip, r1, #20
 800662a:	f8dc 3000 	ldr.w	r3, [ip]
 800662e:	3001      	adds	r0, #1
 8006630:	b299      	uxth	r1, r3
 8006632:	fb02 6101 	mla	r1, r2, r1, r6
 8006636:	0c1e      	lsrs	r6, r3, #16
 8006638:	0c0b      	lsrs	r3, r1, #16
 800663a:	fb02 3306 	mla	r3, r2, r6, r3
 800663e:	b289      	uxth	r1, r1
 8006640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006644:	4285      	cmp	r5, r0
 8006646:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800664a:	f84c 1b04 	str.w	r1, [ip], #4
 800664e:	dcec      	bgt.n	800662a <__multadd+0x12>
 8006650:	b30e      	cbz	r6, 8006696 <__multadd+0x7e>
 8006652:	68a3      	ldr	r3, [r4, #8]
 8006654:	42ab      	cmp	r3, r5
 8006656:	dc19      	bgt.n	800668c <__multadd+0x74>
 8006658:	6861      	ldr	r1, [r4, #4]
 800665a:	4638      	mov	r0, r7
 800665c:	3101      	adds	r1, #1
 800665e:	f7ff ffad 	bl	80065bc <_Balloc>
 8006662:	4680      	mov	r8, r0
 8006664:	b928      	cbnz	r0, 8006672 <__multadd+0x5a>
 8006666:	4602      	mov	r2, r0
 8006668:	21b5      	movs	r1, #181	; 0xb5
 800666a:	4b0c      	ldr	r3, [pc, #48]	; (800669c <__multadd+0x84>)
 800666c:	480c      	ldr	r0, [pc, #48]	; (80066a0 <__multadd+0x88>)
 800666e:	f001 f8d5 	bl	800781c <__assert_func>
 8006672:	6922      	ldr	r2, [r4, #16]
 8006674:	f104 010c 	add.w	r1, r4, #12
 8006678:	3202      	adds	r2, #2
 800667a:	0092      	lsls	r2, r2, #2
 800667c:	300c      	adds	r0, #12
 800667e:	f7ff ff83 	bl	8006588 <memcpy>
 8006682:	4621      	mov	r1, r4
 8006684:	4638      	mov	r0, r7
 8006686:	f7ff ffbe 	bl	8006606 <_Bfree>
 800668a:	4644      	mov	r4, r8
 800668c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006690:	3501      	adds	r5, #1
 8006692:	615e      	str	r6, [r3, #20]
 8006694:	6125      	str	r5, [r4, #16]
 8006696:	4620      	mov	r0, r4
 8006698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800669c:	080083d9 	.word	0x080083d9
 80066a0:	08008445 	.word	0x08008445

080066a4 <__hi0bits>:
 80066a4:	0c02      	lsrs	r2, r0, #16
 80066a6:	0412      	lsls	r2, r2, #16
 80066a8:	4603      	mov	r3, r0
 80066aa:	b9ca      	cbnz	r2, 80066e0 <__hi0bits+0x3c>
 80066ac:	0403      	lsls	r3, r0, #16
 80066ae:	2010      	movs	r0, #16
 80066b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066b4:	bf04      	itt	eq
 80066b6:	021b      	lsleq	r3, r3, #8
 80066b8:	3008      	addeq	r0, #8
 80066ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066be:	bf04      	itt	eq
 80066c0:	011b      	lsleq	r3, r3, #4
 80066c2:	3004      	addeq	r0, #4
 80066c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066c8:	bf04      	itt	eq
 80066ca:	009b      	lsleq	r3, r3, #2
 80066cc:	3002      	addeq	r0, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	db05      	blt.n	80066de <__hi0bits+0x3a>
 80066d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80066d6:	f100 0001 	add.w	r0, r0, #1
 80066da:	bf08      	it	eq
 80066dc:	2020      	moveq	r0, #32
 80066de:	4770      	bx	lr
 80066e0:	2000      	movs	r0, #0
 80066e2:	e7e5      	b.n	80066b0 <__hi0bits+0xc>

080066e4 <__lo0bits>:
 80066e4:	6803      	ldr	r3, [r0, #0]
 80066e6:	4602      	mov	r2, r0
 80066e8:	f013 0007 	ands.w	r0, r3, #7
 80066ec:	d00b      	beq.n	8006706 <__lo0bits+0x22>
 80066ee:	07d9      	lsls	r1, r3, #31
 80066f0:	d421      	bmi.n	8006736 <__lo0bits+0x52>
 80066f2:	0798      	lsls	r0, r3, #30
 80066f4:	bf49      	itett	mi
 80066f6:	085b      	lsrmi	r3, r3, #1
 80066f8:	089b      	lsrpl	r3, r3, #2
 80066fa:	2001      	movmi	r0, #1
 80066fc:	6013      	strmi	r3, [r2, #0]
 80066fe:	bf5c      	itt	pl
 8006700:	2002      	movpl	r0, #2
 8006702:	6013      	strpl	r3, [r2, #0]
 8006704:	4770      	bx	lr
 8006706:	b299      	uxth	r1, r3
 8006708:	b909      	cbnz	r1, 800670e <__lo0bits+0x2a>
 800670a:	2010      	movs	r0, #16
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	b2d9      	uxtb	r1, r3
 8006710:	b909      	cbnz	r1, 8006716 <__lo0bits+0x32>
 8006712:	3008      	adds	r0, #8
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	0719      	lsls	r1, r3, #28
 8006718:	bf04      	itt	eq
 800671a:	091b      	lsreq	r3, r3, #4
 800671c:	3004      	addeq	r0, #4
 800671e:	0799      	lsls	r1, r3, #30
 8006720:	bf04      	itt	eq
 8006722:	089b      	lsreq	r3, r3, #2
 8006724:	3002      	addeq	r0, #2
 8006726:	07d9      	lsls	r1, r3, #31
 8006728:	d403      	bmi.n	8006732 <__lo0bits+0x4e>
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	f100 0001 	add.w	r0, r0, #1
 8006730:	d003      	beq.n	800673a <__lo0bits+0x56>
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4770      	bx	lr
 8006736:	2000      	movs	r0, #0
 8006738:	4770      	bx	lr
 800673a:	2020      	movs	r0, #32
 800673c:	4770      	bx	lr
	...

08006740 <__i2b>:
 8006740:	b510      	push	{r4, lr}
 8006742:	460c      	mov	r4, r1
 8006744:	2101      	movs	r1, #1
 8006746:	f7ff ff39 	bl	80065bc <_Balloc>
 800674a:	4602      	mov	r2, r0
 800674c:	b928      	cbnz	r0, 800675a <__i2b+0x1a>
 800674e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <__i2b+0x24>)
 8006754:	4804      	ldr	r0, [pc, #16]	; (8006768 <__i2b+0x28>)
 8006756:	f001 f861 	bl	800781c <__assert_func>
 800675a:	2301      	movs	r3, #1
 800675c:	6144      	str	r4, [r0, #20]
 800675e:	6103      	str	r3, [r0, #16]
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	080083d9 	.word	0x080083d9
 8006768:	08008445 	.word	0x08008445

0800676c <__multiply>:
 800676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006770:	4691      	mov	r9, r2
 8006772:	690a      	ldr	r2, [r1, #16]
 8006774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006778:	460c      	mov	r4, r1
 800677a:	429a      	cmp	r2, r3
 800677c:	bfbe      	ittt	lt
 800677e:	460b      	movlt	r3, r1
 8006780:	464c      	movlt	r4, r9
 8006782:	4699      	movlt	r9, r3
 8006784:	6927      	ldr	r7, [r4, #16]
 8006786:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	eb07 060a 	add.w	r6, r7, sl
 8006792:	42b3      	cmp	r3, r6
 8006794:	b085      	sub	sp, #20
 8006796:	bfb8      	it	lt
 8006798:	3101      	addlt	r1, #1
 800679a:	f7ff ff0f 	bl	80065bc <_Balloc>
 800679e:	b930      	cbnz	r0, 80067ae <__multiply+0x42>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f240 115d 	movw	r1, #349	; 0x15d
 80067a6:	4b43      	ldr	r3, [pc, #268]	; (80068b4 <__multiply+0x148>)
 80067a8:	4843      	ldr	r0, [pc, #268]	; (80068b8 <__multiply+0x14c>)
 80067aa:	f001 f837 	bl	800781c <__assert_func>
 80067ae:	f100 0514 	add.w	r5, r0, #20
 80067b2:	462b      	mov	r3, r5
 80067b4:	2200      	movs	r2, #0
 80067b6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067ba:	4543      	cmp	r3, r8
 80067bc:	d321      	bcc.n	8006802 <__multiply+0x96>
 80067be:	f104 0314 	add.w	r3, r4, #20
 80067c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067c6:	f109 0314 	add.w	r3, r9, #20
 80067ca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	1b3a      	subs	r2, r7, r4
 80067d2:	3a15      	subs	r2, #21
 80067d4:	f022 0203 	bic.w	r2, r2, #3
 80067d8:	3204      	adds	r2, #4
 80067da:	f104 0115 	add.w	r1, r4, #21
 80067de:	428f      	cmp	r7, r1
 80067e0:	bf38      	it	cc
 80067e2:	2204      	movcc	r2, #4
 80067e4:	9201      	str	r2, [sp, #4]
 80067e6:	9a02      	ldr	r2, [sp, #8]
 80067e8:	9303      	str	r3, [sp, #12]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d80c      	bhi.n	8006808 <__multiply+0x9c>
 80067ee:	2e00      	cmp	r6, #0
 80067f0:	dd03      	ble.n	80067fa <__multiply+0x8e>
 80067f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d059      	beq.n	80068ae <__multiply+0x142>
 80067fa:	6106      	str	r6, [r0, #16]
 80067fc:	b005      	add	sp, #20
 80067fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006802:	f843 2b04 	str.w	r2, [r3], #4
 8006806:	e7d8      	b.n	80067ba <__multiply+0x4e>
 8006808:	f8b3 a000 	ldrh.w	sl, [r3]
 800680c:	f1ba 0f00 	cmp.w	sl, #0
 8006810:	d023      	beq.n	800685a <__multiply+0xee>
 8006812:	46a9      	mov	r9, r5
 8006814:	f04f 0c00 	mov.w	ip, #0
 8006818:	f104 0e14 	add.w	lr, r4, #20
 800681c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006820:	f8d9 1000 	ldr.w	r1, [r9]
 8006824:	fa1f fb82 	uxth.w	fp, r2
 8006828:	b289      	uxth	r1, r1
 800682a:	fb0a 110b 	mla	r1, sl, fp, r1
 800682e:	4461      	add	r1, ip
 8006830:	f8d9 c000 	ldr.w	ip, [r9]
 8006834:	0c12      	lsrs	r2, r2, #16
 8006836:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800683a:	fb0a c202 	mla	r2, sl, r2, ip
 800683e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006842:	b289      	uxth	r1, r1
 8006844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006848:	4577      	cmp	r7, lr
 800684a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800684e:	f849 1b04 	str.w	r1, [r9], #4
 8006852:	d8e3      	bhi.n	800681c <__multiply+0xb0>
 8006854:	9a01      	ldr	r2, [sp, #4]
 8006856:	f845 c002 	str.w	ip, [r5, r2]
 800685a:	9a03      	ldr	r2, [sp, #12]
 800685c:	3304      	adds	r3, #4
 800685e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	d020      	beq.n	80068aa <__multiply+0x13e>
 8006868:	46ae      	mov	lr, r5
 800686a:	f04f 0a00 	mov.w	sl, #0
 800686e:	6829      	ldr	r1, [r5, #0]
 8006870:	f104 0c14 	add.w	ip, r4, #20
 8006874:	f8bc b000 	ldrh.w	fp, [ip]
 8006878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800687c:	b289      	uxth	r1, r1
 800687e:	fb09 220b 	mla	r2, r9, fp, r2
 8006882:	4492      	add	sl, r2
 8006884:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006888:	f84e 1b04 	str.w	r1, [lr], #4
 800688c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006890:	f8be 1000 	ldrh.w	r1, [lr]
 8006894:	0c12      	lsrs	r2, r2, #16
 8006896:	fb09 1102 	mla	r1, r9, r2, r1
 800689a:	4567      	cmp	r7, ip
 800689c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80068a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068a4:	d8e6      	bhi.n	8006874 <__multiply+0x108>
 80068a6:	9a01      	ldr	r2, [sp, #4]
 80068a8:	50a9      	str	r1, [r5, r2]
 80068aa:	3504      	adds	r5, #4
 80068ac:	e79b      	b.n	80067e6 <__multiply+0x7a>
 80068ae:	3e01      	subs	r6, #1
 80068b0:	e79d      	b.n	80067ee <__multiply+0x82>
 80068b2:	bf00      	nop
 80068b4:	080083d9 	.word	0x080083d9
 80068b8:	08008445 	.word	0x08008445

080068bc <__pow5mult>:
 80068bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c0:	4615      	mov	r5, r2
 80068c2:	f012 0203 	ands.w	r2, r2, #3
 80068c6:	4606      	mov	r6, r0
 80068c8:	460f      	mov	r7, r1
 80068ca:	d007      	beq.n	80068dc <__pow5mult+0x20>
 80068cc:	4c1a      	ldr	r4, [pc, #104]	; (8006938 <__pow5mult+0x7c>)
 80068ce:	3a01      	subs	r2, #1
 80068d0:	2300      	movs	r3, #0
 80068d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068d6:	f7ff fe9f 	bl	8006618 <__multadd>
 80068da:	4607      	mov	r7, r0
 80068dc:	10ad      	asrs	r5, r5, #2
 80068de:	d027      	beq.n	8006930 <__pow5mult+0x74>
 80068e0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80068e2:	b944      	cbnz	r4, 80068f6 <__pow5mult+0x3a>
 80068e4:	f240 2171 	movw	r1, #625	; 0x271
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ff29 	bl	8006740 <__i2b>
 80068ee:	2300      	movs	r3, #0
 80068f0:	4604      	mov	r4, r0
 80068f2:	64b0      	str	r0, [r6, #72]	; 0x48
 80068f4:	6003      	str	r3, [r0, #0]
 80068f6:	f04f 0900 	mov.w	r9, #0
 80068fa:	07eb      	lsls	r3, r5, #31
 80068fc:	d50a      	bpl.n	8006914 <__pow5mult+0x58>
 80068fe:	4639      	mov	r1, r7
 8006900:	4622      	mov	r2, r4
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ff32 	bl	800676c <__multiply>
 8006908:	4680      	mov	r8, r0
 800690a:	4639      	mov	r1, r7
 800690c:	4630      	mov	r0, r6
 800690e:	f7ff fe7a 	bl	8006606 <_Bfree>
 8006912:	4647      	mov	r7, r8
 8006914:	106d      	asrs	r5, r5, #1
 8006916:	d00b      	beq.n	8006930 <__pow5mult+0x74>
 8006918:	6820      	ldr	r0, [r4, #0]
 800691a:	b938      	cbnz	r0, 800692c <__pow5mult+0x70>
 800691c:	4622      	mov	r2, r4
 800691e:	4621      	mov	r1, r4
 8006920:	4630      	mov	r0, r6
 8006922:	f7ff ff23 	bl	800676c <__multiply>
 8006926:	6020      	str	r0, [r4, #0]
 8006928:	f8c0 9000 	str.w	r9, [r0]
 800692c:	4604      	mov	r4, r0
 800692e:	e7e4      	b.n	80068fa <__pow5mult+0x3e>
 8006930:	4638      	mov	r0, r7
 8006932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006936:	bf00      	nop
 8006938:	08008598 	.word	0x08008598

0800693c <__lshift>:
 800693c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006940:	460c      	mov	r4, r1
 8006942:	4607      	mov	r7, r0
 8006944:	4691      	mov	r9, r2
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	6849      	ldr	r1, [r1, #4]
 800694a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006954:	f108 0601 	add.w	r6, r8, #1
 8006958:	42b3      	cmp	r3, r6
 800695a:	db0b      	blt.n	8006974 <__lshift+0x38>
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff fe2d 	bl	80065bc <_Balloc>
 8006962:	4605      	mov	r5, r0
 8006964:	b948      	cbnz	r0, 800697a <__lshift+0x3e>
 8006966:	4602      	mov	r2, r0
 8006968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800696c:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <__lshift+0xd8>)
 800696e:	482a      	ldr	r0, [pc, #168]	; (8006a18 <__lshift+0xdc>)
 8006970:	f000 ff54 	bl	800781c <__assert_func>
 8006974:	3101      	adds	r1, #1
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	e7ee      	b.n	8006958 <__lshift+0x1c>
 800697a:	2300      	movs	r3, #0
 800697c:	f100 0114 	add.w	r1, r0, #20
 8006980:	f100 0210 	add.w	r2, r0, #16
 8006984:	4618      	mov	r0, r3
 8006986:	4553      	cmp	r3, sl
 8006988:	db37      	blt.n	80069fa <__lshift+0xbe>
 800698a:	6920      	ldr	r0, [r4, #16]
 800698c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006990:	f104 0314 	add.w	r3, r4, #20
 8006994:	f019 091f 	ands.w	r9, r9, #31
 8006998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800699c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80069a0:	d02f      	beq.n	8006a02 <__lshift+0xc6>
 80069a2:	468a      	mov	sl, r1
 80069a4:	f04f 0c00 	mov.w	ip, #0
 80069a8:	f1c9 0e20 	rsb	lr, r9, #32
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	fa02 f209 	lsl.w	r2, r2, r9
 80069b2:	ea42 020c 	orr.w	r2, r2, ip
 80069b6:	f84a 2b04 	str.w	r2, [sl], #4
 80069ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80069be:	4298      	cmp	r0, r3
 80069c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80069c4:	d8f2      	bhi.n	80069ac <__lshift+0x70>
 80069c6:	1b03      	subs	r3, r0, r4
 80069c8:	3b15      	subs	r3, #21
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	3304      	adds	r3, #4
 80069d0:	f104 0215 	add.w	r2, r4, #21
 80069d4:	4290      	cmp	r0, r2
 80069d6:	bf38      	it	cc
 80069d8:	2304      	movcc	r3, #4
 80069da:	f841 c003 	str.w	ip, [r1, r3]
 80069de:	f1bc 0f00 	cmp.w	ip, #0
 80069e2:	d001      	beq.n	80069e8 <__lshift+0xac>
 80069e4:	f108 0602 	add.w	r6, r8, #2
 80069e8:	3e01      	subs	r6, #1
 80069ea:	4638      	mov	r0, r7
 80069ec:	4621      	mov	r1, r4
 80069ee:	612e      	str	r6, [r5, #16]
 80069f0:	f7ff fe09 	bl	8006606 <_Bfree>
 80069f4:	4628      	mov	r0, r5
 80069f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80069fe:	3301      	adds	r3, #1
 8006a00:	e7c1      	b.n	8006986 <__lshift+0x4a>
 8006a02:	3904      	subs	r1, #4
 8006a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a0e:	d8f9      	bhi.n	8006a04 <__lshift+0xc8>
 8006a10:	e7ea      	b.n	80069e8 <__lshift+0xac>
 8006a12:	bf00      	nop
 8006a14:	080083d9 	.word	0x080083d9
 8006a18:	08008445 	.word	0x08008445

08006a1c <__mcmp>:
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	690a      	ldr	r2, [r1, #16]
 8006a20:	6900      	ldr	r0, [r0, #16]
 8006a22:	b530      	push	{r4, r5, lr}
 8006a24:	1a80      	subs	r0, r0, r2
 8006a26:	d10d      	bne.n	8006a44 <__mcmp+0x28>
 8006a28:	3314      	adds	r3, #20
 8006a2a:	3114      	adds	r1, #20
 8006a2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a3c:	4295      	cmp	r5, r2
 8006a3e:	d002      	beq.n	8006a46 <__mcmp+0x2a>
 8006a40:	d304      	bcc.n	8006a4c <__mcmp+0x30>
 8006a42:	2001      	movs	r0, #1
 8006a44:	bd30      	pop	{r4, r5, pc}
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	d3f4      	bcc.n	8006a34 <__mcmp+0x18>
 8006a4a:	e7fb      	b.n	8006a44 <__mcmp+0x28>
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	e7f8      	b.n	8006a44 <__mcmp+0x28>
	...

08006a54 <__mdiff>:
 8006a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	460d      	mov	r5, r1
 8006a5a:	4607      	mov	r7, r0
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	4628      	mov	r0, r5
 8006a60:	4614      	mov	r4, r2
 8006a62:	f7ff ffdb 	bl	8006a1c <__mcmp>
 8006a66:	1e06      	subs	r6, r0, #0
 8006a68:	d111      	bne.n	8006a8e <__mdiff+0x3a>
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f7ff fda5 	bl	80065bc <_Balloc>
 8006a72:	4602      	mov	r2, r0
 8006a74:	b928      	cbnz	r0, 8006a82 <__mdiff+0x2e>
 8006a76:	f240 2132 	movw	r1, #562	; 0x232
 8006a7a:	4b3a      	ldr	r3, [pc, #232]	; (8006b64 <__mdiff+0x110>)
 8006a7c:	483a      	ldr	r0, [pc, #232]	; (8006b68 <__mdiff+0x114>)
 8006a7e:	f000 fecd 	bl	800781c <__assert_func>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006a88:	4610      	mov	r0, r2
 8006a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8e:	bfa4      	itt	ge
 8006a90:	4623      	movge	r3, r4
 8006a92:	462c      	movge	r4, r5
 8006a94:	4638      	mov	r0, r7
 8006a96:	6861      	ldr	r1, [r4, #4]
 8006a98:	bfa6      	itte	ge
 8006a9a:	461d      	movge	r5, r3
 8006a9c:	2600      	movge	r6, #0
 8006a9e:	2601      	movlt	r6, #1
 8006aa0:	f7ff fd8c 	bl	80065bc <_Balloc>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	b918      	cbnz	r0, 8006ab0 <__mdiff+0x5c>
 8006aa8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006aac:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <__mdiff+0x110>)
 8006aae:	e7e5      	b.n	8006a7c <__mdiff+0x28>
 8006ab0:	f102 0814 	add.w	r8, r2, #20
 8006ab4:	46c2      	mov	sl, r8
 8006ab6:	f04f 0c00 	mov.w	ip, #0
 8006aba:	6927      	ldr	r7, [r4, #16]
 8006abc:	60c6      	str	r6, [r0, #12]
 8006abe:	692e      	ldr	r6, [r5, #16]
 8006ac0:	f104 0014 	add.w	r0, r4, #20
 8006ac4:	f105 0914 	add.w	r9, r5, #20
 8006ac8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006acc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006ad0:	3410      	adds	r4, #16
 8006ad2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006ad6:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ada:	fa1f f18b 	uxth.w	r1, fp
 8006ade:	448c      	add	ip, r1
 8006ae0:	b299      	uxth	r1, r3
 8006ae2:	0c1b      	lsrs	r3, r3, #16
 8006ae4:	ebac 0101 	sub.w	r1, ip, r1
 8006ae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006aec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006af0:	b289      	uxth	r1, r1
 8006af2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006af6:	454e      	cmp	r6, r9
 8006af8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006afc:	f84a 3b04 	str.w	r3, [sl], #4
 8006b00:	d8e7      	bhi.n	8006ad2 <__mdiff+0x7e>
 8006b02:	1b73      	subs	r3, r6, r5
 8006b04:	3b15      	subs	r3, #21
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	3515      	adds	r5, #21
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	42ae      	cmp	r6, r5
 8006b10:	bf38      	it	cc
 8006b12:	2304      	movcc	r3, #4
 8006b14:	4418      	add	r0, r3
 8006b16:	4443      	add	r3, r8
 8006b18:	461e      	mov	r6, r3
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4575      	cmp	r5, lr
 8006b1e:	d30e      	bcc.n	8006b3e <__mdiff+0xea>
 8006b20:	f10e 0103 	add.w	r1, lr, #3
 8006b24:	1a09      	subs	r1, r1, r0
 8006b26:	f021 0103 	bic.w	r1, r1, #3
 8006b2a:	3803      	subs	r0, #3
 8006b2c:	4586      	cmp	lr, r0
 8006b2e:	bf38      	it	cc
 8006b30:	2100      	movcc	r1, #0
 8006b32:	4419      	add	r1, r3
 8006b34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006b38:	b18b      	cbz	r3, 8006b5e <__mdiff+0x10a>
 8006b3a:	6117      	str	r7, [r2, #16]
 8006b3c:	e7a4      	b.n	8006a88 <__mdiff+0x34>
 8006b3e:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b42:	fa1f f188 	uxth.w	r1, r8
 8006b46:	4461      	add	r1, ip
 8006b48:	140c      	asrs	r4, r1, #16
 8006b4a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b4e:	b289      	uxth	r1, r1
 8006b50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b54:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006b58:	f846 1b04 	str.w	r1, [r6], #4
 8006b5c:	e7de      	b.n	8006b1c <__mdiff+0xc8>
 8006b5e:	3f01      	subs	r7, #1
 8006b60:	e7e8      	b.n	8006b34 <__mdiff+0xe0>
 8006b62:	bf00      	nop
 8006b64:	080083d9 	.word	0x080083d9
 8006b68:	08008445 	.word	0x08008445

08006b6c <__d2b>:
 8006b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b70:	2101      	movs	r1, #1
 8006b72:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006b76:	4690      	mov	r8, r2
 8006b78:	461d      	mov	r5, r3
 8006b7a:	f7ff fd1f 	bl	80065bc <_Balloc>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	b930      	cbnz	r0, 8006b90 <__d2b+0x24>
 8006b82:	4602      	mov	r2, r0
 8006b84:	f240 310a 	movw	r1, #778	; 0x30a
 8006b88:	4b24      	ldr	r3, [pc, #144]	; (8006c1c <__d2b+0xb0>)
 8006b8a:	4825      	ldr	r0, [pc, #148]	; (8006c20 <__d2b+0xb4>)
 8006b8c:	f000 fe46 	bl	800781c <__assert_func>
 8006b90:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006b94:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006b98:	bb2d      	cbnz	r5, 8006be6 <__d2b+0x7a>
 8006b9a:	9301      	str	r3, [sp, #4]
 8006b9c:	f1b8 0300 	subs.w	r3, r8, #0
 8006ba0:	d026      	beq.n	8006bf0 <__d2b+0x84>
 8006ba2:	4668      	mov	r0, sp
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	f7ff fd9d 	bl	80066e4 <__lo0bits>
 8006baa:	9900      	ldr	r1, [sp, #0]
 8006bac:	b1f0      	cbz	r0, 8006bec <__d2b+0x80>
 8006bae:	9a01      	ldr	r2, [sp, #4]
 8006bb0:	f1c0 0320 	rsb	r3, r0, #32
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	430b      	orrs	r3, r1
 8006bba:	40c2      	lsrs	r2, r0
 8006bbc:	6163      	str	r3, [r4, #20]
 8006bbe:	9201      	str	r2, [sp, #4]
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf14      	ite	ne
 8006bc6:	2102      	movne	r1, #2
 8006bc8:	2101      	moveq	r1, #1
 8006bca:	61a3      	str	r3, [r4, #24]
 8006bcc:	6121      	str	r1, [r4, #16]
 8006bce:	b1c5      	cbz	r5, 8006c02 <__d2b+0x96>
 8006bd0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006bd4:	4405      	add	r5, r0
 8006bd6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006bda:	603d      	str	r5, [r7, #0]
 8006bdc:	6030      	str	r0, [r6, #0]
 8006bde:	4620      	mov	r0, r4
 8006be0:	b002      	add	sp, #8
 8006be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bea:	e7d6      	b.n	8006b9a <__d2b+0x2e>
 8006bec:	6161      	str	r1, [r4, #20]
 8006bee:	e7e7      	b.n	8006bc0 <__d2b+0x54>
 8006bf0:	a801      	add	r0, sp, #4
 8006bf2:	f7ff fd77 	bl	80066e4 <__lo0bits>
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	9b01      	ldr	r3, [sp, #4]
 8006bfa:	6121      	str	r1, [r4, #16]
 8006bfc:	6163      	str	r3, [r4, #20]
 8006bfe:	3020      	adds	r0, #32
 8006c00:	e7e5      	b.n	8006bce <__d2b+0x62>
 8006c02:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006c06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c0a:	6038      	str	r0, [r7, #0]
 8006c0c:	6918      	ldr	r0, [r3, #16]
 8006c0e:	f7ff fd49 	bl	80066a4 <__hi0bits>
 8006c12:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006c16:	6031      	str	r1, [r6, #0]
 8006c18:	e7e1      	b.n	8006bde <__d2b+0x72>
 8006c1a:	bf00      	nop
 8006c1c:	080083d9 	.word	0x080083d9
 8006c20:	08008445 	.word	0x08008445

08006c24 <frexp>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	4617      	mov	r7, r2
 8006c28:	2200      	movs	r2, #0
 8006c2a:	603a      	str	r2, [r7, #0]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <frexp+0x5c>)
 8006c2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006c32:	4296      	cmp	r6, r2
 8006c34:	4604      	mov	r4, r0
 8006c36:	460d      	mov	r5, r1
 8006c38:	460b      	mov	r3, r1
 8006c3a:	dc1e      	bgt.n	8006c7a <frexp+0x56>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4332      	orrs	r2, r6
 8006c40:	d01b      	beq.n	8006c7a <frexp+0x56>
 8006c42:	4a10      	ldr	r2, [pc, #64]	; (8006c84 <frexp+0x60>)
 8006c44:	400a      	ands	r2, r1
 8006c46:	b952      	cbnz	r2, 8006c5e <frexp+0x3a>
 8006c48:	2200      	movs	r2, #0
 8006c4a:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <frexp+0x64>)
 8006c4c:	f7f9 fc3c 	bl	80004c8 <__aeabi_dmul>
 8006c50:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8006c54:	4604      	mov	r4, r0
 8006c56:	460b      	mov	r3, r1
 8006c58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006c5c:	603a      	str	r2, [r7, #0]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	1536      	asrs	r6, r6, #20
 8006c62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006c66:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8006c6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c6e:	4416      	add	r6, r2
 8006c70:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006c74:	603e      	str	r6, [r7, #0]
 8006c76:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c80:	7fefffff 	.word	0x7fefffff
 8006c84:	7ff00000 	.word	0x7ff00000
 8006c88:	43500000 	.word	0x43500000

08006c8c <_sbrk_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4d05      	ldr	r5, [pc, #20]	; (8006ca8 <_sbrk_r+0x1c>)
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7fa feb0 	bl	80019fc <_sbrk>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_sbrk_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_sbrk_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20000a98 	.word	0x20000a98

08006cac <__sread>:
 8006cac:	b510      	push	{r4, lr}
 8006cae:	460c      	mov	r4, r1
 8006cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb4:	f001 f898 	bl	8007de8 <_read_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	bfab      	itete	ge
 8006cbc:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8006cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8006cc0:	181b      	addge	r3, r3, r0
 8006cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cc6:	bfac      	ite	ge
 8006cc8:	6523      	strge	r3, [r4, #80]	; 0x50
 8006cca:	81a3      	strhlt	r3, [r4, #12]
 8006ccc:	bd10      	pop	{r4, pc}

08006cce <__swrite>:
 8006cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	461f      	mov	r7, r3
 8006cd4:	898b      	ldrh	r3, [r1, #12]
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	05db      	lsls	r3, r3, #23
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4616      	mov	r6, r2
 8006cde:	d505      	bpl.n	8006cec <__swrite+0x1e>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f001 f840 	bl	8007d6c <_lseek_r>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	4632      	mov	r2, r6
 8006cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d02:	f000 bd37 	b.w	8007774 <_write_r>

08006d06 <__sseek>:
 8006d06:	b510      	push	{r4, lr}
 8006d08:	460c      	mov	r4, r1
 8006d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0e:	f001 f82d 	bl	8007d6c <_lseek_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	89a3      	ldrh	r3, [r4, #12]
 8006d16:	bf15      	itete	ne
 8006d18:	6520      	strne	r0, [r4, #80]	; 0x50
 8006d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d22:	81a3      	strheq	r3, [r4, #12]
 8006d24:	bf18      	it	ne
 8006d26:	81a3      	strhne	r3, [r4, #12]
 8006d28:	bd10      	pop	{r4, pc}

08006d2a <__sclose>:
 8006d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2e:	f000 bdc9 	b.w	80078c4 <_close_r>

08006d32 <strncpy>:
 8006d32:	4603      	mov	r3, r0
 8006d34:	b510      	push	{r4, lr}
 8006d36:	3901      	subs	r1, #1
 8006d38:	b132      	cbz	r2, 8006d48 <strncpy+0x16>
 8006d3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	f803 4b01 	strb.w	r4, [r3], #1
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	d1f7      	bne.n	8006d38 <strncpy+0x6>
 8006d48:	2100      	movs	r1, #0
 8006d4a:	441a      	add	r2, r3
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d100      	bne.n	8006d52 <strncpy+0x20>
 8006d50:	bd10      	pop	{r4, pc}
 8006d52:	f803 1b01 	strb.w	r1, [r3], #1
 8006d56:	e7f9      	b.n	8006d4c <strncpy+0x1a>

08006d58 <sysconf>:
 8006d58:	2808      	cmp	r0, #8
 8006d5a:	b508      	push	{r3, lr}
 8006d5c:	d006      	beq.n	8006d6c <sysconf+0x14>
 8006d5e:	f7fc fda3 	bl	80038a8 <__errno>
 8006d62:	2316      	movs	r3, #22
 8006d64:	6003      	str	r3, [r0, #0]
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	bd08      	pop	{r3, pc}
 8006d6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006d70:	e7fb      	b.n	8006d6a <sysconf+0x12>

08006d72 <__sprint_r>:
 8006d72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	6893      	ldr	r3, [r2, #8]
 8006d78:	4680      	mov	r8, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	b91b      	cbnz	r3, 8006d88 <__sprint_r+0x16>
 8006d80:	4618      	mov	r0, r3
 8006d82:	6053      	str	r3, [r2, #4]
 8006d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006d8a:	049d      	lsls	r5, r3, #18
 8006d8c:	d520      	bpl.n	8006dd0 <__sprint_r+0x5e>
 8006d8e:	6815      	ldr	r5, [r2, #0]
 8006d90:	3508      	adds	r5, #8
 8006d92:	f04f 0900 	mov.w	r9, #0
 8006d96:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8006d9a:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8006d9e:	45ca      	cmp	sl, r9
 8006da0:	dc0b      	bgt.n	8006dba <__sprint_r+0x48>
 8006da2:	68a0      	ldr	r0, [r4, #8]
 8006da4:	f026 0603 	bic.w	r6, r6, #3
 8006da8:	1b80      	subs	r0, r0, r6
 8006daa:	60a0      	str	r0, [r4, #8]
 8006dac:	3508      	adds	r5, #8
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1ef      	bne.n	8006d92 <__sprint_r+0x20>
 8006db2:	2300      	movs	r3, #0
 8006db4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8006db8:	e7e4      	b.n	8006d84 <__sprint_r+0x12>
 8006dba:	463a      	mov	r2, r7
 8006dbc:	4640      	mov	r0, r8
 8006dbe:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8006dc2:	f000 fe3a 	bl	8007a3a <_fputwc_r>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	d0f3      	beq.n	8006db2 <__sprint_r+0x40>
 8006dca:	f109 0901 	add.w	r9, r9, #1
 8006dce:	e7e6      	b.n	8006d9e <__sprint_r+0x2c>
 8006dd0:	f000 fe6e 	bl	8007ab0 <__sfvwrite_r>
 8006dd4:	e7ed      	b.n	8006db2 <__sprint_r+0x40>
	...

08006dd8 <_vfiprintf_r>:
 8006dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ddc:	b0bb      	sub	sp, #236	; 0xec
 8006dde:	460f      	mov	r7, r1
 8006de0:	461d      	mov	r5, r3
 8006de2:	461c      	mov	r4, r3
 8006de4:	4681      	mov	r9, r0
 8006de6:	9202      	str	r2, [sp, #8]
 8006de8:	b118      	cbz	r0, 8006df2 <_vfiprintf_r+0x1a>
 8006dea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006dec:	b90b      	cbnz	r3, 8006df2 <_vfiprintf_r+0x1a>
 8006dee:	f7fe ff9d 	bl	8005d2c <__sinit>
 8006df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006df4:	07d8      	lsls	r0, r3, #31
 8006df6:	d405      	bmi.n	8006e04 <_vfiprintf_r+0x2c>
 8006df8:	89bb      	ldrh	r3, [r7, #12]
 8006dfa:	0599      	lsls	r1, r3, #22
 8006dfc:	d402      	bmi.n	8006e04 <_vfiprintf_r+0x2c>
 8006dfe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006e00:	f7ff f90a 	bl	8006018 <__retarget_lock_acquire_recursive>
 8006e04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e08:	049a      	lsls	r2, r3, #18
 8006e0a:	d406      	bmi.n	8006e1a <_vfiprintf_r+0x42>
 8006e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e10:	81bb      	strh	r3, [r7, #12]
 8006e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e18:	667b      	str	r3, [r7, #100]	; 0x64
 8006e1a:	89bb      	ldrh	r3, [r7, #12]
 8006e1c:	071e      	lsls	r6, r3, #28
 8006e1e:	d501      	bpl.n	8006e24 <_vfiprintf_r+0x4c>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	b9ab      	cbnz	r3, 8006e50 <_vfiprintf_r+0x78>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4648      	mov	r0, r9
 8006e28:	f7fd ffe0 	bl	8004dec <__swsetup_r>
 8006e2c:	b180      	cbz	r0, 8006e50 <_vfiprintf_r+0x78>
 8006e2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e30:	07d8      	lsls	r0, r3, #31
 8006e32:	d506      	bpl.n	8006e42 <_vfiprintf_r+0x6a>
 8006e34:	f04f 33ff 	mov.w	r3, #4294967295
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	9803      	ldr	r0, [sp, #12]
 8006e3c:	b03b      	add	sp, #236	; 0xec
 8006e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e42:	89bb      	ldrh	r3, [r7, #12]
 8006e44:	0599      	lsls	r1, r3, #22
 8006e46:	d4f5      	bmi.n	8006e34 <_vfiprintf_r+0x5c>
 8006e48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006e4a:	f7ff f8e6 	bl	800601a <__retarget_lock_release_recursive>
 8006e4e:	e7f1      	b.n	8006e34 <_vfiprintf_r+0x5c>
 8006e50:	89bb      	ldrh	r3, [r7, #12]
 8006e52:	f003 021a 	and.w	r2, r3, #26
 8006e56:	2a0a      	cmp	r2, #10
 8006e58:	d114      	bne.n	8006e84 <_vfiprintf_r+0xac>
 8006e5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	db10      	blt.n	8006e84 <_vfiprintf_r+0xac>
 8006e62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e64:	07d2      	lsls	r2, r2, #31
 8006e66:	d404      	bmi.n	8006e72 <_vfiprintf_r+0x9a>
 8006e68:	059e      	lsls	r6, r3, #22
 8006e6a:	d402      	bmi.n	8006e72 <_vfiprintf_r+0x9a>
 8006e6c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006e6e:	f7ff f8d4 	bl	800601a <__retarget_lock_release_recursive>
 8006e72:	462b      	mov	r3, r5
 8006e74:	4639      	mov	r1, r7
 8006e76:	4648      	mov	r0, r9
 8006e78:	9a02      	ldr	r2, [sp, #8]
 8006e7a:	b03b      	add	sp, #236	; 0xec
 8006e7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e80:	f000 bc38 	b.w	80076f4 <__sbprintf>
 8006e84:	2300      	movs	r3, #0
 8006e86:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8006e8a:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006e8e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8006e92:	ae11      	add	r6, sp, #68	; 0x44
 8006e94:	960e      	str	r6, [sp, #56]	; 0x38
 8006e96:	9303      	str	r3, [sp, #12]
 8006e98:	9b02      	ldr	r3, [sp, #8]
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea0:	b10a      	cbz	r2, 8006ea6 <_vfiprintf_r+0xce>
 8006ea2:	2a25      	cmp	r2, #37	; 0x25
 8006ea4:	d1f9      	bne.n	8006e9a <_vfiprintf_r+0xc2>
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	ebb5 0803 	subs.w	r8, r5, r3
 8006eac:	d00d      	beq.n	8006eca <_vfiprintf_r+0xf2>
 8006eae:	e9c6 3800 	strd	r3, r8, [r6]
 8006eb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb4:	4443      	add	r3, r8
 8006eb6:	9310      	str	r3, [sp, #64]	; 0x40
 8006eb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006eba:	3301      	adds	r3, #1
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ec0:	dc75      	bgt.n	8006fae <_vfiprintf_r+0x1d6>
 8006ec2:	3608      	adds	r6, #8
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	4443      	add	r3, r8
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	782b      	ldrb	r3, [r5, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 83d5 	beq.w	800767c <_vfiprintf_r+0x8a4>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed8:	469a      	mov	sl, r3
 8006eda:	1c6a      	adds	r2, r5, #1
 8006edc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8006ee0:	9101      	str	r1, [sp, #4]
 8006ee2:	9304      	str	r3, [sp, #16]
 8006ee4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	f1a3 0220 	sub.w	r2, r3, #32
 8006eee:	2a5a      	cmp	r2, #90	; 0x5a
 8006ef0:	f200 831d 	bhi.w	800752e <_vfiprintf_r+0x756>
 8006ef4:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006ef8:	031b009a 	.word	0x031b009a
 8006efc:	00a2031b 	.word	0x00a2031b
 8006f00:	031b031b 	.word	0x031b031b
 8006f04:	0082031b 	.word	0x0082031b
 8006f08:	031b031b 	.word	0x031b031b
 8006f0c:	00af00a5 	.word	0x00af00a5
 8006f10:	00ac031b 	.word	0x00ac031b
 8006f14:	031b00b1 	.word	0x031b00b1
 8006f18:	00cf00cc 	.word	0x00cf00cc
 8006f1c:	00cf00cf 	.word	0x00cf00cf
 8006f20:	00cf00cf 	.word	0x00cf00cf
 8006f24:	00cf00cf 	.word	0x00cf00cf
 8006f28:	00cf00cf 	.word	0x00cf00cf
 8006f2c:	031b031b 	.word	0x031b031b
 8006f30:	031b031b 	.word	0x031b031b
 8006f34:	031b031b 	.word	0x031b031b
 8006f38:	031b031b 	.word	0x031b031b
 8006f3c:	00f9031b 	.word	0x00f9031b
 8006f40:	031b0107 	.word	0x031b0107
 8006f44:	031b031b 	.word	0x031b031b
 8006f48:	031b031b 	.word	0x031b031b
 8006f4c:	031b031b 	.word	0x031b031b
 8006f50:	031b031b 	.word	0x031b031b
 8006f54:	0156031b 	.word	0x0156031b
 8006f58:	031b031b 	.word	0x031b031b
 8006f5c:	01a0031b 	.word	0x01a0031b
 8006f60:	027d031b 	.word	0x027d031b
 8006f64:	031b031b 	.word	0x031b031b
 8006f68:	031b029d 	.word	0x031b029d
 8006f6c:	031b031b 	.word	0x031b031b
 8006f70:	031b031b 	.word	0x031b031b
 8006f74:	031b031b 	.word	0x031b031b
 8006f78:	031b031b 	.word	0x031b031b
 8006f7c:	00f9031b 	.word	0x00f9031b
 8006f80:	031b0109 	.word	0x031b0109
 8006f84:	031b031b 	.word	0x031b031b
 8006f88:	010900df 	.word	0x010900df
 8006f8c:	031b00f3 	.word	0x031b00f3
 8006f90:	031b00ec 	.word	0x031b00ec
 8006f94:	01580134 	.word	0x01580134
 8006f98:	00f3018d 	.word	0x00f3018d
 8006f9c:	01a0031b 	.word	0x01a0031b
 8006fa0:	027f0098 	.word	0x027f0098
 8006fa4:	031b031b 	.word	0x031b031b
 8006fa8:	031b0065 	.word	0x031b0065
 8006fac:	0098      	.short	0x0098
 8006fae:	4639      	mov	r1, r7
 8006fb0:	4648      	mov	r0, r9
 8006fb2:	aa0e      	add	r2, sp, #56	; 0x38
 8006fb4:	f7ff fedd 	bl	8006d72 <__sprint_r>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f040 833e 	bne.w	800763a <_vfiprintf_r+0x862>
 8006fbe:	ae11      	add	r6, sp, #68	; 0x44
 8006fc0:	e780      	b.n	8006ec4 <_vfiprintf_r+0xec>
 8006fc2:	4a9c      	ldr	r2, [pc, #624]	; (8007234 <_vfiprintf_r+0x45c>)
 8006fc4:	9206      	str	r2, [sp, #24]
 8006fc6:	f01a 0220 	ands.w	r2, sl, #32
 8006fca:	f000 8234 	beq.w	8007436 <_vfiprintf_r+0x65e>
 8006fce:	3407      	adds	r4, #7
 8006fd0:	f024 0207 	bic.w	r2, r4, #7
 8006fd4:	4693      	mov	fp, r2
 8006fd6:	6855      	ldr	r5, [r2, #4]
 8006fd8:	f85b 4b08 	ldr.w	r4, [fp], #8
 8006fdc:	f01a 0f01 	tst.w	sl, #1
 8006fe0:	d009      	beq.n	8006ff6 <_vfiprintf_r+0x21e>
 8006fe2:	ea54 0205 	orrs.w	r2, r4, r5
 8006fe6:	bf1f      	itttt	ne
 8006fe8:	2230      	movne	r2, #48	; 0x30
 8006fea:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8006fee:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8006ff2:	f04a 0a02 	orrne.w	sl, sl, #2
 8006ff6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006ffa:	e118      	b.n	800722e <_vfiprintf_r+0x456>
 8006ffc:	4648      	mov	r0, r9
 8006ffe:	f7ff f805 	bl	800600c <_localeconv_r>
 8007002:	6843      	ldr	r3, [r0, #4]
 8007004:	4618      	mov	r0, r3
 8007006:	9309      	str	r3, [sp, #36]	; 0x24
 8007008:	f7f9 fdce 	bl	8000ba8 <strlen>
 800700c:	9008      	str	r0, [sp, #32]
 800700e:	4648      	mov	r0, r9
 8007010:	f7fe fffc 	bl	800600c <_localeconv_r>
 8007014:	6883      	ldr	r3, [r0, #8]
 8007016:	9307      	str	r3, [sp, #28]
 8007018:	9b08      	ldr	r3, [sp, #32]
 800701a:	b12b      	cbz	r3, 8007028 <_vfiprintf_r+0x250>
 800701c:	9b07      	ldr	r3, [sp, #28]
 800701e:	b11b      	cbz	r3, 8007028 <_vfiprintf_r+0x250>
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b10b      	cbz	r3, 8007028 <_vfiprintf_r+0x250>
 8007024:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8007028:	9a02      	ldr	r2, [sp, #8]
 800702a:	e75b      	b.n	8006ee4 <_vfiprintf_r+0x10c>
 800702c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1f9      	bne.n	8007028 <_vfiprintf_r+0x250>
 8007034:	2320      	movs	r3, #32
 8007036:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800703a:	e7f5      	b.n	8007028 <_vfiprintf_r+0x250>
 800703c:	f04a 0a01 	orr.w	sl, sl, #1
 8007040:	e7f2      	b.n	8007028 <_vfiprintf_r+0x250>
 8007042:	f854 3b04 	ldr.w	r3, [r4], #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	9304      	str	r3, [sp, #16]
 800704a:	daed      	bge.n	8007028 <_vfiprintf_r+0x250>
 800704c:	425b      	negs	r3, r3
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	f04a 0a04 	orr.w	sl, sl, #4
 8007054:	e7e8      	b.n	8007028 <_vfiprintf_r+0x250>
 8007056:	232b      	movs	r3, #43	; 0x2b
 8007058:	e7ed      	b.n	8007036 <_vfiprintf_r+0x25e>
 800705a:	9a02      	ldr	r2, [sp, #8]
 800705c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007060:	2b2a      	cmp	r3, #42	; 0x2a
 8007062:	d112      	bne.n	800708a <_vfiprintf_r+0x2b2>
 8007064:	f854 0b04 	ldr.w	r0, [r4], #4
 8007068:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800706c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007070:	e7da      	b.n	8007028 <_vfiprintf_r+0x250>
 8007072:	200a      	movs	r0, #10
 8007074:	9b01      	ldr	r3, [sp, #4]
 8007076:	fb00 1303 	mla	r3, r0, r3, r1
 800707a:	9301      	str	r3, [sp, #4]
 800707c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007080:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007084:	2909      	cmp	r1, #9
 8007086:	d9f4      	bls.n	8007072 <_vfiprintf_r+0x29a>
 8007088:	e72e      	b.n	8006ee8 <_vfiprintf_r+0x110>
 800708a:	2100      	movs	r1, #0
 800708c:	9101      	str	r1, [sp, #4]
 800708e:	e7f7      	b.n	8007080 <_vfiprintf_r+0x2a8>
 8007090:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8007094:	e7c8      	b.n	8007028 <_vfiprintf_r+0x250>
 8007096:	2100      	movs	r1, #0
 8007098:	9a02      	ldr	r2, [sp, #8]
 800709a:	9104      	str	r1, [sp, #16]
 800709c:	200a      	movs	r0, #10
 800709e:	9904      	ldr	r1, [sp, #16]
 80070a0:	3b30      	subs	r3, #48	; 0x30
 80070a2:	fb00 3301 	mla	r3, r0, r1, r3
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80070ac:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070b0:	2909      	cmp	r1, #9
 80070b2:	d9f3      	bls.n	800709c <_vfiprintf_r+0x2c4>
 80070b4:	e718      	b.n	8006ee8 <_vfiprintf_r+0x110>
 80070b6:	9b02      	ldr	r3, [sp, #8]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b68      	cmp	r3, #104	; 0x68
 80070bc:	bf01      	itttt	eq
 80070be:	9b02      	ldreq	r3, [sp, #8]
 80070c0:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80070c4:	3301      	addeq	r3, #1
 80070c6:	9302      	streq	r3, [sp, #8]
 80070c8:	bf18      	it	ne
 80070ca:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80070ce:	e7ab      	b.n	8007028 <_vfiprintf_r+0x250>
 80070d0:	9b02      	ldr	r3, [sp, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b6c      	cmp	r3, #108	; 0x6c
 80070d6:	d105      	bne.n	80070e4 <_vfiprintf_r+0x30c>
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	3301      	adds	r3, #1
 80070dc:	9302      	str	r3, [sp, #8]
 80070de:	f04a 0a20 	orr.w	sl, sl, #32
 80070e2:	e7a1      	b.n	8007028 <_vfiprintf_r+0x250>
 80070e4:	f04a 0a10 	orr.w	sl, sl, #16
 80070e8:	e79e      	b.n	8007028 <_vfiprintf_r+0x250>
 80070ea:	46a3      	mov	fp, r4
 80070ec:	2100      	movs	r1, #0
 80070ee:	f85b 3b04 	ldr.w	r3, [fp], #4
 80070f2:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 80070f6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80070fa:	2301      	movs	r3, #1
 80070fc:	460d      	mov	r5, r1
 80070fe:	9301      	str	r3, [sp, #4]
 8007100:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 8007104:	e0ad      	b.n	8007262 <_vfiprintf_r+0x48a>
 8007106:	f04a 0a10 	orr.w	sl, sl, #16
 800710a:	f01a 0f20 	tst.w	sl, #32
 800710e:	d010      	beq.n	8007132 <_vfiprintf_r+0x35a>
 8007110:	3407      	adds	r4, #7
 8007112:	f024 0307 	bic.w	r3, r4, #7
 8007116:	469b      	mov	fp, r3
 8007118:	685d      	ldr	r5, [r3, #4]
 800711a:	f85b 4b08 	ldr.w	r4, [fp], #8
 800711e:	2d00      	cmp	r5, #0
 8007120:	da05      	bge.n	800712e <_vfiprintf_r+0x356>
 8007122:	232d      	movs	r3, #45	; 0x2d
 8007124:	4264      	negs	r4, r4
 8007126:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800712a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800712e:	2301      	movs	r3, #1
 8007130:	e04a      	b.n	80071c8 <_vfiprintf_r+0x3f0>
 8007132:	46a3      	mov	fp, r4
 8007134:	f01a 0f10 	tst.w	sl, #16
 8007138:	f85b 5b04 	ldr.w	r5, [fp], #4
 800713c:	d002      	beq.n	8007144 <_vfiprintf_r+0x36c>
 800713e:	462c      	mov	r4, r5
 8007140:	17ed      	asrs	r5, r5, #31
 8007142:	e7ec      	b.n	800711e <_vfiprintf_r+0x346>
 8007144:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8007148:	d003      	beq.n	8007152 <_vfiprintf_r+0x37a>
 800714a:	b22c      	sxth	r4, r5
 800714c:	f345 35c0 	sbfx	r5, r5, #15, #1
 8007150:	e7e5      	b.n	800711e <_vfiprintf_r+0x346>
 8007152:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8007156:	d0f2      	beq.n	800713e <_vfiprintf_r+0x366>
 8007158:	b26c      	sxtb	r4, r5
 800715a:	f345 15c0 	sbfx	r5, r5, #7, #1
 800715e:	e7de      	b.n	800711e <_vfiprintf_r+0x346>
 8007160:	f01a 0f20 	tst.w	sl, #32
 8007164:	f104 0b04 	add.w	fp, r4, #4
 8007168:	d007      	beq.n	800717a <_vfiprintf_r+0x3a2>
 800716a:	9a03      	ldr	r2, [sp, #12]
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	9903      	ldr	r1, [sp, #12]
 8007170:	17d2      	asrs	r2, r2, #31
 8007172:	e9c3 1200 	strd	r1, r2, [r3]
 8007176:	465c      	mov	r4, fp
 8007178:	e68e      	b.n	8006e98 <_vfiprintf_r+0xc0>
 800717a:	f01a 0f10 	tst.w	sl, #16
 800717e:	d003      	beq.n	8007188 <_vfiprintf_r+0x3b0>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	9a03      	ldr	r2, [sp, #12]
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e7f6      	b.n	8007176 <_vfiprintf_r+0x39e>
 8007188:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800718c:	d003      	beq.n	8007196 <_vfiprintf_r+0x3be>
 800718e:	6823      	ldr	r3, [r4, #0]
 8007190:	9a03      	ldr	r2, [sp, #12]
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e7ef      	b.n	8007176 <_vfiprintf_r+0x39e>
 8007196:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800719a:	d0f1      	beq.n	8007180 <_vfiprintf_r+0x3a8>
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	9a03      	ldr	r2, [sp, #12]
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e7e8      	b.n	8007176 <_vfiprintf_r+0x39e>
 80071a4:	f04a 0a10 	orr.w	sl, sl, #16
 80071a8:	f01a 0320 	ands.w	r3, sl, #32
 80071ac:	d01f      	beq.n	80071ee <_vfiprintf_r+0x416>
 80071ae:	3407      	adds	r4, #7
 80071b0:	f024 0307 	bic.w	r3, r4, #7
 80071b4:	469b      	mov	fp, r3
 80071b6:	685d      	ldr	r5, [r3, #4]
 80071b8:	f85b 4b08 	ldr.w	r4, [fp], #8
 80071bc:	2300      	movs	r3, #0
 80071be:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80071c2:	2200      	movs	r2, #0
 80071c4:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 80071c8:	9a01      	ldr	r2, [sp, #4]
 80071ca:	3201      	adds	r2, #1
 80071cc:	f000 8263 	beq.w	8007696 <_vfiprintf_r+0x8be>
 80071d0:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 80071d4:	9205      	str	r2, [sp, #20]
 80071d6:	ea54 0205 	orrs.w	r2, r4, r5
 80071da:	f040 8262 	bne.w	80076a2 <_vfiprintf_r+0x8ca>
 80071de:	9a01      	ldr	r2, [sp, #4]
 80071e0:	2a00      	cmp	r2, #0
 80071e2:	f000 8199 	beq.w	8007518 <_vfiprintf_r+0x740>
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	f040 825e 	bne.w	80076a8 <_vfiprintf_r+0x8d0>
 80071ec:	e13a      	b.n	8007464 <_vfiprintf_r+0x68c>
 80071ee:	46a3      	mov	fp, r4
 80071f0:	f01a 0510 	ands.w	r5, sl, #16
 80071f4:	f85b 4b04 	ldr.w	r4, [fp], #4
 80071f8:	d001      	beq.n	80071fe <_vfiprintf_r+0x426>
 80071fa:	461d      	mov	r5, r3
 80071fc:	e7de      	b.n	80071bc <_vfiprintf_r+0x3e4>
 80071fe:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8007202:	d001      	beq.n	8007208 <_vfiprintf_r+0x430>
 8007204:	b2a4      	uxth	r4, r4
 8007206:	e7d9      	b.n	80071bc <_vfiprintf_r+0x3e4>
 8007208:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800720c:	d0d6      	beq.n	80071bc <_vfiprintf_r+0x3e4>
 800720e:	b2e4      	uxtb	r4, r4
 8007210:	e7f3      	b.n	80071fa <_vfiprintf_r+0x422>
 8007212:	2330      	movs	r3, #48	; 0x30
 8007214:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8007218:	2378      	movs	r3, #120	; 0x78
 800721a:	46a3      	mov	fp, r4
 800721c:	2500      	movs	r5, #0
 800721e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8007222:	4b04      	ldr	r3, [pc, #16]	; (8007234 <_vfiprintf_r+0x45c>)
 8007224:	f85b 4b04 	ldr.w	r4, [fp], #4
 8007228:	f04a 0a02 	orr.w	sl, sl, #2
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	2302      	movs	r3, #2
 8007230:	e7c7      	b.n	80071c2 <_vfiprintf_r+0x3ea>
 8007232:	bf00      	nop
 8007234:	08008388 	.word	0x08008388
 8007238:	46a3      	mov	fp, r4
 800723a:	2500      	movs	r5, #0
 800723c:	9b01      	ldr	r3, [sp, #4]
 800723e:	f85b 8b04 	ldr.w	r8, [fp], #4
 8007242:	1c5c      	adds	r4, r3, #1
 8007244:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8007248:	f000 80ce 	beq.w	80073e8 <_vfiprintf_r+0x610>
 800724c:	461a      	mov	r2, r3
 800724e:	4629      	mov	r1, r5
 8007250:	4640      	mov	r0, r8
 8007252:	f7ff f98b 	bl	800656c <memchr>
 8007256:	2800      	cmp	r0, #0
 8007258:	f000 8173 	beq.w	8007542 <_vfiprintf_r+0x76a>
 800725c:	eba0 0308 	sub.w	r3, r0, r8
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	9b01      	ldr	r3, [sp, #4]
 8007264:	42ab      	cmp	r3, r5
 8007266:	bfb8      	it	lt
 8007268:	462b      	movlt	r3, r5
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007270:	b113      	cbz	r3, 8007278 <_vfiprintf_r+0x4a0>
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	3301      	adds	r3, #1
 8007276:	9305      	str	r3, [sp, #20]
 8007278:	f01a 0302 	ands.w	r3, sl, #2
 800727c:	930a      	str	r3, [sp, #40]	; 0x28
 800727e:	bf1e      	ittt	ne
 8007280:	9b05      	ldrne	r3, [sp, #20]
 8007282:	3302      	addne	r3, #2
 8007284:	9305      	strne	r3, [sp, #20]
 8007286:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800728a:	930b      	str	r3, [sp, #44]	; 0x2c
 800728c:	d11f      	bne.n	80072ce <_vfiprintf_r+0x4f6>
 800728e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007292:	1a9c      	subs	r4, r3, r2
 8007294:	2c00      	cmp	r4, #0
 8007296:	dd1a      	ble.n	80072ce <_vfiprintf_r+0x4f6>
 8007298:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800729c:	48aa      	ldr	r0, [pc, #680]	; (8007548 <_vfiprintf_r+0x770>)
 800729e:	2c10      	cmp	r4, #16
 80072a0:	f103 0301 	add.w	r3, r3, #1
 80072a4:	f106 0108 	add.w	r1, r6, #8
 80072a8:	6030      	str	r0, [r6, #0]
 80072aa:	f300 8153 	bgt.w	8007554 <_vfiprintf_r+0x77c>
 80072ae:	6074      	str	r4, [r6, #4]
 80072b0:	2b07      	cmp	r3, #7
 80072b2:	4414      	add	r4, r2
 80072b4:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 80072b8:	f340 815e 	ble.w	8007578 <_vfiprintf_r+0x7a0>
 80072bc:	4639      	mov	r1, r7
 80072be:	4648      	mov	r0, r9
 80072c0:	aa0e      	add	r2, sp, #56	; 0x38
 80072c2:	f7ff fd56 	bl	8006d72 <__sprint_r>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	f040 81b7 	bne.w	800763a <_vfiprintf_r+0x862>
 80072cc:	ae11      	add	r6, sp, #68	; 0x44
 80072ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80072d2:	b173      	cbz	r3, 80072f2 <_vfiprintf_r+0x51a>
 80072d4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80072d8:	6032      	str	r2, [r6, #0]
 80072da:	2201      	movs	r2, #1
 80072dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072de:	6072      	str	r2, [r6, #4]
 80072e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072e2:	3301      	adds	r3, #1
 80072e4:	3201      	adds	r2, #1
 80072e6:	2b07      	cmp	r3, #7
 80072e8:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80072ec:	f300 8146 	bgt.w	800757c <_vfiprintf_r+0x7a4>
 80072f0:	3608      	adds	r6, #8
 80072f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072f4:	b16b      	cbz	r3, 8007312 <_vfiprintf_r+0x53a>
 80072f6:	aa0d      	add	r2, sp, #52	; 0x34
 80072f8:	6032      	str	r2, [r6, #0]
 80072fa:	2202      	movs	r2, #2
 80072fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072fe:	6072      	str	r2, [r6, #4]
 8007300:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007302:	3301      	adds	r3, #1
 8007304:	3202      	adds	r2, #2
 8007306:	2b07      	cmp	r3, #7
 8007308:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800730c:	f300 813f 	bgt.w	800758e <_vfiprintf_r+0x7b6>
 8007310:	3608      	adds	r6, #8
 8007312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007314:	2b80      	cmp	r3, #128	; 0x80
 8007316:	d11f      	bne.n	8007358 <_vfiprintf_r+0x580>
 8007318:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800731c:	1a9c      	subs	r4, r3, r2
 800731e:	2c00      	cmp	r4, #0
 8007320:	dd1a      	ble.n	8007358 <_vfiprintf_r+0x580>
 8007322:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8007326:	4889      	ldr	r0, [pc, #548]	; (800754c <_vfiprintf_r+0x774>)
 8007328:	2c10      	cmp	r4, #16
 800732a:	f103 0301 	add.w	r3, r3, #1
 800732e:	f106 0108 	add.w	r1, r6, #8
 8007332:	6030      	str	r0, [r6, #0]
 8007334:	f300 8134 	bgt.w	80075a0 <_vfiprintf_r+0x7c8>
 8007338:	6074      	str	r4, [r6, #4]
 800733a:	2b07      	cmp	r3, #7
 800733c:	4414      	add	r4, r2
 800733e:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8007342:	f340 813f 	ble.w	80075c4 <_vfiprintf_r+0x7ec>
 8007346:	4639      	mov	r1, r7
 8007348:	4648      	mov	r0, r9
 800734a:	aa0e      	add	r2, sp, #56	; 0x38
 800734c:	f7ff fd11 	bl	8006d72 <__sprint_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	f040 8172 	bne.w	800763a <_vfiprintf_r+0x862>
 8007356:	ae11      	add	r6, sp, #68	; 0x44
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	1aec      	subs	r4, r5, r3
 800735c:	2c00      	cmp	r4, #0
 800735e:	dd1a      	ble.n	8007396 <_vfiprintf_r+0x5be>
 8007360:	4d7a      	ldr	r5, [pc, #488]	; (800754c <_vfiprintf_r+0x774>)
 8007362:	2c10      	cmp	r4, #16
 8007364:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 8007368:	f106 0208 	add.w	r2, r6, #8
 800736c:	f103 0301 	add.w	r3, r3, #1
 8007370:	6035      	str	r5, [r6, #0]
 8007372:	f300 8129 	bgt.w	80075c8 <_vfiprintf_r+0x7f0>
 8007376:	6074      	str	r4, [r6, #4]
 8007378:	2b07      	cmp	r3, #7
 800737a:	440c      	add	r4, r1
 800737c:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 8007380:	f340 8133 	ble.w	80075ea <_vfiprintf_r+0x812>
 8007384:	4639      	mov	r1, r7
 8007386:	4648      	mov	r0, r9
 8007388:	aa0e      	add	r2, sp, #56	; 0x38
 800738a:	f7ff fcf2 	bl	8006d72 <__sprint_r>
 800738e:	2800      	cmp	r0, #0
 8007390:	f040 8153 	bne.w	800763a <_vfiprintf_r+0x862>
 8007394:	ae11      	add	r6, sp, #68	; 0x44
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	9810      	ldr	r0, [sp, #64]	; 0x40
 800739a:	6073      	str	r3, [r6, #4]
 800739c:	4418      	add	r0, r3
 800739e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073a0:	f8c6 8000 	str.w	r8, [r6]
 80073a4:	3301      	adds	r3, #1
 80073a6:	2b07      	cmp	r3, #7
 80073a8:	9010      	str	r0, [sp, #64]	; 0x40
 80073aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80073ac:	f300 811f 	bgt.w	80075ee <_vfiprintf_r+0x816>
 80073b0:	f106 0308 	add.w	r3, r6, #8
 80073b4:	f01a 0f04 	tst.w	sl, #4
 80073b8:	f040 8121 	bne.w	80075fe <_vfiprintf_r+0x826>
 80073bc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80073c0:	9905      	ldr	r1, [sp, #20]
 80073c2:	428a      	cmp	r2, r1
 80073c4:	bfac      	ite	ge
 80073c6:	189b      	addge	r3, r3, r2
 80073c8:	185b      	addlt	r3, r3, r1
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073ce:	b13b      	cbz	r3, 80073e0 <_vfiprintf_r+0x608>
 80073d0:	4639      	mov	r1, r7
 80073d2:	4648      	mov	r0, r9
 80073d4:	aa0e      	add	r2, sp, #56	; 0x38
 80073d6:	f7ff fccc 	bl	8006d72 <__sprint_r>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f040 812d 	bne.w	800763a <_vfiprintf_r+0x862>
 80073e0:	2300      	movs	r3, #0
 80073e2:	ae11      	add	r6, sp, #68	; 0x44
 80073e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e6:	e6c6      	b.n	8007176 <_vfiprintf_r+0x39e>
 80073e8:	4640      	mov	r0, r8
 80073ea:	f7f9 fbdd 	bl	8000ba8 <strlen>
 80073ee:	9001      	str	r0, [sp, #4]
 80073f0:	e737      	b.n	8007262 <_vfiprintf_r+0x48a>
 80073f2:	f04a 0a10 	orr.w	sl, sl, #16
 80073f6:	f01a 0320 	ands.w	r3, sl, #32
 80073fa:	d008      	beq.n	800740e <_vfiprintf_r+0x636>
 80073fc:	3407      	adds	r4, #7
 80073fe:	f024 0307 	bic.w	r3, r4, #7
 8007402:	469b      	mov	fp, r3
 8007404:	685d      	ldr	r5, [r3, #4]
 8007406:	f85b 4b08 	ldr.w	r4, [fp], #8
 800740a:	2301      	movs	r3, #1
 800740c:	e6d9      	b.n	80071c2 <_vfiprintf_r+0x3ea>
 800740e:	46a3      	mov	fp, r4
 8007410:	f01a 0510 	ands.w	r5, sl, #16
 8007414:	f85b 4b04 	ldr.w	r4, [fp], #4
 8007418:	d001      	beq.n	800741e <_vfiprintf_r+0x646>
 800741a:	461d      	mov	r5, r3
 800741c:	e7f5      	b.n	800740a <_vfiprintf_r+0x632>
 800741e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8007422:	d001      	beq.n	8007428 <_vfiprintf_r+0x650>
 8007424:	b2a4      	uxth	r4, r4
 8007426:	e7f0      	b.n	800740a <_vfiprintf_r+0x632>
 8007428:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800742c:	d0ed      	beq.n	800740a <_vfiprintf_r+0x632>
 800742e:	b2e4      	uxtb	r4, r4
 8007430:	e7f3      	b.n	800741a <_vfiprintf_r+0x642>
 8007432:	4a47      	ldr	r2, [pc, #284]	; (8007550 <_vfiprintf_r+0x778>)
 8007434:	e5c6      	b.n	8006fc4 <_vfiprintf_r+0x1ec>
 8007436:	46a3      	mov	fp, r4
 8007438:	f01a 0510 	ands.w	r5, sl, #16
 800743c:	f85b 4b04 	ldr.w	r4, [fp], #4
 8007440:	d001      	beq.n	8007446 <_vfiprintf_r+0x66e>
 8007442:	4615      	mov	r5, r2
 8007444:	e5ca      	b.n	8006fdc <_vfiprintf_r+0x204>
 8007446:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800744a:	d001      	beq.n	8007450 <_vfiprintf_r+0x678>
 800744c:	b2a4      	uxth	r4, r4
 800744e:	e5c5      	b.n	8006fdc <_vfiprintf_r+0x204>
 8007450:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8007454:	f43f adc2 	beq.w	8006fdc <_vfiprintf_r+0x204>
 8007458:	b2e4      	uxtb	r4, r4
 800745a:	e7f2      	b.n	8007442 <_vfiprintf_r+0x66a>
 800745c:	2c0a      	cmp	r4, #10
 800745e:	f175 0300 	sbcs.w	r3, r5, #0
 8007462:	d205      	bcs.n	8007470 <_vfiprintf_r+0x698>
 8007464:	3430      	adds	r4, #48	; 0x30
 8007466:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800746a:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800746e:	e137      	b.n	80076e0 <_vfiprintf_r+0x908>
 8007470:	f04f 0a00 	mov.w	sl, #0
 8007474:	ab3a      	add	r3, sp, #232	; 0xe8
 8007476:	930a      	str	r3, [sp, #40]	; 0x28
 8007478:	9b05      	ldr	r3, [sp, #20]
 800747a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007482:	220a      	movs	r2, #10
 8007484:	4620      	mov	r0, r4
 8007486:	4629      	mov	r1, r5
 8007488:	f103 38ff 	add.w	r8, r3, #4294967295
 800748c:	2300      	movs	r3, #0
 800748e:	f7f9 fc59 	bl	8000d44 <__aeabi_uldivmod>
 8007492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007494:	3230      	adds	r2, #48	; 0x30
 8007496:	f803 2c01 	strb.w	r2, [r3, #-1]
 800749a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800749c:	f10a 0a01 	add.w	sl, sl, #1
 80074a0:	b1d3      	cbz	r3, 80074d8 <_vfiprintf_r+0x700>
 80074a2:	9b07      	ldr	r3, [sp, #28]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	4553      	cmp	r3, sl
 80074a8:	d116      	bne.n	80074d8 <_vfiprintf_r+0x700>
 80074aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80074ae:	d013      	beq.n	80074d8 <_vfiprintf_r+0x700>
 80074b0:	2c0a      	cmp	r4, #10
 80074b2:	f175 0300 	sbcs.w	r3, r5, #0
 80074b6:	d30f      	bcc.n	80074d8 <_vfiprintf_r+0x700>
 80074b8:	9b08      	ldr	r3, [sp, #32]
 80074ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074bc:	eba8 0803 	sub.w	r8, r8, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff fc35 	bl	8006d32 <strncpy>
 80074c8:	9b07      	ldr	r3, [sp, #28]
 80074ca:	785b      	ldrb	r3, [r3, #1]
 80074cc:	b1a3      	cbz	r3, 80074f8 <_vfiprintf_r+0x720>
 80074ce:	f04f 0a00 	mov.w	sl, #0
 80074d2:	9b07      	ldr	r3, [sp, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	2300      	movs	r3, #0
 80074da:	220a      	movs	r2, #10
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f9 fc30 	bl	8000d44 <__aeabi_uldivmod>
 80074e4:	2c0a      	cmp	r4, #10
 80074e6:	f175 0300 	sbcs.w	r3, r5, #0
 80074ea:	f0c0 80f9 	bcc.w	80076e0 <_vfiprintf_r+0x908>
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80074f6:	e7c3      	b.n	8007480 <_vfiprintf_r+0x6a8>
 80074f8:	469a      	mov	sl, r3
 80074fa:	e7ed      	b.n	80074d8 <_vfiprintf_r+0x700>
 80074fc:	9a06      	ldr	r2, [sp, #24]
 80074fe:	f004 030f 	and.w	r3, r4, #15
 8007502:	5cd3      	ldrb	r3, [r2, r3]
 8007504:	0924      	lsrs	r4, r4, #4
 8007506:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800750a:	092d      	lsrs	r5, r5, #4
 800750c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8007510:	ea54 0305 	orrs.w	r3, r4, r5
 8007514:	d1f2      	bne.n	80074fc <_vfiprintf_r+0x724>
 8007516:	e0e3      	b.n	80076e0 <_vfiprintf_r+0x908>
 8007518:	b933      	cbnz	r3, 8007528 <_vfiprintf_r+0x750>
 800751a:	f01a 0f01 	tst.w	sl, #1
 800751e:	d003      	beq.n	8007528 <_vfiprintf_r+0x750>
 8007520:	2330      	movs	r3, #48	; 0x30
 8007522:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8007526:	e7a0      	b.n	800746a <_vfiprintf_r+0x692>
 8007528:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800752c:	e0d8      	b.n	80076e0 <_vfiprintf_r+0x908>
 800752e:	2b00      	cmp	r3, #0
 8007530:	f000 80a4 	beq.w	800767c <_vfiprintf_r+0x8a4>
 8007534:	2100      	movs	r1, #0
 8007536:	46a3      	mov	fp, r4
 8007538:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800753c:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 8007540:	e5db      	b.n	80070fa <_vfiprintf_r+0x322>
 8007542:	4605      	mov	r5, r0
 8007544:	e68d      	b.n	8007262 <_vfiprintf_r+0x48a>
 8007546:	bf00      	nop
 8007548:	080085a4 	.word	0x080085a4
 800754c:	080085b4 	.word	0x080085b4
 8007550:	08008399 	.word	0x08008399
 8007554:	2010      	movs	r0, #16
 8007556:	2b07      	cmp	r3, #7
 8007558:	4402      	add	r2, r0
 800755a:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800755e:	6070      	str	r0, [r6, #4]
 8007560:	dd07      	ble.n	8007572 <_vfiprintf_r+0x79a>
 8007562:	4639      	mov	r1, r7
 8007564:	4648      	mov	r0, r9
 8007566:	aa0e      	add	r2, sp, #56	; 0x38
 8007568:	f7ff fc03 	bl	8006d72 <__sprint_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	d164      	bne.n	800763a <_vfiprintf_r+0x862>
 8007570:	a911      	add	r1, sp, #68	; 0x44
 8007572:	460e      	mov	r6, r1
 8007574:	3c10      	subs	r4, #16
 8007576:	e68f      	b.n	8007298 <_vfiprintf_r+0x4c0>
 8007578:	460e      	mov	r6, r1
 800757a:	e6a8      	b.n	80072ce <_vfiprintf_r+0x4f6>
 800757c:	4639      	mov	r1, r7
 800757e:	4648      	mov	r0, r9
 8007580:	aa0e      	add	r2, sp, #56	; 0x38
 8007582:	f7ff fbf6 	bl	8006d72 <__sprint_r>
 8007586:	2800      	cmp	r0, #0
 8007588:	d157      	bne.n	800763a <_vfiprintf_r+0x862>
 800758a:	ae11      	add	r6, sp, #68	; 0x44
 800758c:	e6b1      	b.n	80072f2 <_vfiprintf_r+0x51a>
 800758e:	4639      	mov	r1, r7
 8007590:	4648      	mov	r0, r9
 8007592:	aa0e      	add	r2, sp, #56	; 0x38
 8007594:	f7ff fbed 	bl	8006d72 <__sprint_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	d14e      	bne.n	800763a <_vfiprintf_r+0x862>
 800759c:	ae11      	add	r6, sp, #68	; 0x44
 800759e:	e6b8      	b.n	8007312 <_vfiprintf_r+0x53a>
 80075a0:	2010      	movs	r0, #16
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	4402      	add	r2, r0
 80075a6:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 80075aa:	6070      	str	r0, [r6, #4]
 80075ac:	dd07      	ble.n	80075be <_vfiprintf_r+0x7e6>
 80075ae:	4639      	mov	r1, r7
 80075b0:	4648      	mov	r0, r9
 80075b2:	aa0e      	add	r2, sp, #56	; 0x38
 80075b4:	f7ff fbdd 	bl	8006d72 <__sprint_r>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	d13e      	bne.n	800763a <_vfiprintf_r+0x862>
 80075bc:	a911      	add	r1, sp, #68	; 0x44
 80075be:	460e      	mov	r6, r1
 80075c0:	3c10      	subs	r4, #16
 80075c2:	e6ae      	b.n	8007322 <_vfiprintf_r+0x54a>
 80075c4:	460e      	mov	r6, r1
 80075c6:	e6c7      	b.n	8007358 <_vfiprintf_r+0x580>
 80075c8:	2010      	movs	r0, #16
 80075ca:	2b07      	cmp	r3, #7
 80075cc:	4401      	add	r1, r0
 80075ce:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 80075d2:	6070      	str	r0, [r6, #4]
 80075d4:	dd06      	ble.n	80075e4 <_vfiprintf_r+0x80c>
 80075d6:	4639      	mov	r1, r7
 80075d8:	4648      	mov	r0, r9
 80075da:	aa0e      	add	r2, sp, #56	; 0x38
 80075dc:	f7ff fbc9 	bl	8006d72 <__sprint_r>
 80075e0:	bb58      	cbnz	r0, 800763a <_vfiprintf_r+0x862>
 80075e2:	aa11      	add	r2, sp, #68	; 0x44
 80075e4:	4616      	mov	r6, r2
 80075e6:	3c10      	subs	r4, #16
 80075e8:	e6bb      	b.n	8007362 <_vfiprintf_r+0x58a>
 80075ea:	4616      	mov	r6, r2
 80075ec:	e6d3      	b.n	8007396 <_vfiprintf_r+0x5be>
 80075ee:	4639      	mov	r1, r7
 80075f0:	4648      	mov	r0, r9
 80075f2:	aa0e      	add	r2, sp, #56	; 0x38
 80075f4:	f7ff fbbd 	bl	8006d72 <__sprint_r>
 80075f8:	b9f8      	cbnz	r0, 800763a <_vfiprintf_r+0x862>
 80075fa:	ab11      	add	r3, sp, #68	; 0x44
 80075fc:	e6da      	b.n	80073b4 <_vfiprintf_r+0x5dc>
 80075fe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8007602:	1a54      	subs	r4, r2, r1
 8007604:	2c00      	cmp	r4, #0
 8007606:	f77f aed9 	ble.w	80073bc <_vfiprintf_r+0x5e4>
 800760a:	2610      	movs	r6, #16
 800760c:	4d38      	ldr	r5, [pc, #224]	; (80076f0 <_vfiprintf_r+0x918>)
 800760e:	2c10      	cmp	r4, #16
 8007610:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8007614:	601d      	str	r5, [r3, #0]
 8007616:	f102 0201 	add.w	r2, r2, #1
 800761a:	dc1d      	bgt.n	8007658 <_vfiprintf_r+0x880>
 800761c:	605c      	str	r4, [r3, #4]
 800761e:	2a07      	cmp	r2, #7
 8007620:	440c      	add	r4, r1
 8007622:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8007626:	f77f aec9 	ble.w	80073bc <_vfiprintf_r+0x5e4>
 800762a:	4639      	mov	r1, r7
 800762c:	4648      	mov	r0, r9
 800762e:	aa0e      	add	r2, sp, #56	; 0x38
 8007630:	f7ff fb9f 	bl	8006d72 <__sprint_r>
 8007634:	2800      	cmp	r0, #0
 8007636:	f43f aec1 	beq.w	80073bc <_vfiprintf_r+0x5e4>
 800763a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800763c:	07d9      	lsls	r1, r3, #31
 800763e:	d405      	bmi.n	800764c <_vfiprintf_r+0x874>
 8007640:	89bb      	ldrh	r3, [r7, #12]
 8007642:	059a      	lsls	r2, r3, #22
 8007644:	d402      	bmi.n	800764c <_vfiprintf_r+0x874>
 8007646:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8007648:	f7fe fce7 	bl	800601a <__retarget_lock_release_recursive>
 800764c:	89bb      	ldrh	r3, [r7, #12]
 800764e:	065b      	lsls	r3, r3, #25
 8007650:	f57f abf3 	bpl.w	8006e3a <_vfiprintf_r+0x62>
 8007654:	f7ff bbee 	b.w	8006e34 <_vfiprintf_r+0x5c>
 8007658:	3110      	adds	r1, #16
 800765a:	2a07      	cmp	r2, #7
 800765c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8007660:	605e      	str	r6, [r3, #4]
 8007662:	dc02      	bgt.n	800766a <_vfiprintf_r+0x892>
 8007664:	3308      	adds	r3, #8
 8007666:	3c10      	subs	r4, #16
 8007668:	e7d1      	b.n	800760e <_vfiprintf_r+0x836>
 800766a:	4639      	mov	r1, r7
 800766c:	4648      	mov	r0, r9
 800766e:	aa0e      	add	r2, sp, #56	; 0x38
 8007670:	f7ff fb7f 	bl	8006d72 <__sprint_r>
 8007674:	2800      	cmp	r0, #0
 8007676:	d1e0      	bne.n	800763a <_vfiprintf_r+0x862>
 8007678:	ab11      	add	r3, sp, #68	; 0x44
 800767a:	e7f4      	b.n	8007666 <_vfiprintf_r+0x88e>
 800767c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800767e:	b913      	cbnz	r3, 8007686 <_vfiprintf_r+0x8ae>
 8007680:	2300      	movs	r3, #0
 8007682:	930f      	str	r3, [sp, #60]	; 0x3c
 8007684:	e7d9      	b.n	800763a <_vfiprintf_r+0x862>
 8007686:	4639      	mov	r1, r7
 8007688:	4648      	mov	r0, r9
 800768a:	aa0e      	add	r2, sp, #56	; 0x38
 800768c:	f7ff fb71 	bl	8006d72 <__sprint_r>
 8007690:	2800      	cmp	r0, #0
 8007692:	d0f5      	beq.n	8007680 <_vfiprintf_r+0x8a8>
 8007694:	e7d1      	b.n	800763a <_vfiprintf_r+0x862>
 8007696:	ea54 0205 	orrs.w	r2, r4, r5
 800769a:	f8cd a014 	str.w	sl, [sp, #20]
 800769e:	f43f ada2 	beq.w	80071e6 <_vfiprintf_r+0x40e>
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	f43f aeda 	beq.w	800745c <_vfiprintf_r+0x684>
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 80076ae:	f43f af25 	beq.w	80074fc <_vfiprintf_r+0x724>
 80076b2:	f004 0307 	and.w	r3, r4, #7
 80076b6:	08e4      	lsrs	r4, r4, #3
 80076b8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 80076bc:	08ed      	lsrs	r5, r5, #3
 80076be:	3330      	adds	r3, #48	; 0x30
 80076c0:	ea54 0105 	orrs.w	r1, r4, r5
 80076c4:	4642      	mov	r2, r8
 80076c6:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80076ca:	d1f2      	bne.n	80076b2 <_vfiprintf_r+0x8da>
 80076cc:	9905      	ldr	r1, [sp, #20]
 80076ce:	07c8      	lsls	r0, r1, #31
 80076d0:	d506      	bpl.n	80076e0 <_vfiprintf_r+0x908>
 80076d2:	2b30      	cmp	r3, #48	; 0x30
 80076d4:	d004      	beq.n	80076e0 <_vfiprintf_r+0x908>
 80076d6:	2330      	movs	r3, #48	; 0x30
 80076d8:	f808 3c01 	strb.w	r3, [r8, #-1]
 80076dc:	f1a2 0802 	sub.w	r8, r2, #2
 80076e0:	ab3a      	add	r3, sp, #232	; 0xe8
 80076e2:	eba3 0308 	sub.w	r3, r3, r8
 80076e6:	9d01      	ldr	r5, [sp, #4]
 80076e8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80076ec:	9301      	str	r3, [sp, #4]
 80076ee:	e5b8      	b.n	8007262 <_vfiprintf_r+0x48a>
 80076f0:	080085a4 	.word	0x080085a4

080076f4 <__sbprintf>:
 80076f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f6:	461f      	mov	r7, r3
 80076f8:	898b      	ldrh	r3, [r1, #12]
 80076fa:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80076fe:	f023 0302 	bic.w	r3, r3, #2
 8007702:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007706:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8007708:	4615      	mov	r5, r2
 800770a:	9319      	str	r3, [sp, #100]	; 0x64
 800770c:	89cb      	ldrh	r3, [r1, #14]
 800770e:	4606      	mov	r6, r0
 8007710:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007714:	69cb      	ldr	r3, [r1, #28]
 8007716:	a816      	add	r0, sp, #88	; 0x58
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800771c:	460c      	mov	r4, r1
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	ab1a      	add	r3, sp, #104	; 0x68
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	9304      	str	r3, [sp, #16]
 8007726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800772a:	9302      	str	r3, [sp, #8]
 800772c:	9305      	str	r3, [sp, #20]
 800772e:	2300      	movs	r3, #0
 8007730:	9306      	str	r3, [sp, #24]
 8007732:	f7fe fc6f 	bl	8006014 <__retarget_lock_init_recursive>
 8007736:	462a      	mov	r2, r5
 8007738:	463b      	mov	r3, r7
 800773a:	4669      	mov	r1, sp
 800773c:	4630      	mov	r0, r6
 800773e:	f7ff fb4b 	bl	8006dd8 <_vfiprintf_r>
 8007742:	1e05      	subs	r5, r0, #0
 8007744:	db07      	blt.n	8007756 <__sbprintf+0x62>
 8007746:	4669      	mov	r1, sp
 8007748:	4630      	mov	r0, r6
 800774a:	f7fe fa83 	bl	8005c54 <_fflush_r>
 800774e:	2800      	cmp	r0, #0
 8007750:	bf18      	it	ne
 8007752:	f04f 35ff 	movne.w	r5, #4294967295
 8007756:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800775a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800775c:	065b      	lsls	r3, r3, #25
 800775e:	bf42      	ittt	mi
 8007760:	89a3      	ldrhmi	r3, [r4, #12]
 8007762:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8007766:	81a3      	strhmi	r3, [r4, #12]
 8007768:	f7fe fc55 	bl	8006016 <__retarget_lock_close_recursive>
 800776c:	4628      	mov	r0, r5
 800776e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8007772:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007774 <_write_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4604      	mov	r4, r0
 8007778:	4608      	mov	r0, r1
 800777a:	4611      	mov	r1, r2
 800777c:	2200      	movs	r2, #0
 800777e:	4d05      	ldr	r5, [pc, #20]	; (8007794 <_write_r+0x20>)
 8007780:	602a      	str	r2, [r5, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	f7fa f8ed 	bl	8001962 <_write>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d102      	bne.n	8007792 <_write_r+0x1e>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	b103      	cbz	r3, 8007792 <_write_r+0x1e>
 8007790:	6023      	str	r3, [r4, #0]
 8007792:	bd38      	pop	{r3, r4, r5, pc}
 8007794:	20000a98 	.word	0x20000a98

08007798 <__register_exitproc>:
 8007798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007814 <__register_exitproc+0x7c>
 80077a0:	4606      	mov	r6, r0
 80077a2:	f8da 0000 	ldr.w	r0, [sl]
 80077a6:	4698      	mov	r8, r3
 80077a8:	460f      	mov	r7, r1
 80077aa:	4691      	mov	r9, r2
 80077ac:	f7fe fc34 	bl	8006018 <__retarget_lock_acquire_recursive>
 80077b0:	4b19      	ldr	r3, [pc, #100]	; (8007818 <__register_exitproc+0x80>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 80077b8:	b91c      	cbnz	r4, 80077c2 <__register_exitproc+0x2a>
 80077ba:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80077be:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80077c2:	6865      	ldr	r5, [r4, #4]
 80077c4:	f8da 0000 	ldr.w	r0, [sl]
 80077c8:	2d1f      	cmp	r5, #31
 80077ca:	dd05      	ble.n	80077d8 <__register_exitproc+0x40>
 80077cc:	f7fe fc25 	bl	800601a <__retarget_lock_release_recursive>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d8:	b19e      	cbz	r6, 8007802 <__register_exitproc+0x6a>
 80077da:	2201      	movs	r2, #1
 80077dc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80077e0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80077e4:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 80077e8:	40aa      	lsls	r2, r5
 80077ea:	4313      	orrs	r3, r2
 80077ec:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 80077f0:	2e02      	cmp	r6, #2
 80077f2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80077f6:	bf02      	ittt	eq
 80077f8:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80077fc:	4313      	orreq	r3, r2
 80077fe:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8007802:	1c6b      	adds	r3, r5, #1
 8007804:	3502      	adds	r5, #2
 8007806:	6063      	str	r3, [r4, #4]
 8007808:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800780c:	f7fe fc05 	bl	800601a <__retarget_lock_release_recursive>
 8007810:	2000      	movs	r0, #0
 8007812:	e7df      	b.n	80077d4 <__register_exitproc+0x3c>
 8007814:	20000438 	.word	0x20000438
 8007818:	08008374 	.word	0x08008374

0800781c <__assert_func>:
 800781c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800781e:	4614      	mov	r4, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <__assert_func+0x2c>)
 8007824:	4605      	mov	r5, r0
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68d8      	ldr	r0, [r3, #12]
 800782a:	b14c      	cbz	r4, 8007840 <__assert_func+0x24>
 800782c:	4b07      	ldr	r3, [pc, #28]	; (800784c <__assert_func+0x30>)
 800782e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007832:	9100      	str	r1, [sp, #0]
 8007834:	462b      	mov	r3, r5
 8007836:	4906      	ldr	r1, [pc, #24]	; (8007850 <__assert_func+0x34>)
 8007838:	f000 f8ac 	bl	8007994 <fiprintf>
 800783c:	f000 fcfb 	bl	8008236 <abort>
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <__assert_func+0x38>)
 8007842:	461c      	mov	r4, r3
 8007844:	e7f3      	b.n	800782e <__assert_func+0x12>
 8007846:	bf00      	nop
 8007848:	2000000c 	.word	0x2000000c
 800784c:	080085c4 	.word	0x080085c4
 8007850:	080085d1 	.word	0x080085d1
 8007854:	080085ff 	.word	0x080085ff

08007858 <_calloc_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	fba1 1502 	umull	r1, r5, r1, r2
 800785e:	b92d      	cbnz	r5, 800786c <_calloc_r+0x14>
 8007860:	f7fe fc48 	bl	80060f4 <_malloc_r>
 8007864:	4604      	mov	r4, r0
 8007866:	b938      	cbnz	r0, 8007878 <_calloc_r+0x20>
 8007868:	4620      	mov	r0, r4
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	f7fc f81c 	bl	80038a8 <__errno>
 8007870:	230c      	movs	r3, #12
 8007872:	2400      	movs	r4, #0
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	e7f7      	b.n	8007868 <_calloc_r+0x10>
 8007878:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800787c:	f022 0203 	bic.w	r2, r2, #3
 8007880:	3a04      	subs	r2, #4
 8007882:	2a24      	cmp	r2, #36	; 0x24
 8007884:	d819      	bhi.n	80078ba <_calloc_r+0x62>
 8007886:	2a13      	cmp	r2, #19
 8007888:	d915      	bls.n	80078b6 <_calloc_r+0x5e>
 800788a:	2a1b      	cmp	r2, #27
 800788c:	e9c0 5500 	strd	r5, r5, [r0]
 8007890:	d806      	bhi.n	80078a0 <_calloc_r+0x48>
 8007892:	f100 0308 	add.w	r3, r0, #8
 8007896:	2200      	movs	r2, #0
 8007898:	e9c3 2200 	strd	r2, r2, [r3]
 800789c:	609a      	str	r2, [r3, #8]
 800789e:	e7e3      	b.n	8007868 <_calloc_r+0x10>
 80078a0:	2a24      	cmp	r2, #36	; 0x24
 80078a2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80078a6:	bf11      	iteee	ne
 80078a8:	f100 0310 	addne.w	r3, r0, #16
 80078ac:	6105      	streq	r5, [r0, #16]
 80078ae:	f100 0318 	addeq.w	r3, r0, #24
 80078b2:	6145      	streq	r5, [r0, #20]
 80078b4:	e7ef      	b.n	8007896 <_calloc_r+0x3e>
 80078b6:	4603      	mov	r3, r0
 80078b8:	e7ed      	b.n	8007896 <_calloc_r+0x3e>
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7fc f81e 	bl	80038fc <memset>
 80078c0:	e7d2      	b.n	8007868 <_calloc_r+0x10>
	...

080078c4 <_close_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	2300      	movs	r3, #0
 80078c8:	4d05      	ldr	r5, [pc, #20]	; (80078e0 <_close_r+0x1c>)
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	602b      	str	r3, [r5, #0]
 80078d0:	f7fa f863 	bl	800199a <_close>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d102      	bne.n	80078de <_close_r+0x1a>
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	b103      	cbz	r3, 80078de <_close_r+0x1a>
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	20000a98 	.word	0x20000a98

080078e4 <_fclose_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	b911      	cbnz	r1, 80078f2 <_fclose_r+0xe>
 80078ec:	2500      	movs	r5, #0
 80078ee:	4628      	mov	r0, r5
 80078f0:	bd70      	pop	{r4, r5, r6, pc}
 80078f2:	b118      	cbz	r0, 80078fc <_fclose_r+0x18>
 80078f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80078f6:	b90b      	cbnz	r3, 80078fc <_fclose_r+0x18>
 80078f8:	f7fe fa18 	bl	8005d2c <__sinit>
 80078fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078fe:	07d8      	lsls	r0, r3, #31
 8007900:	d405      	bmi.n	800790e <_fclose_r+0x2a>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	0599      	lsls	r1, r3, #22
 8007906:	d402      	bmi.n	800790e <_fclose_r+0x2a>
 8007908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800790a:	f7fe fb85 	bl	8006018 <__retarget_lock_acquire_recursive>
 800790e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007912:	b93b      	cbnz	r3, 8007924 <_fclose_r+0x40>
 8007914:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007916:	f015 0501 	ands.w	r5, r5, #1
 800791a:	d1e7      	bne.n	80078ec <_fclose_r+0x8>
 800791c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791e:	f7fe fb7c 	bl	800601a <__retarget_lock_release_recursive>
 8007922:	e7e4      	b.n	80078ee <_fclose_r+0xa>
 8007924:	4621      	mov	r1, r4
 8007926:	4630      	mov	r0, r6
 8007928:	f7fe f90a 	bl	8005b40 <__sflush_r>
 800792c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800792e:	4605      	mov	r5, r0
 8007930:	b133      	cbz	r3, 8007940 <_fclose_r+0x5c>
 8007932:	4630      	mov	r0, r6
 8007934:	69e1      	ldr	r1, [r4, #28]
 8007936:	4798      	blx	r3
 8007938:	2800      	cmp	r0, #0
 800793a:	bfb8      	it	lt
 800793c:	f04f 35ff 	movlt.w	r5, #4294967295
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	061a      	lsls	r2, r3, #24
 8007944:	d503      	bpl.n	800794e <_fclose_r+0x6a>
 8007946:	4630      	mov	r0, r6
 8007948:	6921      	ldr	r1, [r4, #16]
 800794a:	f7fe fa7f 	bl	8005e4c <_free_r>
 800794e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007950:	b141      	cbz	r1, 8007964 <_fclose_r+0x80>
 8007952:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8007956:	4299      	cmp	r1, r3
 8007958:	d002      	beq.n	8007960 <_fclose_r+0x7c>
 800795a:	4630      	mov	r0, r6
 800795c:	f7fe fa76 	bl	8005e4c <_free_r>
 8007960:	2300      	movs	r3, #0
 8007962:	6323      	str	r3, [r4, #48]	; 0x30
 8007964:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007966:	b121      	cbz	r1, 8007972 <_fclose_r+0x8e>
 8007968:	4630      	mov	r0, r6
 800796a:	f7fe fa6f 	bl	8005e4c <_free_r>
 800796e:	2300      	movs	r3, #0
 8007970:	6463      	str	r3, [r4, #68]	; 0x44
 8007972:	f7fe f9c3 	bl	8005cfc <__sfp_lock_acquire>
 8007976:	2300      	movs	r3, #0
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797c:	07db      	lsls	r3, r3, #31
 800797e:	d402      	bmi.n	8007986 <_fclose_r+0xa2>
 8007980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007982:	f7fe fb4a 	bl	800601a <__retarget_lock_release_recursive>
 8007986:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007988:	f7fe fb45 	bl	8006016 <__retarget_lock_close_recursive>
 800798c:	f7fe f9bc 	bl	8005d08 <__sfp_lock_release>
 8007990:	e7ad      	b.n	80078ee <_fclose_r+0xa>
	...

08007994 <fiprintf>:
 8007994:	b40e      	push	{r1, r2, r3}
 8007996:	b503      	push	{r0, r1, lr}
 8007998:	4601      	mov	r1, r0
 800799a:	ab03      	add	r3, sp, #12
 800799c:	4805      	ldr	r0, [pc, #20]	; (80079b4 <fiprintf+0x20>)
 800799e:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a2:	6800      	ldr	r0, [r0, #0]
 80079a4:	9301      	str	r3, [sp, #4]
 80079a6:	f7ff fa17 	bl	8006dd8 <_vfiprintf_r>
 80079aa:	b002      	add	sp, #8
 80079ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b0:	b003      	add	sp, #12
 80079b2:	4770      	bx	lr
 80079b4:	2000000c 	.word	0x2000000c

080079b8 <__fputwc>:
 80079b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079bc:	4680      	mov	r8, r0
 80079be:	460e      	mov	r6, r1
 80079c0:	4615      	mov	r5, r2
 80079c2:	f000 f9cd 	bl	8007d60 <__locale_mb_cur_max>
 80079c6:	2801      	cmp	r0, #1
 80079c8:	4604      	mov	r4, r0
 80079ca:	d11b      	bne.n	8007a04 <__fputwc+0x4c>
 80079cc:	1e73      	subs	r3, r6, #1
 80079ce:	2bfe      	cmp	r3, #254	; 0xfe
 80079d0:	d818      	bhi.n	8007a04 <__fputwc+0x4c>
 80079d2:	f88d 6004 	strb.w	r6, [sp, #4]
 80079d6:	2700      	movs	r7, #0
 80079d8:	f10d 0904 	add.w	r9, sp, #4
 80079dc:	42a7      	cmp	r7, r4
 80079de:	d020      	beq.n	8007a22 <__fputwc+0x6a>
 80079e0:	68ab      	ldr	r3, [r5, #8]
 80079e2:	f817 1009 	ldrb.w	r1, [r7, r9]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	60ab      	str	r3, [r5, #8]
 80079ec:	da04      	bge.n	80079f8 <__fputwc+0x40>
 80079ee:	69aa      	ldr	r2, [r5, #24]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	db1a      	blt.n	8007a2a <__fputwc+0x72>
 80079f4:	290a      	cmp	r1, #10
 80079f6:	d018      	beq.n	8007a2a <__fputwc+0x72>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	602a      	str	r2, [r5, #0]
 80079fe:	7019      	strb	r1, [r3, #0]
 8007a00:	3701      	adds	r7, #1
 8007a02:	e7eb      	b.n	80079dc <__fputwc+0x24>
 8007a04:	4632      	mov	r2, r6
 8007a06:	4640      	mov	r0, r8
 8007a08:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8007a0c:	a901      	add	r1, sp, #4
 8007a0e:	f000 fbef 	bl	80081f0 <_wcrtomb_r>
 8007a12:	1c42      	adds	r2, r0, #1
 8007a14:	4604      	mov	r4, r0
 8007a16:	d1de      	bne.n	80079d6 <__fputwc+0x1e>
 8007a18:	4606      	mov	r6, r0
 8007a1a:	89ab      	ldrh	r3, [r5, #12]
 8007a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a20:	81ab      	strh	r3, [r5, #12]
 8007a22:	4630      	mov	r0, r6
 8007a24:	b003      	add	sp, #12
 8007a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a2a:	462a      	mov	r2, r5
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f000 fb95 	bl	800815c <__swbuf_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	d1e4      	bne.n	8007a00 <__fputwc+0x48>
 8007a36:	4606      	mov	r6, r0
 8007a38:	e7f3      	b.n	8007a22 <__fputwc+0x6a>

08007a3a <_fputwc_r>:
 8007a3a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	07db      	lsls	r3, r3, #31
 8007a40:	4605      	mov	r5, r0
 8007a42:	460e      	mov	r6, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	d405      	bmi.n	8007a54 <_fputwc_r+0x1a>
 8007a48:	8993      	ldrh	r3, [r2, #12]
 8007a4a:	0598      	lsls	r0, r3, #22
 8007a4c:	d402      	bmi.n	8007a54 <_fputwc_r+0x1a>
 8007a4e:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8007a50:	f7fe fae2 	bl	8006018 <__retarget_lock_acquire_recursive>
 8007a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a58:	0499      	lsls	r1, r3, #18
 8007a5a:	d406      	bmi.n	8007a6a <_fputwc_r+0x30>
 8007a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a68:	6663      	str	r3, [r4, #100]	; 0x64
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	4631      	mov	r1, r6
 8007a70:	f7ff ffa2 	bl	80079b8 <__fputwc>
 8007a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a76:	4605      	mov	r5, r0
 8007a78:	07da      	lsls	r2, r3, #31
 8007a7a:	d405      	bmi.n	8007a88 <_fputwc_r+0x4e>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	059b      	lsls	r3, r3, #22
 8007a80:	d402      	bmi.n	8007a88 <_fputwc_r+0x4e>
 8007a82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a84:	f7fe fac9 	bl	800601a <__retarget_lock_release_recursive>
 8007a88:	4628      	mov	r0, r5
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}

08007a8c <_fstat_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4d06      	ldr	r5, [pc, #24]	; (8007aac <_fstat_r+0x20>)
 8007a92:	4604      	mov	r4, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	f7f9 ff89 	bl	80019b0 <_fstat>
 8007a9e:	1c43      	adds	r3, r0, #1
 8007aa0:	d102      	bne.n	8007aa8 <_fstat_r+0x1c>
 8007aa2:	682b      	ldr	r3, [r5, #0]
 8007aa4:	b103      	cbz	r3, 8007aa8 <_fstat_r+0x1c>
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000a98 	.word	0x20000a98

08007ab0 <__sfvwrite_r>:
 8007ab0:	6893      	ldr	r3, [r2, #8]
 8007ab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	4690      	mov	r8, r2
 8007abc:	b91b      	cbnz	r3, 8007ac6 <__sfvwrite_r+0x16>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	b003      	add	sp, #12
 8007ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac6:	898b      	ldrh	r3, [r1, #12]
 8007ac8:	0718      	lsls	r0, r3, #28
 8007aca:	d550      	bpl.n	8007b6e <__sfvwrite_r+0xbe>
 8007acc:	690b      	ldr	r3, [r1, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d04d      	beq.n	8007b6e <__sfvwrite_r+0xbe>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f8d8 7000 	ldr.w	r7, [r8]
 8007ad8:	f013 0902 	ands.w	r9, r3, #2
 8007adc:	d16b      	bne.n	8007bb6 <__sfvwrite_r+0x106>
 8007ade:	f013 0301 	ands.w	r3, r3, #1
 8007ae2:	f000 809b 	beq.w	8007c1c <__sfvwrite_r+0x16c>
 8007ae6:	4648      	mov	r0, r9
 8007ae8:	46ca      	mov	sl, r9
 8007aea:	46cb      	mov	fp, r9
 8007aec:	f1bb 0f00 	cmp.w	fp, #0
 8007af0:	f000 8102 	beq.w	8007cf8 <__sfvwrite_r+0x248>
 8007af4:	b950      	cbnz	r0, 8007b0c <__sfvwrite_r+0x5c>
 8007af6:	465a      	mov	r2, fp
 8007af8:	210a      	movs	r1, #10
 8007afa:	4650      	mov	r0, sl
 8007afc:	f7fe fd36 	bl	800656c <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	f000 80fe 	beq.w	8007d02 <__sfvwrite_r+0x252>
 8007b06:	3001      	adds	r0, #1
 8007b08:	eba0 090a 	sub.w	r9, r0, sl
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	6921      	ldr	r1, [r4, #16]
 8007b10:	45d9      	cmp	r9, fp
 8007b12:	464a      	mov	r2, r9
 8007b14:	bf28      	it	cs
 8007b16:	465a      	movcs	r2, fp
 8007b18:	4288      	cmp	r0, r1
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	f240 80f4 	bls.w	8007d08 <__sfvwrite_r+0x258>
 8007b20:	68a5      	ldr	r5, [r4, #8]
 8007b22:	441d      	add	r5, r3
 8007b24:	42aa      	cmp	r2, r5
 8007b26:	f340 80ef 	ble.w	8007d08 <__sfvwrite_r+0x258>
 8007b2a:	4651      	mov	r1, sl
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	f000 f941 	bl	8007db4 <memmove>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	4621      	mov	r1, r4
 8007b36:	442b      	add	r3, r5
 8007b38:	4630      	mov	r0, r6
 8007b3a:	6023      	str	r3, [r4, #0]
 8007b3c:	f7fe f88a 	bl	8005c54 <_fflush_r>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d166      	bne.n	8007c12 <__sfvwrite_r+0x162>
 8007b44:	ebb9 0905 	subs.w	r9, r9, r5
 8007b48:	f040 80f6 	bne.w	8007d38 <__sfvwrite_r+0x288>
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7fe f880 	bl	8005c54 <_fflush_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d15c      	bne.n	8007c12 <__sfvwrite_r+0x162>
 8007b58:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007b5c:	44aa      	add	sl, r5
 8007b5e:	ebab 0b05 	sub.w	fp, fp, r5
 8007b62:	1b55      	subs	r5, r2, r5
 8007b64:	f8c8 5008 	str.w	r5, [r8, #8]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	d1bf      	bne.n	8007aec <__sfvwrite_r+0x3c>
 8007b6c:	e7a7      	b.n	8007abe <__sfvwrite_r+0xe>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4630      	mov	r0, r6
 8007b72:	f7fd f93b 	bl	8004dec <__swsetup_r>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d0ab      	beq.n	8007ad2 <__sfvwrite_r+0x22>
 8007b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7e:	e79f      	b.n	8007ac0 <__sfvwrite_r+0x10>
 8007b80:	e9d7 b500 	ldrd	fp, r5, [r7]
 8007b84:	3708      	adds	r7, #8
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	d0fa      	beq.n	8007b80 <__sfvwrite_r+0xd0>
 8007b8a:	4555      	cmp	r5, sl
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	465a      	mov	r2, fp
 8007b90:	bf28      	it	cs
 8007b92:	4653      	movcs	r3, sl
 8007b94:	4630      	mov	r0, r6
 8007b96:	69e1      	ldr	r1, [r4, #28]
 8007b98:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8007b9c:	47e0      	blx	ip
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dd37      	ble.n	8007c12 <__sfvwrite_r+0x162>
 8007ba2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ba6:	4483      	add	fp, r0
 8007ba8:	1a2d      	subs	r5, r5, r0
 8007baa:	1a18      	subs	r0, r3, r0
 8007bac:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d1e8      	bne.n	8007b86 <__sfvwrite_r+0xd6>
 8007bb4:	e783      	b.n	8007abe <__sfvwrite_r+0xe>
 8007bb6:	f04f 0b00 	mov.w	fp, #0
 8007bba:	f8df a180 	ldr.w	sl, [pc, #384]	; 8007d3c <__sfvwrite_r+0x28c>
 8007bbe:	465d      	mov	r5, fp
 8007bc0:	e7e1      	b.n	8007b86 <__sfvwrite_r+0xd6>
 8007bc2:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	f1ba 0f00 	cmp.w	sl, #0
 8007bcc:	d0f9      	beq.n	8007bc2 <__sfvwrite_r+0x112>
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	0599      	lsls	r1, r3, #22
 8007bd4:	68a2      	ldr	r2, [r4, #8]
 8007bd6:	d563      	bpl.n	8007ca0 <__sfvwrite_r+0x1f0>
 8007bd8:	4552      	cmp	r2, sl
 8007bda:	d836      	bhi.n	8007c4a <__sfvwrite_r+0x19a>
 8007bdc:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007be0:	d033      	beq.n	8007c4a <__sfvwrite_r+0x19a>
 8007be2:	6921      	ldr	r1, [r4, #16]
 8007be4:	6965      	ldr	r5, [r4, #20]
 8007be6:	eba0 0b01 	sub.w	fp, r0, r1
 8007bea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bf2:	f10b 0201 	add.w	r2, fp, #1
 8007bf6:	106d      	asrs	r5, r5, #1
 8007bf8:	4452      	add	r2, sl
 8007bfa:	4295      	cmp	r5, r2
 8007bfc:	bf38      	it	cc
 8007bfe:	4615      	movcc	r5, r2
 8007c00:	055b      	lsls	r3, r3, #21
 8007c02:	d53d      	bpl.n	8007c80 <__sfvwrite_r+0x1d0>
 8007c04:	4629      	mov	r1, r5
 8007c06:	4630      	mov	r0, r6
 8007c08:	f7fe fa74 	bl	80060f4 <_malloc_r>
 8007c0c:	b948      	cbnz	r0, 8007c22 <__sfvwrite_r+0x172>
 8007c0e:	230c      	movs	r3, #12
 8007c10:	6033      	str	r3, [r6, #0]
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	e7ae      	b.n	8007b7a <__sfvwrite_r+0xca>
 8007c1c:	4699      	mov	r9, r3
 8007c1e:	469a      	mov	sl, r3
 8007c20:	e7d2      	b.n	8007bc8 <__sfvwrite_r+0x118>
 8007c22:	465a      	mov	r2, fp
 8007c24:	6921      	ldr	r1, [r4, #16]
 8007c26:	9001      	str	r0, [sp, #4]
 8007c28:	f7fe fcae 	bl	8006588 <memcpy>
 8007c2c:	89a2      	ldrh	r2, [r4, #12]
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007c34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c38:	81a2      	strh	r2, [r4, #12]
 8007c3a:	4652      	mov	r2, sl
 8007c3c:	6123      	str	r3, [r4, #16]
 8007c3e:	6165      	str	r5, [r4, #20]
 8007c40:	445b      	add	r3, fp
 8007c42:	eba5 050b 	sub.w	r5, r5, fp
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	60a5      	str	r5, [r4, #8]
 8007c4a:	4552      	cmp	r2, sl
 8007c4c:	bf28      	it	cs
 8007c4e:	4652      	movcs	r2, sl
 8007c50:	4655      	mov	r5, sl
 8007c52:	4649      	mov	r1, r9
 8007c54:	6820      	ldr	r0, [r4, #0]
 8007c56:	9201      	str	r2, [sp, #4]
 8007c58:	f000 f8ac 	bl	8007db4 <memmove>
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	9a01      	ldr	r2, [sp, #4]
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	441a      	add	r2, r3
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8007c6e:	44a9      	add	r9, r5
 8007c70:	ebaa 0a05 	sub.w	sl, sl, r5
 8007c74:	1b45      	subs	r5, r0, r5
 8007c76:	f8c8 5008 	str.w	r5, [r8, #8]
 8007c7a:	2d00      	cmp	r5, #0
 8007c7c:	d1a4      	bne.n	8007bc8 <__sfvwrite_r+0x118>
 8007c7e:	e71e      	b.n	8007abe <__sfvwrite_r+0xe>
 8007c80:	462a      	mov	r2, r5
 8007c82:	4630      	mov	r0, r6
 8007c84:	f000 f8c2 	bl	8007e0c <_realloc_r>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d1d5      	bne.n	8007c3a <__sfvwrite_r+0x18a>
 8007c8e:	4630      	mov	r0, r6
 8007c90:	6921      	ldr	r1, [r4, #16]
 8007c92:	f7fe f8db 	bl	8005e4c <_free_r>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	e7b6      	b.n	8007c0e <__sfvwrite_r+0x15e>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	4283      	cmp	r3, r0
 8007ca4:	d302      	bcc.n	8007cac <__sfvwrite_r+0x1fc>
 8007ca6:	6961      	ldr	r1, [r4, #20]
 8007ca8:	4551      	cmp	r1, sl
 8007caa:	d915      	bls.n	8007cd8 <__sfvwrite_r+0x228>
 8007cac:	4552      	cmp	r2, sl
 8007cae:	bf28      	it	cs
 8007cb0:	4652      	movcs	r2, sl
 8007cb2:	4615      	mov	r5, r2
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	f000 f87d 	bl	8007db4 <memmove>
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	6822      	ldr	r2, [r4, #0]
 8007cbe:	1b5b      	subs	r3, r3, r5
 8007cc0:	442a      	add	r2, r5
 8007cc2:	60a3      	str	r3, [r4, #8]
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1cf      	bne.n	8007c6a <__sfvwrite_r+0x1ba>
 8007cca:	4621      	mov	r1, r4
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7fd ffc1 	bl	8005c54 <_fflush_r>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d0c9      	beq.n	8007c6a <__sfvwrite_r+0x1ba>
 8007cd6:	e79c      	b.n	8007c12 <__sfvwrite_r+0x162>
 8007cd8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007cdc:	459a      	cmp	sl, r3
 8007cde:	bf38      	it	cc
 8007ce0:	4653      	movcc	r3, sl
 8007ce2:	fb93 f3f1 	sdiv	r3, r3, r1
 8007ce6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007ce8:	434b      	muls	r3, r1
 8007cea:	464a      	mov	r2, r9
 8007cec:	4630      	mov	r0, r6
 8007cee:	69e1      	ldr	r1, [r4, #28]
 8007cf0:	47a8      	blx	r5
 8007cf2:	1e05      	subs	r5, r0, #0
 8007cf4:	dcb9      	bgt.n	8007c6a <__sfvwrite_r+0x1ba>
 8007cf6:	e78c      	b.n	8007c12 <__sfvwrite_r+0x162>
 8007cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	3708      	adds	r7, #8
 8007d00:	e6f4      	b.n	8007aec <__sfvwrite_r+0x3c>
 8007d02:	f10b 0901 	add.w	r9, fp, #1
 8007d06:	e701      	b.n	8007b0c <__sfvwrite_r+0x5c>
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	dc08      	bgt.n	8007d1e <__sfvwrite_r+0x26e>
 8007d0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007d0e:	4652      	mov	r2, sl
 8007d10:	4630      	mov	r0, r6
 8007d12:	69e1      	ldr	r1, [r4, #28]
 8007d14:	47a8      	blx	r5
 8007d16:	1e05      	subs	r5, r0, #0
 8007d18:	f73f af14 	bgt.w	8007b44 <__sfvwrite_r+0x94>
 8007d1c:	e779      	b.n	8007c12 <__sfvwrite_r+0x162>
 8007d1e:	4651      	mov	r1, sl
 8007d20:	9201      	str	r2, [sp, #4]
 8007d22:	f000 f847 	bl	8007db4 <memmove>
 8007d26:	9a01      	ldr	r2, [sp, #4]
 8007d28:	68a3      	ldr	r3, [r4, #8]
 8007d2a:	4615      	mov	r5, r2
 8007d2c:	1a9b      	subs	r3, r3, r2
 8007d2e:	60a3      	str	r3, [r4, #8]
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	4413      	add	r3, r2
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	e705      	b.n	8007b44 <__sfvwrite_r+0x94>
 8007d38:	2001      	movs	r0, #1
 8007d3a:	e70d      	b.n	8007b58 <__sfvwrite_r+0xa8>
 8007d3c:	7ffffc00 	.word	0x7ffffc00

08007d40 <_isatty_r>:
 8007d40:	b538      	push	{r3, r4, r5, lr}
 8007d42:	2300      	movs	r3, #0
 8007d44:	4d05      	ldr	r5, [pc, #20]	; (8007d5c <_isatty_r+0x1c>)
 8007d46:	4604      	mov	r4, r0
 8007d48:	4608      	mov	r0, r1
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	f7f9 fe3f 	bl	80019ce <_isatty>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d102      	bne.n	8007d5a <_isatty_r+0x1a>
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	b103      	cbz	r3, 8007d5a <_isatty_r+0x1a>
 8007d58:	6023      	str	r3, [r4, #0]
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	20000a98 	.word	0x20000a98

08007d60 <__locale_mb_cur_max>:
 8007d60:	4b01      	ldr	r3, [pc, #4]	; (8007d68 <__locale_mb_cur_max+0x8>)
 8007d62:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007d66:	4770      	bx	lr
 8007d68:	2000084c 	.word	0x2000084c

08007d6c <_lseek_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	4d05      	ldr	r5, [pc, #20]	; (8007d8c <_lseek_r+0x20>)
 8007d78:	602a      	str	r2, [r5, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f7f9 fe31 	bl	80019e2 <_lseek>
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	d102      	bne.n	8007d8a <_lseek_r+0x1e>
 8007d84:	682b      	ldr	r3, [r5, #0]
 8007d86:	b103      	cbz	r3, 8007d8a <_lseek_r+0x1e>
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	20000a98 	.word	0x20000a98

08007d90 <__ascii_mbtowc>:
 8007d90:	b082      	sub	sp, #8
 8007d92:	b901      	cbnz	r1, 8007d96 <__ascii_mbtowc+0x6>
 8007d94:	a901      	add	r1, sp, #4
 8007d96:	b142      	cbz	r2, 8007daa <__ascii_mbtowc+0x1a>
 8007d98:	b14b      	cbz	r3, 8007dae <__ascii_mbtowc+0x1e>
 8007d9a:	7813      	ldrb	r3, [r2, #0]
 8007d9c:	600b      	str	r3, [r1, #0]
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	1e10      	subs	r0, r2, #0
 8007da2:	bf18      	it	ne
 8007da4:	2001      	movne	r0, #1
 8007da6:	b002      	add	sp, #8
 8007da8:	4770      	bx	lr
 8007daa:	4610      	mov	r0, r2
 8007dac:	e7fb      	b.n	8007da6 <__ascii_mbtowc+0x16>
 8007dae:	f06f 0001 	mvn.w	r0, #1
 8007db2:	e7f8      	b.n	8007da6 <__ascii_mbtowc+0x16>

08007db4 <memmove>:
 8007db4:	4288      	cmp	r0, r1
 8007db6:	b510      	push	{r4, lr}
 8007db8:	eb01 0402 	add.w	r4, r1, r2
 8007dbc:	d902      	bls.n	8007dc4 <memmove+0x10>
 8007dbe:	4284      	cmp	r4, r0
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	d807      	bhi.n	8007dd4 <memmove+0x20>
 8007dc4:	1e43      	subs	r3, r0, #1
 8007dc6:	42a1      	cmp	r1, r4
 8007dc8:	d008      	beq.n	8007ddc <memmove+0x28>
 8007dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd2:	e7f8      	b.n	8007dc6 <memmove+0x12>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4402      	add	r2, r0
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d100      	bne.n	8007dde <memmove+0x2a>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de6:	e7f7      	b.n	8007dd8 <memmove+0x24>

08007de8 <_read_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4604      	mov	r4, r0
 8007dec:	4608      	mov	r0, r1
 8007dee:	4611      	mov	r1, r2
 8007df0:	2200      	movs	r2, #0
 8007df2:	4d05      	ldr	r5, [pc, #20]	; (8007e08 <_read_r+0x20>)
 8007df4:	602a      	str	r2, [r5, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f7f9 fd96 	bl	8001928 <_read>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	d102      	bne.n	8007e06 <_read_r+0x1e>
 8007e00:	682b      	ldr	r3, [r5, #0]
 8007e02:	b103      	cbz	r3, 8007e06 <_read_r+0x1e>
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	20000a98 	.word	0x20000a98

08007e0c <_realloc_r>:
 8007e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e10:	460c      	mov	r4, r1
 8007e12:	4681      	mov	r9, r0
 8007e14:	4611      	mov	r1, r2
 8007e16:	b924      	cbnz	r4, 8007e22 <_realloc_r+0x16>
 8007e18:	b003      	add	sp, #12
 8007e1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1e:	f7fe b969 	b.w	80060f4 <_malloc_r>
 8007e22:	9201      	str	r2, [sp, #4]
 8007e24:	f7fe fbbe 	bl	80065a4 <__malloc_lock>
 8007e28:	9901      	ldr	r1, [sp, #4]
 8007e2a:	f101 080b 	add.w	r8, r1, #11
 8007e2e:	f1b8 0f16 	cmp.w	r8, #22
 8007e32:	d90b      	bls.n	8007e4c <_realloc_r+0x40>
 8007e34:	f038 0807 	bics.w	r8, r8, #7
 8007e38:	d50a      	bpl.n	8007e50 <_realloc_r+0x44>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	f04f 0b00 	mov.w	fp, #0
 8007e40:	f8c9 3000 	str.w	r3, [r9]
 8007e44:	4658      	mov	r0, fp
 8007e46:	b003      	add	sp, #12
 8007e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4c:	f04f 0810 	mov.w	r8, #16
 8007e50:	4588      	cmp	r8, r1
 8007e52:	d3f2      	bcc.n	8007e3a <_realloc_r+0x2e>
 8007e54:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007e58:	f1a4 0a08 	sub.w	sl, r4, #8
 8007e5c:	f025 0603 	bic.w	r6, r5, #3
 8007e60:	45b0      	cmp	r8, r6
 8007e62:	f340 8171 	ble.w	8008148 <_realloc_r+0x33c>
 8007e66:	4a9c      	ldr	r2, [pc, #624]	; (80080d8 <_realloc_r+0x2cc>)
 8007e68:	eb0a 0306 	add.w	r3, sl, r6
 8007e6c:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	459c      	cmp	ip, r3
 8007e74:	d005      	beq.n	8007e82 <_realloc_r+0x76>
 8007e76:	f022 0001 	bic.w	r0, r2, #1
 8007e7a:	4418      	add	r0, r3
 8007e7c:	6840      	ldr	r0, [r0, #4]
 8007e7e:	07c7      	lsls	r7, r0, #31
 8007e80:	d427      	bmi.n	8007ed2 <_realloc_r+0xc6>
 8007e82:	f022 0203 	bic.w	r2, r2, #3
 8007e86:	459c      	cmp	ip, r3
 8007e88:	eb06 0702 	add.w	r7, r6, r2
 8007e8c:	d119      	bne.n	8007ec2 <_realloc_r+0xb6>
 8007e8e:	f108 0010 	add.w	r0, r8, #16
 8007e92:	42b8      	cmp	r0, r7
 8007e94:	dc1f      	bgt.n	8007ed6 <_realloc_r+0xca>
 8007e96:	4a90      	ldr	r2, [pc, #576]	; (80080d8 <_realloc_r+0x2cc>)
 8007e98:	eba7 0708 	sub.w	r7, r7, r8
 8007e9c:	eb0a 0308 	add.w	r3, sl, r8
 8007ea0:	f047 0701 	orr.w	r7, r7, #1
 8007ea4:	6093      	str	r3, [r2, #8]
 8007ea6:	605f      	str	r7, [r3, #4]
 8007ea8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007eac:	4648      	mov	r0, r9
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	ea43 0308 	orr.w	r3, r3, r8
 8007eb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eba:	f7fe fb79 	bl	80065b0 <__malloc_unlock>
 8007ebe:	46a3      	mov	fp, r4
 8007ec0:	e7c0      	b.n	8007e44 <_realloc_r+0x38>
 8007ec2:	45b8      	cmp	r8, r7
 8007ec4:	dc07      	bgt.n	8007ed6 <_realloc_r+0xca>
 8007ec6:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	6093      	str	r3, [r2, #8]
 8007ece:	4655      	mov	r5, sl
 8007ed0:	e080      	b.n	8007fd4 <_realloc_r+0x1c8>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	07e8      	lsls	r0, r5, #31
 8007ed8:	f100 80e8 	bmi.w	80080ac <_realloc_r+0x2a0>
 8007edc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007ee0:	ebaa 0505 	sub.w	r5, sl, r5
 8007ee4:	6868      	ldr	r0, [r5, #4]
 8007ee6:	f020 0003 	bic.w	r0, r0, #3
 8007eea:	eb00 0b06 	add.w	fp, r0, r6
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80a7 	beq.w	8008042 <_realloc_r+0x236>
 8007ef4:	459c      	cmp	ip, r3
 8007ef6:	eb02 070b 	add.w	r7, r2, fp
 8007efa:	d14b      	bne.n	8007f94 <_realloc_r+0x188>
 8007efc:	f108 0310 	add.w	r3, r8, #16
 8007f00:	42bb      	cmp	r3, r7
 8007f02:	f300 809e 	bgt.w	8008042 <_realloc_r+0x236>
 8007f06:	46ab      	mov	fp, r5
 8007f08:	68eb      	ldr	r3, [r5, #12]
 8007f0a:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007f0e:	60d3      	str	r3, [r2, #12]
 8007f10:	609a      	str	r2, [r3, #8]
 8007f12:	1f32      	subs	r2, r6, #4
 8007f14:	2a24      	cmp	r2, #36	; 0x24
 8007f16:	d838      	bhi.n	8007f8a <_realloc_r+0x17e>
 8007f18:	2a13      	cmp	r2, #19
 8007f1a:	d934      	bls.n	8007f86 <_realloc_r+0x17a>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	2a1b      	cmp	r2, #27
 8007f20:	60ab      	str	r3, [r5, #8]
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	60eb      	str	r3, [r5, #12]
 8007f26:	d81b      	bhi.n	8007f60 <_realloc_r+0x154>
 8007f28:	3408      	adds	r4, #8
 8007f2a:	f105 0310 	add.w	r3, r5, #16
 8007f2e:	6822      	ldr	r2, [r4, #0]
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	68a2      	ldr	r2, [r4, #8]
 8007f38:	609a      	str	r2, [r3, #8]
 8007f3a:	4a67      	ldr	r2, [pc, #412]	; (80080d8 <_realloc_r+0x2cc>)
 8007f3c:	eba7 0708 	sub.w	r7, r7, r8
 8007f40:	eb05 0308 	add.w	r3, r5, r8
 8007f44:	f047 0701 	orr.w	r7, r7, #1
 8007f48:	6093      	str	r3, [r2, #8]
 8007f4a:	605f      	str	r7, [r3, #4]
 8007f4c:	686b      	ldr	r3, [r5, #4]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	ea43 0308 	orr.w	r3, r3, r8
 8007f56:	606b      	str	r3, [r5, #4]
 8007f58:	4648      	mov	r0, r9
 8007f5a:	f7fe fb29 	bl	80065b0 <__malloc_unlock>
 8007f5e:	e771      	b.n	8007e44 <_realloc_r+0x38>
 8007f60:	68a3      	ldr	r3, [r4, #8]
 8007f62:	2a24      	cmp	r2, #36	; 0x24
 8007f64:	612b      	str	r3, [r5, #16]
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	bf18      	it	ne
 8007f6a:	3410      	addne	r4, #16
 8007f6c:	616b      	str	r3, [r5, #20]
 8007f6e:	bf09      	itett	eq
 8007f70:	6923      	ldreq	r3, [r4, #16]
 8007f72:	f105 0318 	addne.w	r3, r5, #24
 8007f76:	61ab      	streq	r3, [r5, #24]
 8007f78:	6962      	ldreq	r2, [r4, #20]
 8007f7a:	bf02      	ittt	eq
 8007f7c:	f105 0320 	addeq.w	r3, r5, #32
 8007f80:	61ea      	streq	r2, [r5, #28]
 8007f82:	3418      	addeq	r4, #24
 8007f84:	e7d3      	b.n	8007f2e <_realloc_r+0x122>
 8007f86:	465b      	mov	r3, fp
 8007f88:	e7d1      	b.n	8007f2e <_realloc_r+0x122>
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	4658      	mov	r0, fp
 8007f8e:	f7ff ff11 	bl	8007db4 <memmove>
 8007f92:	e7d2      	b.n	8007f3a <_realloc_r+0x12e>
 8007f94:	45b8      	cmp	r8, r7
 8007f96:	dc54      	bgt.n	8008042 <_realloc_r+0x236>
 8007f98:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	60da      	str	r2, [r3, #12]
 8007fa0:	6093      	str	r3, [r2, #8]
 8007fa2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007fa6:	68eb      	ldr	r3, [r5, #12]
 8007fa8:	60d3      	str	r3, [r2, #12]
 8007faa:	609a      	str	r2, [r3, #8]
 8007fac:	1f32      	subs	r2, r6, #4
 8007fae:	2a24      	cmp	r2, #36	; 0x24
 8007fb0:	d843      	bhi.n	800803a <_realloc_r+0x22e>
 8007fb2:	2a13      	cmp	r2, #19
 8007fb4:	d908      	bls.n	8007fc8 <_realloc_r+0x1bc>
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	2a1b      	cmp	r2, #27
 8007fba:	60ab      	str	r3, [r5, #8]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	60eb      	str	r3, [r5, #12]
 8007fc0:	d828      	bhi.n	8008014 <_realloc_r+0x208>
 8007fc2:	3408      	adds	r4, #8
 8007fc4:	f105 0010 	add.w	r0, r5, #16
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	6003      	str	r3, [r0, #0]
 8007fcc:	6863      	ldr	r3, [r4, #4]
 8007fce:	6043      	str	r3, [r0, #4]
 8007fd0:	68a3      	ldr	r3, [r4, #8]
 8007fd2:	6083      	str	r3, [r0, #8]
 8007fd4:	686b      	ldr	r3, [r5, #4]
 8007fd6:	eba7 0008 	sub.w	r0, r7, r8
 8007fda:	280f      	cmp	r0, #15
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	eb05 0207 	add.w	r2, r5, r7
 8007fe4:	f240 80b2 	bls.w	800814c <_realloc_r+0x340>
 8007fe8:	eb05 0108 	add.w	r1, r5, r8
 8007fec:	ea48 0303 	orr.w	r3, r8, r3
 8007ff0:	f040 0001 	orr.w	r0, r0, #1
 8007ff4:	606b      	str	r3, [r5, #4]
 8007ff6:	6048      	str	r0, [r1, #4]
 8007ff8:	6853      	ldr	r3, [r2, #4]
 8007ffa:	4648      	mov	r0, r9
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	6053      	str	r3, [r2, #4]
 8008002:	3108      	adds	r1, #8
 8008004:	f7fd ff22 	bl	8005e4c <_free_r>
 8008008:	4648      	mov	r0, r9
 800800a:	f7fe fad1 	bl	80065b0 <__malloc_unlock>
 800800e:	f105 0b08 	add.w	fp, r5, #8
 8008012:	e717      	b.n	8007e44 <_realloc_r+0x38>
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	2a24      	cmp	r2, #36	; 0x24
 8008018:	612b      	str	r3, [r5, #16]
 800801a:	68e3      	ldr	r3, [r4, #12]
 800801c:	bf18      	it	ne
 800801e:	f105 0018 	addne.w	r0, r5, #24
 8008022:	616b      	str	r3, [r5, #20]
 8008024:	bf09      	itett	eq
 8008026:	6923      	ldreq	r3, [r4, #16]
 8008028:	3410      	addne	r4, #16
 800802a:	61ab      	streq	r3, [r5, #24]
 800802c:	6963      	ldreq	r3, [r4, #20]
 800802e:	bf02      	ittt	eq
 8008030:	f105 0020 	addeq.w	r0, r5, #32
 8008034:	61eb      	streq	r3, [r5, #28]
 8008036:	3418      	addeq	r4, #24
 8008038:	e7c6      	b.n	8007fc8 <_realloc_r+0x1bc>
 800803a:	4621      	mov	r1, r4
 800803c:	f7ff feba 	bl	8007db4 <memmove>
 8008040:	e7c8      	b.n	8007fd4 <_realloc_r+0x1c8>
 8008042:	45d8      	cmp	r8, fp
 8008044:	dc32      	bgt.n	80080ac <_realloc_r+0x2a0>
 8008046:	4628      	mov	r0, r5
 8008048:	68eb      	ldr	r3, [r5, #12]
 800804a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800804e:	60d3      	str	r3, [r2, #12]
 8008050:	609a      	str	r2, [r3, #8]
 8008052:	1f32      	subs	r2, r6, #4
 8008054:	2a24      	cmp	r2, #36	; 0x24
 8008056:	d825      	bhi.n	80080a4 <_realloc_r+0x298>
 8008058:	2a13      	cmp	r2, #19
 800805a:	d908      	bls.n	800806e <_realloc_r+0x262>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	2a1b      	cmp	r2, #27
 8008060:	60ab      	str	r3, [r5, #8]
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	60eb      	str	r3, [r5, #12]
 8008066:	d80a      	bhi.n	800807e <_realloc_r+0x272>
 8008068:	3408      	adds	r4, #8
 800806a:	f105 0010 	add.w	r0, r5, #16
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	6003      	str	r3, [r0, #0]
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	6043      	str	r3, [r0, #4]
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	6083      	str	r3, [r0, #8]
 800807a:	465f      	mov	r7, fp
 800807c:	e7aa      	b.n	8007fd4 <_realloc_r+0x1c8>
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	2a24      	cmp	r2, #36	; 0x24
 8008082:	612b      	str	r3, [r5, #16]
 8008084:	68e3      	ldr	r3, [r4, #12]
 8008086:	bf18      	it	ne
 8008088:	f105 0018 	addne.w	r0, r5, #24
 800808c:	616b      	str	r3, [r5, #20]
 800808e:	bf09      	itett	eq
 8008090:	6923      	ldreq	r3, [r4, #16]
 8008092:	3410      	addne	r4, #16
 8008094:	61ab      	streq	r3, [r5, #24]
 8008096:	6963      	ldreq	r3, [r4, #20]
 8008098:	bf02      	ittt	eq
 800809a:	f105 0020 	addeq.w	r0, r5, #32
 800809e:	61eb      	streq	r3, [r5, #28]
 80080a0:	3418      	addeq	r4, #24
 80080a2:	e7e4      	b.n	800806e <_realloc_r+0x262>
 80080a4:	4621      	mov	r1, r4
 80080a6:	f7ff fe85 	bl	8007db4 <memmove>
 80080aa:	e7e6      	b.n	800807a <_realloc_r+0x26e>
 80080ac:	4648      	mov	r0, r9
 80080ae:	f7fe f821 	bl	80060f4 <_malloc_r>
 80080b2:	4683      	mov	fp, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	f43f af4f 	beq.w	8007f58 <_realloc_r+0x14c>
 80080ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80080be:	f1a0 0208 	sub.w	r2, r0, #8
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	4453      	add	r3, sl
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d107      	bne.n	80080dc <_realloc_r+0x2d0>
 80080cc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80080d0:	f027 0703 	bic.w	r7, r7, #3
 80080d4:	4437      	add	r7, r6
 80080d6:	e6fa      	b.n	8007ece <_realloc_r+0xc2>
 80080d8:	2000043c 	.word	0x2000043c
 80080dc:	1f32      	subs	r2, r6, #4
 80080de:	2a24      	cmp	r2, #36	; 0x24
 80080e0:	d82e      	bhi.n	8008140 <_realloc_r+0x334>
 80080e2:	2a13      	cmp	r2, #19
 80080e4:	d929      	bls.n	800813a <_realloc_r+0x32e>
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	2a1b      	cmp	r2, #27
 80080ea:	6003      	str	r3, [r0, #0]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	6043      	str	r3, [r0, #4]
 80080f0:	d80e      	bhi.n	8008110 <_realloc_r+0x304>
 80080f2:	f104 0208 	add.w	r2, r4, #8
 80080f6:	f100 0308 	add.w	r3, r0, #8
 80080fa:	6811      	ldr	r1, [r2, #0]
 80080fc:	6019      	str	r1, [r3, #0]
 80080fe:	6851      	ldr	r1, [r2, #4]
 8008100:	6059      	str	r1, [r3, #4]
 8008102:	6892      	ldr	r2, [r2, #8]
 8008104:	609a      	str	r2, [r3, #8]
 8008106:	4621      	mov	r1, r4
 8008108:	4648      	mov	r0, r9
 800810a:	f7fd fe9f 	bl	8005e4c <_free_r>
 800810e:	e723      	b.n	8007f58 <_realloc_r+0x14c>
 8008110:	68a3      	ldr	r3, [r4, #8]
 8008112:	2a24      	cmp	r2, #36	; 0x24
 8008114:	6083      	str	r3, [r0, #8]
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	bf18      	it	ne
 800811a:	f104 0210 	addne.w	r2, r4, #16
 800811e:	60c3      	str	r3, [r0, #12]
 8008120:	bf09      	itett	eq
 8008122:	6923      	ldreq	r3, [r4, #16]
 8008124:	f100 0310 	addne.w	r3, r0, #16
 8008128:	6103      	streq	r3, [r0, #16]
 800812a:	6961      	ldreq	r1, [r4, #20]
 800812c:	bf02      	ittt	eq
 800812e:	f104 0218 	addeq.w	r2, r4, #24
 8008132:	f100 0318 	addeq.w	r3, r0, #24
 8008136:	6141      	streq	r1, [r0, #20]
 8008138:	e7df      	b.n	80080fa <_realloc_r+0x2ee>
 800813a:	4603      	mov	r3, r0
 800813c:	4622      	mov	r2, r4
 800813e:	e7dc      	b.n	80080fa <_realloc_r+0x2ee>
 8008140:	4621      	mov	r1, r4
 8008142:	f7ff fe37 	bl	8007db4 <memmove>
 8008146:	e7de      	b.n	8008106 <_realloc_r+0x2fa>
 8008148:	4637      	mov	r7, r6
 800814a:	e6c0      	b.n	8007ece <_realloc_r+0xc2>
 800814c:	431f      	orrs	r7, r3
 800814e:	606f      	str	r7, [r5, #4]
 8008150:	6853      	ldr	r3, [r2, #4]
 8008152:	f043 0301 	orr.w	r3, r3, #1
 8008156:	6053      	str	r3, [r2, #4]
 8008158:	e756      	b.n	8008008 <_realloc_r+0x1fc>
 800815a:	bf00      	nop

0800815c <__swbuf_r>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	460e      	mov	r6, r1
 8008160:	4614      	mov	r4, r2
 8008162:	4605      	mov	r5, r0
 8008164:	b118      	cbz	r0, 800816e <__swbuf_r+0x12>
 8008166:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008168:	b90b      	cbnz	r3, 800816e <__swbuf_r+0x12>
 800816a:	f7fd fddf 	bl	8005d2c <__sinit>
 800816e:	69a3      	ldr	r3, [r4, #24]
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	d529      	bpl.n	80081cc <__swbuf_r+0x70>
 8008178:	6923      	ldr	r3, [r4, #16]
 800817a:	b33b      	cbz	r3, 80081cc <__swbuf_r+0x70>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	b2f6      	uxtb	r6, r6
 8008182:	049a      	lsls	r2, r3, #18
 8008184:	4637      	mov	r7, r6
 8008186:	d52a      	bpl.n	80081de <__swbuf_r+0x82>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	6920      	ldr	r0, [r4, #16]
 800818c:	1a18      	subs	r0, r3, r0
 800818e:	6963      	ldr	r3, [r4, #20]
 8008190:	4283      	cmp	r3, r0
 8008192:	dc04      	bgt.n	800819e <__swbuf_r+0x42>
 8008194:	4621      	mov	r1, r4
 8008196:	4628      	mov	r0, r5
 8008198:	f7fd fd5c 	bl	8005c54 <_fflush_r>
 800819c:	b9e0      	cbnz	r0, 80081d8 <__swbuf_r+0x7c>
 800819e:	68a3      	ldr	r3, [r4, #8]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	60a3      	str	r3, [r4, #8]
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	6022      	str	r2, [r4, #0]
 80081aa:	701e      	strb	r6, [r3, #0]
 80081ac:	6962      	ldr	r2, [r4, #20]
 80081ae:	1c43      	adds	r3, r0, #1
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d004      	beq.n	80081be <__swbuf_r+0x62>
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	07db      	lsls	r3, r3, #31
 80081b8:	d506      	bpl.n	80081c8 <__swbuf_r+0x6c>
 80081ba:	2e0a      	cmp	r6, #10
 80081bc:	d104      	bne.n	80081c8 <__swbuf_r+0x6c>
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f7fd fd47 	bl	8005c54 <_fflush_r>
 80081c6:	b938      	cbnz	r0, 80081d8 <__swbuf_r+0x7c>
 80081c8:	4638      	mov	r0, r7
 80081ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7fc fe0c 	bl	8004dec <__swsetup_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d0d1      	beq.n	800817c <__swbuf_r+0x20>
 80081d8:	f04f 37ff 	mov.w	r7, #4294967295
 80081dc:	e7f4      	b.n	80081c8 <__swbuf_r+0x6c>
 80081de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081ea:	6663      	str	r3, [r4, #100]	; 0x64
 80081ec:	e7cc      	b.n	8008188 <__swbuf_r+0x2c>
	...

080081f0 <_wcrtomb_r>:
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	4c09      	ldr	r4, [pc, #36]	; (8008218 <_wcrtomb_r+0x28>)
 80081f4:	4605      	mov	r5, r0
 80081f6:	461e      	mov	r6, r3
 80081f8:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 80081fc:	b085      	sub	sp, #20
 80081fe:	b909      	cbnz	r1, 8008204 <_wcrtomb_r+0x14>
 8008200:	460a      	mov	r2, r1
 8008202:	a901      	add	r1, sp, #4
 8008204:	47b8      	blx	r7
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	bf01      	itttt	eq
 800820a:	2300      	moveq	r3, #0
 800820c:	6033      	streq	r3, [r6, #0]
 800820e:	238a      	moveq	r3, #138	; 0x8a
 8008210:	602b      	streq	r3, [r5, #0]
 8008212:	b005      	add	sp, #20
 8008214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008216:	bf00      	nop
 8008218:	2000084c 	.word	0x2000084c

0800821c <__ascii_wctomb>:
 800821c:	4603      	mov	r3, r0
 800821e:	4608      	mov	r0, r1
 8008220:	b141      	cbz	r1, 8008234 <__ascii_wctomb+0x18>
 8008222:	2aff      	cmp	r2, #255	; 0xff
 8008224:	d904      	bls.n	8008230 <__ascii_wctomb+0x14>
 8008226:	228a      	movs	r2, #138	; 0x8a
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	4770      	bx	lr
 8008230:	2001      	movs	r0, #1
 8008232:	700a      	strb	r2, [r1, #0]
 8008234:	4770      	bx	lr

08008236 <abort>:
 8008236:	2006      	movs	r0, #6
 8008238:	b508      	push	{r3, lr}
 800823a:	f000 f82d 	bl	8008298 <raise>
 800823e:	2001      	movs	r0, #1
 8008240:	f7f9 fb68 	bl	8001914 <_exit>

08008244 <_raise_r>:
 8008244:	291f      	cmp	r1, #31
 8008246:	b538      	push	{r3, r4, r5, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	460d      	mov	r5, r1
 800824c:	d904      	bls.n	8008258 <_raise_r+0x14>
 800824e:	2316      	movs	r3, #22
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800825c:	b112      	cbz	r2, 8008264 <_raise_r+0x20>
 800825e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008262:	b94b      	cbnz	r3, 8008278 <_raise_r+0x34>
 8008264:	4620      	mov	r0, r4
 8008266:	f000 f831 	bl	80082cc <_getpid_r>
 800826a:	462a      	mov	r2, r5
 800826c:	4601      	mov	r1, r0
 800826e:	4620      	mov	r0, r4
 8008270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008274:	f000 b818 	b.w	80082a8 <_kill_r>
 8008278:	2b01      	cmp	r3, #1
 800827a:	d00a      	beq.n	8008292 <_raise_r+0x4e>
 800827c:	1c59      	adds	r1, r3, #1
 800827e:	d103      	bne.n	8008288 <_raise_r+0x44>
 8008280:	2316      	movs	r3, #22
 8008282:	6003      	str	r3, [r0, #0]
 8008284:	2001      	movs	r0, #1
 8008286:	e7e6      	b.n	8008256 <_raise_r+0x12>
 8008288:	2400      	movs	r4, #0
 800828a:	4628      	mov	r0, r5
 800828c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008290:	4798      	blx	r3
 8008292:	2000      	movs	r0, #0
 8008294:	e7df      	b.n	8008256 <_raise_r+0x12>
	...

08008298 <raise>:
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <raise+0xc>)
 800829a:	4601      	mov	r1, r0
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f7ff bfd1 	b.w	8008244 <_raise_r>
 80082a2:	bf00      	nop
 80082a4:	2000000c 	.word	0x2000000c

080082a8 <_kill_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	2300      	movs	r3, #0
 80082ac:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_kill_r+0x20>)
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	4611      	mov	r1, r2
 80082b4:	602b      	str	r3, [r5, #0]
 80082b6:	f7f9 fb1d 	bl	80018f4 <_kill>
 80082ba:	1c43      	adds	r3, r0, #1
 80082bc:	d102      	bne.n	80082c4 <_kill_r+0x1c>
 80082be:	682b      	ldr	r3, [r5, #0]
 80082c0:	b103      	cbz	r3, 80082c4 <_kill_r+0x1c>
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	bf00      	nop
 80082c8:	20000a98 	.word	0x20000a98

080082cc <_getpid_r>:
 80082cc:	f7f9 bb0b 	b.w	80018e6 <_getpid>

080082d0 <_init>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr

080082dc <_fini>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr
