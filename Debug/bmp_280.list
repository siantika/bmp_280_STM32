
bmp_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000353c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08003648  08003648  00013648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800373c  0800373c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  080037b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080037b4  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000687a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001400  00000000  00000000  00026913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00027d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bf  00000000  00000000  00028b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009081  00000000  00000000  00040317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083941  00000000  00000000  00049398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cccd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002550  00000000  00000000  000ccd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003630 	.word	0x08003630

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003630 	.word	0x08003630

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbb3 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f9bd 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa25 	bl	80005a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f9f5 	bl	800054c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TrimRead();
 8000162:	f000 f823 	bl	80001ac <TrimRead>
  HAL_Delay(500);
 8000166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800016a:	f000 fc09 	bl	8000980 <HAL_Delay>
  int status_bmp =  BMP280_config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800016e:	2304      	movs	r3, #4
 8000170:	9301      	str	r3, [sp, #4]
 8000172:	2300      	movs	r3, #0
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2303      	movs	r3, #3
 8000178:	2201      	movs	r2, #1
 800017a:	2105      	movs	r1, #5
 800017c:	2002      	movs	r0, #2
 800017e:	f000 f8b9 	bl	80002f4 <BMP280_config>
 8000182:	6078      	str	r0, [r7, #4]
  int status_raw = BMPReadRaw();
 8000184:	f000 f95e 	bl	8000444 <BMPReadRaw>
 8000188:	6038      	str	r0, [r7, #0]
  printf("Status bmp is : %d \r \n ", status_bmp);
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4805      	ldr	r0, [pc, #20]	; (80001a4 <main+0x58>)
 800018e:	f002 fabb 	bl	8002708 <iprintf>
  printf("Status raw is : %d \r \n ", status_raw);
 8000192:	6839      	ldr	r1, [r7, #0]
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <main+0x5c>)
 8000196:	f002 fab7 	bl	8002708 <iprintf>

  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(500);
 800019a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019e:	f000 fbef 	bl	8000980 <HAL_Delay>
 80001a2:	e7fa      	b.n	800019a <main+0x4e>
 80001a4:	08003648 	.word	0x08003648
 80001a8:	08003660 	.word	0x08003660

080001ac <TrimRead>:



// USER functions
void TrimRead()
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b08c      	sub	sp, #48	; 0x30
 80001b0:	af04      	add	r7, sp, #16
	uint8_t trimdata[25];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295
 80001b6:	9302      	str	r3, [sp, #8]
 80001b8:	2319      	movs	r3, #25
 80001ba:	9301      	str	r3, [sp, #4]
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	9300      	str	r3, [sp, #0]
 80001c0:	2301      	movs	r3, #1
 80001c2:	2288      	movs	r2, #136	; 0x88
 80001c4:	21ec      	movs	r1, #236	; 0xec
 80001c6:	483d      	ldr	r0, [pc, #244]	; (80002bc <TrimRead+0x110>)
 80001c8:	f001 f8a4 	bl	8001314 <HAL_I2C_Mem_Read>


	// Arrange the data as per the datasheet (page no. 21)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80001cc:	797b      	ldrb	r3, [r7, #5]
 80001ce:	021b      	lsls	r3, r3, #8
 80001d0:	b21a      	sxth	r2, r3
 80001d2:	793b      	ldrb	r3, [r7, #4]
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	4313      	orrs	r3, r2
 80001d8:	b21b      	sxth	r3, r3
 80001da:	b29a      	uxth	r2, r3
 80001dc:	4b38      	ldr	r3, [pc, #224]	; (80002c0 <TrimRead+0x114>)
 80001de:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	021b      	lsls	r3, r3, #8
 80001e4:	b21a      	sxth	r2, r3
 80001e6:	79bb      	ldrb	r3, [r7, #6]
 80001e8:	b21b      	sxth	r3, r3
 80001ea:	4313      	orrs	r3, r2
 80001ec:	b21a      	sxth	r2, r3
 80001ee:	4b35      	ldr	r3, [pc, #212]	; (80002c4 <TrimRead+0x118>)
 80001f0:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80001f2:	7a7b      	ldrb	r3, [r7, #9]
 80001f4:	021b      	lsls	r3, r3, #8
 80001f6:	b21a      	sxth	r2, r3
 80001f8:	7a3b      	ldrb	r3, [r7, #8]
 80001fa:	b21b      	sxth	r3, r3
 80001fc:	4313      	orrs	r3, r2
 80001fe:	b21a      	sxth	r2, r3
 8000200:	4b31      	ldr	r3, [pc, #196]	; (80002c8 <TrimRead+0x11c>)
 8000202:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8000204:	7afb      	ldrb	r3, [r7, #11]
 8000206:	021b      	lsls	r3, r3, #8
 8000208:	b21a      	sxth	r2, r3
 800020a:	7a7b      	ldrb	r3, [r7, #9]
 800020c:	b21b      	sxth	r3, r3
 800020e:	4313      	orrs	r3, r2
 8000210:	b21b      	sxth	r3, r3
 8000212:	b29a      	uxth	r2, r3
 8000214:	4b2d      	ldr	r3, [pc, #180]	; (80002cc <TrimRead+0x120>)
 8000216:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21a      	sxth	r2, r3
 800021e:	7abb      	ldrb	r3, [r7, #10]
 8000220:	b21b      	sxth	r3, r3
 8000222:	4313      	orrs	r3, r2
 8000224:	b21a      	sxth	r2, r3
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <TrimRead+0x124>)
 8000228:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	021b      	lsls	r3, r3, #8
 800022e:	b21a      	sxth	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	b21b      	sxth	r3, r3
 8000234:	4313      	orrs	r3, r2
 8000236:	b21a      	sxth	r2, r3
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <TrimRead+0x128>)
 800023a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800023c:	7c7b      	ldrb	r3, [r7, #17]
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	b21a      	sxth	r2, r3
 8000242:	7c3b      	ldrb	r3, [r7, #16]
 8000244:	b21b      	sxth	r3, r3
 8000246:	4313      	orrs	r3, r2
 8000248:	b21a      	sxth	r2, r3
 800024a:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <TrimRead+0x12c>)
 800024c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800024e:	7cfb      	ldrb	r3, [r7, #19]
 8000250:	021b      	lsls	r3, r3, #8
 8000252:	b21a      	sxth	r2, r3
 8000254:	7cbb      	ldrb	r3, [r7, #18]
 8000256:	b21b      	sxth	r3, r3
 8000258:	4313      	orrs	r3, r2
 800025a:	b21a      	sxth	r2, r3
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <TrimRead+0x130>)
 800025e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000260:	7d7b      	ldrb	r3, [r7, #21]
 8000262:	021b      	lsls	r3, r3, #8
 8000264:	b21a      	sxth	r2, r3
 8000266:	7d3b      	ldrb	r3, [r7, #20]
 8000268:	b21b      	sxth	r3, r3
 800026a:	4313      	orrs	r3, r2
 800026c:	b21a      	sxth	r2, r3
 800026e:	4b1c      	ldr	r3, [pc, #112]	; (80002e0 <TrimRead+0x134>)
 8000270:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000272:	7dfb      	ldrb	r3, [r7, #23]
 8000274:	021b      	lsls	r3, r3, #8
 8000276:	b21a      	sxth	r2, r3
 8000278:	7dbb      	ldrb	r3, [r7, #22]
 800027a:	b21b      	sxth	r3, r3
 800027c:	4313      	orrs	r3, r2
 800027e:	b21a      	sxth	r2, r3
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <TrimRead+0x138>)
 8000282:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000284:	7e7b      	ldrb	r3, [r7, #25]
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	b21a      	sxth	r2, r3
 800028a:	7e3b      	ldrb	r3, [r7, #24]
 800028c:	b21b      	sxth	r3, r3
 800028e:	4313      	orrs	r3, r2
 8000290:	b21a      	sxth	r2, r3
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <TrimRead+0x13c>)
 8000294:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000296:	7efb      	ldrb	r3, [r7, #27]
 8000298:	021b      	lsls	r3, r3, #8
 800029a:	b21a      	sxth	r2, r3
 800029c:	7ebb      	ldrb	r3, [r7, #26]
 800029e:	b21b      	sxth	r3, r3
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b21a      	sxth	r2, r3
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <TrimRead+0x140>)
 80002a6:	801a      	strh	r2, [r3, #0]

	printf("%s ",trimdata); // DEBUG ONLY
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <TrimRead+0x144>)
 80002ae:	f002 fa2b 	bl	8002708 <iprintf>

}
 80002b2:	bf00      	nop
 80002b4:	3720      	adds	r7, #32
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000008c 	.word	0x2000008c
 80002c0:	200000e0 	.word	0x200000e0
 80002c4:	200000e4 	.word	0x200000e4
 80002c8:	200000e6 	.word	0x200000e6
 80002cc:	200000e2 	.word	0x200000e2
 80002d0:	200000e8 	.word	0x200000e8
 80002d4:	200000ea 	.word	0x200000ea
 80002d8:	200000ec 	.word	0x200000ec
 80002dc:	200000ee 	.word	0x200000ee
 80002e0:	200000f0 	.word	0x200000f0
 80002e4:	200000f2 	.word	0x200000f2
 80002e8:	200000f4 	.word	0x200000f4
 80002ec:	200000f6 	.word	0x200000f6
 80002f0:	08003678 	.word	0x08003678

080002f4 <BMP280_config>:

int BMP280_config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b089      	sub	sp, #36	; 0x24
 80002f8:	af04      	add	r7, sp, #16
 80002fa:	4604      	mov	r4, r0
 80002fc:	4608      	mov	r0, r1
 80002fe:	4611      	mov	r1, r2
 8000300:	461a      	mov	r2, r3
 8000302:	4623      	mov	r3, r4
 8000304:	71fb      	strb	r3, [r7, #7]
 8000306:	4603      	mov	r3, r0
 8000308:	71bb      	strb	r3, [r7, #6]
 800030a:	460b      	mov	r3, r1
 800030c:	717b      	strb	r3, [r7, #5]
 800030e:	4613      	mov	r3, r2
 8000310:	713b      	strb	r3, [r7, #4]
	uint8_t data_to_write = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	73fb      	strb	r3, [r7, #15]
	uint8_t data_check = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	73bb      	strb	r3, [r7, #14]



	// reset the device
	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, (uint8_t *) 0xB6, 1, 1000) != HAL_OK)
 800031a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800031e:	9302      	str	r3, [sp, #8]
 8000320:	2301      	movs	r3, #1
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	23b6      	movs	r3, #182	; 0xb6
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2301      	movs	r3, #1
 800032a:	22e0      	movs	r2, #224	; 0xe0
 800032c:	21ec      	movs	r1, #236	; 0xec
 800032e:	4844      	ldr	r0, [pc, #272]	; (8000440 <BMP280_config+0x14c>)
 8000330:	f000 fef6 	bl	8001120 <HAL_I2C_Mem_Write>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <BMP280_config+0x4c>
	{
		return -1;
 800033a:	f04f 33ff 	mov.w	r3, #4294967295
 800033e:	e07b      	b.n	8000438 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 8000340:	2064      	movs	r0, #100	; 0x64
 8000342:	f000 fb1d 	bl	8000980 <HAL_Delay>

	// set standby and filter IIR
	data_to_write = (t_sb << 5) | (filter << 2);
 8000346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800034a:	015b      	lsls	r3, r3, #5
 800034c:	b25a      	sxtb	r2, r3
 800034e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	4313      	orrs	r3, r2
 8000358:	b25b      	sxtb	r3, r3
 800035a:	b2db      	uxtb	r3, r3
 800035c:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_to_write , 1, 1000) != HAL_OK)
 800035e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000362:	9302      	str	r3, [sp, #8]
 8000364:	2301      	movs	r3, #1
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	f107 030f 	add.w	r3, r7, #15
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	22f5      	movs	r2, #245	; 0xf5
 8000372:	21ec      	movs	r1, #236	; 0xec
 8000374:	4832      	ldr	r0, [pc, #200]	; (8000440 <BMP280_config+0x14c>)
 8000376:	f000 fed3 	bl	8001120 <HAL_I2C_Mem_Write>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <BMP280_config+0x92>
	{
		return -1;
 8000380:	f04f 33ff 	mov.w	r3, #4294967295
 8000384:	e058      	b.n	8000438 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 8000386:	2064      	movs	r0, #100	; 0x64
 8000388:	f000 fafa 	bl	8000980 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_check , 1, 1000);
 800038c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000390:	9302      	str	r3, [sp, #8]
 8000392:	2301      	movs	r3, #1
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	f107 030e 	add.w	r3, r7, #14
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	2301      	movs	r3, #1
 800039e:	22f5      	movs	r2, #245	; 0xf5
 80003a0:	21ec      	movs	r1, #236	; 0xec
 80003a2:	4827      	ldr	r0, [pc, #156]	; (8000440 <BMP280_config+0x14c>)
 80003a4:	f000 ffb6 	bl	8001314 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 80003a8:	7bba      	ldrb	r2, [r7, #14]
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d002      	beq.n	80003b6 <BMP280_config+0xc2>
	{
		return -1;
 80003b0:	f04f 33ff 	mov.w	r3, #4294967295
 80003b4:	e040      	b.n	8000438 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 80003b6:	2064      	movs	r0, #100	; 0x64
 80003b8:	f000 fae2 	bl	8000980 <HAL_Delay>


	// oversampling config for temp and pressure
	data_to_write = (osrs_t << 5) | (osrs_p << 2) | mode;
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	015b      	lsls	r3, r3, #5
 80003c0:	b25a      	sxtb	r2, r3
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b25a      	sxtb	r2, r3
 80003cc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b25b      	sxtb	r3, r3
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_to_write, 1, 1000) != HAL_OK)
 80003d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003dc:	9302      	str	r3, [sp, #8]
 80003de:	2301      	movs	r3, #1
 80003e0:	9301      	str	r3, [sp, #4]
 80003e2:	f107 030f 	add.w	r3, r7, #15
 80003e6:	9300      	str	r3, [sp, #0]
 80003e8:	2301      	movs	r3, #1
 80003ea:	22f4      	movs	r2, #244	; 0xf4
 80003ec:	21ec      	movs	r1, #236	; 0xec
 80003ee:	4814      	ldr	r0, [pc, #80]	; (8000440 <BMP280_config+0x14c>)
 80003f0:	f000 fe96 	bl	8001120 <HAL_I2C_Mem_Write>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d002      	beq.n	8000400 <BMP280_config+0x10c>
	{
		return -1;
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	e01b      	b.n	8000438 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 8000400:	2064      	movs	r0, #100	; 0x64
 8000402:	f000 fabd 	bl	8000980 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_check , 1, 1000);
 8000406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	2301      	movs	r3, #1
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	f107 030e 	add.w	r3, r7, #14
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	22f4      	movs	r2, #244	; 0xf4
 800041a:	21ec      	movs	r1, #236	; 0xec
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <BMP280_config+0x14c>)
 800041e:	f000 ff79 	bl	8001314 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 8000422:	7bba      	ldrb	r2, [r7, #14]
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	429a      	cmp	r2, r3
 8000428:	d002      	beq.n	8000430 <BMP280_config+0x13c>
	{
		return -1;
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	e003      	b.n	8000438 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 8000430:	2064      	movs	r0, #100	; 0x64
 8000432:	f000 faa5 	bl	8000980 <HAL_Delay>


	return 0;
 8000436:	2300      	movs	r3, #0
}
 8000438:	4618      	mov	r0, r3
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	bd90      	pop	{r4, r7, pc}
 8000440:	2000008c 	.word	0x2000008c

08000444 <BMPReadRaw>:


int BMPReadRaw(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af04      	add	r7, sp, #16
	uint8_t RawData[6];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, ID_REG, 1, &chip_id, 1, 1000);
 800044a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044e:	9302      	str	r3, [sp, #8]
 8000450:	2301      	movs	r3, #1
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <BMPReadRaw+0x80>)
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2301      	movs	r3, #1
 800045a:	22d0      	movs	r2, #208	; 0xd0
 800045c:	21ec      	movs	r1, #236	; 0xec
 800045e:	481a      	ldr	r0, [pc, #104]	; (80004c8 <BMPReadRaw+0x84>)
 8000460:	f000 ff58 	bl	8001314 <HAL_I2C_Mem_Read>

	if (chip_id == 0x60)
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <BMPReadRaw+0x80>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b60      	cmp	r3, #96	; 0x60
 800046a:	d124      	bne.n	80004b6 <BMPReadRaw+0x72>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	9302      	str	r3, [sp, #8]
 8000472:	2306      	movs	r3, #6
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	463b      	mov	r3, r7
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2301      	movs	r3, #1
 800047c:	22f7      	movs	r2, #247	; 0xf7
 800047e:	21ec      	movs	r1, #236	; 0xec
 8000480:	4811      	ldr	r0, [pc, #68]	; (80004c8 <BMPReadRaw+0x84>)
 8000482:	f000 ff47 	bl	8001314 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8000486:	783b      	ldrb	r3, [r7, #0]
 8000488:	031a      	lsls	r2, r3, #12
 800048a:	787b      	ldrb	r3, [r7, #1]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4313      	orrs	r3, r2
 8000490:	78ba      	ldrb	r2, [r7, #2]
 8000492:	0912      	lsrs	r2, r2, #4
 8000494:	b2d2      	uxtb	r2, r2
 8000496:	4313      	orrs	r3, r2
 8000498:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <BMPReadRaw+0x88>)
 800049a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	031a      	lsls	r2, r3, #12
 80004a0:	793b      	ldrb	r3, [r7, #4]
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	4313      	orrs	r3, r2
 80004a6:	797a      	ldrb	r2, [r7, #5]
 80004a8:	0912      	lsrs	r2, r2, #4
 80004aa:	b2d2      	uxtb	r2, r2
 80004ac:	4313      	orrs	r3, r2
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <BMPReadRaw+0x8c>)
 80004b0:	6013      	str	r3, [r2, #0]

		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e001      	b.n	80004ba <BMPReadRaw+0x76>
	}

	else return -1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000f8 	.word	0x200000f8
 80004c8:	2000008c 	.word	0x2000008c
 80004cc:	200000fc 	.word	0x200000fc
 80004d0:	20000100 	.word	0x20000100

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b090      	sub	sp, #64	; 0x40
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0318 	add.w	r3, r7, #24
 80004de:	2228      	movs	r2, #40	; 0x28
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 f908 	bl	80026f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	2302      	movs	r3, #2
 80004f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	2310      	movs	r3, #16
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000502:	2300      	movs	r3, #0
 8000504:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 0318 	add.w	r3, r7, #24
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fcc4 	bl	8001e98 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000516:	f000 f869 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	230f      	movs	r3, #15
 800051c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 ff32 	bl	800239c <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800053e:	f000 f855 	bl	80005ec <Error_Handler>
  }
}
 8000542:	bf00      	nop
 8000544:	3740      	adds	r7, #64	; 0x40
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_I2C1_Init+0x50>)
 8000552:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <MX_I2C1_Init+0x54>)
 8000554:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <MX_I2C1_Init+0x50>)
 8000558:	4a12      	ldr	r2, [pc, #72]	; (80005a4 <MX_I2C1_Init+0x58>)
 800055a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800055c:	4b0f      	ldr	r3, [pc, #60]	; (800059c <MX_I2C1_Init+0x50>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000562:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_I2C1_Init+0x50>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <MX_I2C1_Init+0x50>)
 800056a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800056e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_I2C1_Init+0x50>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_I2C1_Init+0x50>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_I2C1_Init+0x50>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <MX_I2C1_Init+0x50>)
 8000584:	2200      	movs	r2, #0
 8000586:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <MX_I2C1_Init+0x50>)
 800058a:	f000 fc85 	bl	8000e98 <HAL_I2C_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000594:	f000 f82a 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	40005400 	.word	0x40005400
 80005a4:	000186a0 	.word	0x000186a0

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a0d      	ldr	r2, [pc, #52]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6193      	str	r3, [r2, #24]
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005cc:	f043 0308 	orr.w	r3, r3, #8
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x40>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <Error_Handler+0x8>
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <HAL_MspInit+0x5c>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a14      	ldr	r2, [pc, #80]	; (8000654 <HAL_MspInit+0x5c>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_MspInit+0x5c>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <HAL_MspInit+0x5c>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0e      	ldr	r2, [pc, #56]	; (8000654 <HAL_MspInit+0x5c>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_MspInit+0x5c>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_MspInit+0x60>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_MspInit+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	40021000 	.word	0x40021000
 8000658:	40010000 	.word	0x40010000

0800065c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_I2C_MspInit+0x70>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d123      	bne.n	80006c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 8000682:	f043 0308 	orr.w	r3, r3, #8
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000694:	23c0      	movs	r3, #192	; 0xc0
 8000696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000698:	2312      	movs	r3, #18
 800069a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069c:	2303      	movs	r3, #3
 800069e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <HAL_I2C_MspInit+0x78>)
 80006a8:	f000 fa72 	bl	8000b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 80006b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006b6:	61d3      	str	r3, [r2, #28]
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_I2C_MspInit+0x74>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40005400 	.word	0x40005400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010c00 	.word	0x40010c00

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f000 f913 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e00a      	b.n	800074e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000738:	f3af 8000 	nop.w
 800073c:	4601      	mov	r1, r0
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	60ba      	str	r2, [r7, #8]
 8000744:	b2ca      	uxtb	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	3301      	adds	r3, #1
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	429a      	cmp	r2, r3
 8000754:	dbf0      	blt.n	8000738 <_read+0x12>
	}

return len;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e009      	b.n	8000786 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	1c5a      	adds	r2, r3, #1
 8000776:	60ba      	str	r2, [r7, #8]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	3301      	adds	r3, #1
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	429a      	cmp	r2, r3
 800078c:	dbf1      	blt.n	8000772 <_write+0x12>
	}
	return len;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3718      	adds	r7, #24
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <_close>:

int _close(int file)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	return -1;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007be:	605a      	str	r2, [r3, #4]
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <_isatty>:

int _isatty(int file)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	return 1;
 80007d4:	2301      	movs	r3, #1
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f001 ff3c 	bl	80026a4 <__errno>
 800082c:	4603      	mov	r3, r0
 800082e:	220c      	movs	r2, #12
 8000830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20005000 	.word	0x20005000
 8000858:	00000400 	.word	0x00000400
 800085c:	20000104 	.word	0x20000104
 8000860:	20000120 	.word	0x20000120

08000864 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	; (80008a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	; (80008b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000896:	f7ff ffe5 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089a:	f001 ff09 	bl	80026b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fc55 	bl	800014c <main>
  bx lr
 80008a2:	4770      	bx	lr
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008ac:	08003744 	.word	0x08003744
  ldr r2, =_sbss
 80008b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b4:	2000011c 	.word	0x2000011c

080008b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_2_IRQHandler>
	...

080008bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x28>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x28>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f92b 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	200f      	movs	r0, #15
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fe8e 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022000 	.word	0x40022000

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f935 	bl	8000b76 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f000 f90b 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <HAL_IncTick+0x1c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x20>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_IncTick+0x20>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000008 	.word	0x20000008
 8000968:	20000108 	.word	0x20000108

0800096c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetTick+0x10>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000108 	.word	0x20000108

08000980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000988:	f7ff fff0 	bl	800096c <HAL_GetTick>
 800098c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000998:	d005      	beq.n	80009a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <HAL_Delay+0x44>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a6:	bf00      	nop
 80009a8:	f7ff ffe0 	bl	800096c <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d8f7      	bhi.n	80009a8 <HAL_Delay+0x28>
  {
  }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff49 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff5e 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffb0 	bl	8000ae4 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b08b      	sub	sp, #44	; 0x2c
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba2:	e169      	b.n	8000e78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 8158 	bne.w	8000e72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	4a9a      	ldr	r2, [pc, #616]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d05e      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bcc:	4a98      	ldr	r2, [pc, #608]	; (8000e30 <HAL_GPIO_Init+0x2a0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d875      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bd2:	4a98      	ldr	r2, [pc, #608]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d058      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bd8:	4a96      	ldr	r2, [pc, #600]	; (8000e34 <HAL_GPIO_Init+0x2a4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d86f      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bde:	4a96      	ldr	r2, [pc, #600]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d052      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000be4:	4a94      	ldr	r2, [pc, #592]	; (8000e38 <HAL_GPIO_Init+0x2a8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d869      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bea:	4a94      	ldr	r2, [pc, #592]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d04c      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bf0:	4a92      	ldr	r2, [pc, #584]	; (8000e3c <HAL_GPIO_Init+0x2ac>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d863      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000bf6:	4a92      	ldr	r2, [pc, #584]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d046      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
 8000bfc:	4a90      	ldr	r2, [pc, #576]	; (8000e40 <HAL_GPIO_Init+0x2b0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d85d      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c02:	2b12      	cmp	r3, #18
 8000c04:	d82a      	bhi.n	8000c5c <HAL_GPIO_Init+0xcc>
 8000c06:	2b12      	cmp	r3, #18
 8000c08:	d859      	bhi.n	8000cbe <HAL_GPIO_Init+0x12e>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <HAL_GPIO_Init+0x80>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c8b 	.word	0x08000c8b
 8000c14:	08000c65 	.word	0x08000c65
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000cb9 	.word	0x08000cb9
 8000c20:	08000cbf 	.word	0x08000cbf
 8000c24:	08000cbf 	.word	0x08000cbf
 8000c28:	08000cbf 	.word	0x08000cbf
 8000c2c:	08000cbf 	.word	0x08000cbf
 8000c30:	08000cbf 	.word	0x08000cbf
 8000c34:	08000cbf 	.word	0x08000cbf
 8000c38:	08000cbf 	.word	0x08000cbf
 8000c3c:	08000cbf 	.word	0x08000cbf
 8000c40:	08000cbf 	.word	0x08000cbf
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000cbf 	.word	0x08000cbf
 8000c4c:	08000cbf 	.word	0x08000cbf
 8000c50:	08000cbf 	.word	0x08000cbf
 8000c54:	08000c6d 	.word	0x08000c6d
 8000c58:	08000c81 	.word	0x08000c81
 8000c5c:	4a79      	ldr	r2, [pc, #484]	; (8000e44 <HAL_GPIO_Init+0x2b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c62:	e02c      	b.n	8000cbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	623b      	str	r3, [r7, #32]
          break;
 8000c6a:	e029      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	3304      	adds	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	e024      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	623b      	str	r3, [r7, #32]
          break;
 8000c7e:	e01f      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	330c      	adds	r3, #12
 8000c86:	623b      	str	r3, [r7, #32]
          break;
 8000c88:	e01a      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d102      	bne.n	8000c98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c92:	2304      	movs	r3, #4
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e013      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d105      	bne.n	8000cac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69fa      	ldr	r2, [r7, #28]
 8000ca8:	611a      	str	r2, [r3, #16]
          break;
 8000caa:	e009      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cac:	2308      	movs	r3, #8
 8000cae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69fa      	ldr	r2, [r7, #28]
 8000cb4:	615a      	str	r2, [r3, #20]
          break;
 8000cb6:	e003      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e000      	b.n	8000cc0 <HAL_GPIO_Init+0x130>
          break;
 8000cbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d801      	bhi.n	8000cca <HAL_GPIO_Init+0x13a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	e001      	b.n	8000cce <HAL_GPIO_Init+0x13e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	2bff      	cmp	r3, #255	; 0xff
 8000cd4:	d802      	bhi.n	8000cdc <HAL_GPIO_Init+0x14c>
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x152>
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3b08      	subs	r3, #8
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	210f      	movs	r1, #15
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	6a39      	ldr	r1, [r7, #32]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80b1 	beq.w	8000e72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d10:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b4a      	ldr	r3, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2b8>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d28:	4a48      	ldr	r2, [pc, #288]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <HAL_GPIO_Init+0x2c0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a3f      	ldr	r2, [pc, #252]	; (8000e54 <HAL_GPIO_Init+0x2c4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a3e      	ldr	r2, [pc, #248]	; (8000e58 <HAL_GPIO_Init+0x2c8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <HAL_GPIO_Init+0x2cc>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1e0>
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e004      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e002      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <HAL_GPIO_Init+0x1ee>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d80:	f002 0203 	and.w	r2, r2, #3
 8000d84:	0092      	lsls	r2, r2, #2
 8000d86:	4093      	lsls	r3, r2
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x2bc>)
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	3302      	adds	r3, #2
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	600b      	str	r3, [r1, #0]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4928      	ldr	r1, [pc, #160]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d006      	beq.n	8000dde <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd0:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	685a      	ldr	r2, [r3, #4]
 8000dd4:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	604b      	str	r3, [r1, #4]
 8000ddc:	e006      	b.n	8000dec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	491e      	ldr	r1, [pc, #120]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d006      	beq.n	8000e06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	608b      	str	r3, [r1, #8]
 8000e04:	e006      	b.n	8000e14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	4914      	ldr	r1, [pc, #80]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d021      	beq.n	8000e64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	490e      	ldr	r1, [pc, #56]	; (8000e60 <HAL_GPIO_Init+0x2d0>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	60cb      	str	r3, [r1, #12]
 8000e2c:	e021      	b.n	8000e72 <HAL_GPIO_Init+0x2e2>
 8000e2e:	bf00      	nop
 8000e30:	10320000 	.word	0x10320000
 8000e34:	10310000 	.word	0x10310000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	10210000 	.word	0x10210000
 8000e40:	10120000 	.word	0x10120000
 8000e44:	10110000 	.word	0x10110000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	4909      	ldr	r1, [pc, #36]	; (8000e94 <HAL_GPIO_Init+0x304>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	3301      	adds	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	f47f ae8e 	bne.w	8000ba4 <HAL_GPIO_Init+0x14>
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	372c      	adds	r7, #44	; 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40010400 	.word	0x40010400

08000e98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e12b      	b.n	8001102 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fbcc 	bl	800065c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2224      	movs	r2, #36	; 0x24
 8000ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000efa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000efc:	f001 fba0 	bl	8002640 <HAL_RCC_GetPCLK1Freq>
 8000f00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4a81      	ldr	r2, [pc, #516]	; (800110c <HAL_I2C_Init+0x274>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d807      	bhi.n	8000f1c <HAL_I2C_Init+0x84>
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4a80      	ldr	r2, [pc, #512]	; (8001110 <HAL_I2C_Init+0x278>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	bf94      	ite	ls
 8000f14:	2301      	movls	r3, #1
 8000f16:	2300      	movhi	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	e006      	b.n	8000f2a <HAL_I2C_Init+0x92>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4a7d      	ldr	r2, [pc, #500]	; (8001114 <HAL_I2C_Init+0x27c>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	bf94      	ite	ls
 8000f24:	2301      	movls	r3, #1
 8000f26:	2300      	movhi	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0e7      	b.n	8001102 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4a78      	ldr	r2, [pc, #480]	; (8001118 <HAL_I2C_Init+0x280>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0c9b      	lsrs	r3, r3, #18
 8000f3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	4a6a      	ldr	r2, [pc, #424]	; (800110c <HAL_I2C_Init+0x274>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d802      	bhi.n	8000f6c <HAL_I2C_Init+0xd4>
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	e009      	b.n	8000f80 <HAL_I2C_Init+0xe8>
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a69      	ldr	r2, [pc, #420]	; (800111c <HAL_I2C_Init+0x284>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	099b      	lsrs	r3, r3, #6
 8000f7e:	3301      	adds	r3, #1
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	6812      	ldr	r2, [r2, #0]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	495c      	ldr	r1, [pc, #368]	; (800110c <HAL_I2C_Init+0x274>)
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d819      	bhi.n	8000fd4 <HAL_I2C_Init+0x13c>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1e59      	subs	r1, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fae:	1c59      	adds	r1, r3, #1
 8000fb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d00a      	beq.n	8000fd0 <HAL_I2C_Init+0x138>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1e59      	subs	r1, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fce:	e051      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e04f      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d111      	bne.n	8001000 <HAL_I2C_Init+0x168>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1e58      	subs	r0, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	440b      	add	r3, r1
 8000fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fee:	3301      	adds	r3, #1
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf0c      	ite	eq
 8000ff8:	2301      	moveq	r3, #1
 8000ffa:	2300      	movne	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	e012      	b.n	8001026 <HAL_I2C_Init+0x18e>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	1e58      	subs	r0, r3, #1
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6859      	ldr	r1, [r3, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	0099      	lsls	r1, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	fbb0 f3f3 	udiv	r3, r0, r3
 8001016:	3301      	adds	r3, #1
 8001018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101c:	2b00      	cmp	r3, #0
 800101e:	bf0c      	ite	eq
 8001020:	2301      	moveq	r3, #1
 8001022:	2300      	movne	r3, #0
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_I2C_Init+0x196>
 800102a:	2301      	movs	r3, #1
 800102c:	e022      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10e      	bne.n	8001054 <HAL_I2C_Init+0x1bc>
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	1e58      	subs	r0, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6859      	ldr	r1, [r3, #4]
 800103e:	460b      	mov	r3, r1
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	440b      	add	r3, r1
 8001044:	fbb0 f3f3 	udiv	r3, r0, r3
 8001048:	3301      	adds	r3, #1
 800104a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800104e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001052:	e00f      	b.n	8001074 <HAL_I2C_Init+0x1dc>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1e58      	subs	r0, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	0099      	lsls	r1, r3, #2
 8001064:	440b      	add	r3, r1
 8001066:	fbb0 f3f3 	udiv	r3, r0, r3
 800106a:	3301      	adds	r3, #1
 800106c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001070:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	6809      	ldr	r1, [r1, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6911      	ldr	r1, [r2, #16]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68d2      	ldr	r2, [r2, #12]
 80010ae:	4311      	orrs	r1, r2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695a      	ldr	r2, [r3, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0201 	orr.w	r2, r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2220      	movs	r2, #32
 80010ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	000186a0 	.word	0x000186a0
 8001110:	001e847f 	.word	0x001e847f
 8001114:	003d08ff 	.word	0x003d08ff
 8001118:	431bde83 	.word	0x431bde83
 800111c:	10624dd3 	.word	0x10624dd3

08001120 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4603      	mov	r3, r0
 8001130:	817b      	strh	r3, [r7, #10]
 8001132:	460b      	mov	r3, r1
 8001134:	813b      	strh	r3, [r7, #8]
 8001136:	4613      	mov	r3, r2
 8001138:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800113a:	f7ff fc17 	bl	800096c <HAL_GetTick>
 800113e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b20      	cmp	r3, #32
 800114a:	f040 80d9 	bne.w	8001300 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2319      	movs	r3, #25
 8001154:	2201      	movs	r2, #1
 8001156:	496d      	ldr	r1, [pc, #436]	; (800130c <HAL_I2C_Mem_Write+0x1ec>)
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 fcc1 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001164:	2302      	movs	r3, #2
 8001166:	e0cc      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Mem_Write+0x56>
 8001172:	2302      	movs	r3, #2
 8001174:	e0c5      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d007      	beq.n	800119c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2221      	movs	r2, #33	; 0x21
 80011b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	6a3a      	ldr	r2, [r7, #32]
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4a4d      	ldr	r2, [pc, #308]	; (8001310 <HAL_I2C_Mem_Write+0x1f0>)
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011de:	88f8      	ldrh	r0, [r7, #6]
 80011e0:	893a      	ldrh	r2, [r7, #8]
 80011e2:	8979      	ldrh	r1, [r7, #10]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4603      	mov	r3, r0
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 faf8 	bl	80017e4 <I2C_RequestMemoryWrite>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d052      	beq.n	80012a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e081      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fd42 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00d      	beq.n	800122a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2b04      	cmp	r3, #4
 8001214:	d107      	bne.n	8001226 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e06b      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001244:	3b01      	subs	r3, #1
 8001246:	b29a      	uxth	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001250:	b29b      	uxth	r3, r3
 8001252:	3b01      	subs	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b04      	cmp	r3, #4
 8001266:	d11b      	bne.n	80012a0 <HAL_I2C_Mem_Write+0x180>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126c:	2b00      	cmp	r3, #0
 800126e:	d017      	beq.n	80012a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800128a:	3b01      	subs	r3, #1
 800128c:	b29a      	uxth	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001296:	b29b      	uxth	r3, r3
 8001298:	3b01      	subs	r3, #1
 800129a:	b29a      	uxth	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1aa      	bne.n	80011fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f000 fd2e 	bl	8001d0e <I2C_WaitOnBTFFlagUntilTimeout>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00d      	beq.n	80012d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d107      	bne.n	80012d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e016      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2220      	movs	r2, #32
 80012e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001300:	2302      	movs	r3, #2
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	00100002 	.word	0x00100002
 8001310:	ffff0000 	.word	0xffff0000

08001314 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af02      	add	r7, sp, #8
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	817b      	strh	r3, [r7, #10]
 8001326:	460b      	mov	r3, r1
 8001328:	813b      	strh	r3, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001332:	f7ff fb1b 	bl	800096c <HAL_GetTick>
 8001336:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b20      	cmp	r3, #32
 8001342:	f040 8244 	bne.w	80017ce <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2319      	movs	r3, #25
 800134c:	2201      	movs	r2, #1
 800134e:	4982      	ldr	r1, [pc, #520]	; (8001558 <HAL_I2C_Mem_Read+0x244>)
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 fbc5 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800135c:	2302      	movs	r3, #2
 800135e:	e237      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_I2C_Mem_Read+0x5a>
 800136a:	2302      	movs	r3, #2
 800136c:	e230      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b01      	cmp	r3, #1
 8001382:	d007      	beq.n	8001394 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0201 	orr.w	r2, r2, #1
 8001392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2222      	movs	r2, #34	; 0x22
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80013c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4a62      	ldr	r2, [pc, #392]	; (800155c <HAL_I2C_Mem_Read+0x248>)
 80013d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013d6:	88f8      	ldrh	r0, [r7, #6]
 80013d8:	893a      	ldrh	r2, [r7, #8]
 80013da:	8979      	ldrh	r1, [r7, #10]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	9301      	str	r3, [sp, #4]
 80013e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4603      	mov	r3, r0
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fa92 	bl	8001910 <I2C_RequestMemoryRead>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1ec      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e1c0      	b.n	80017a8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	2b01      	cmp	r3, #1
 800142c:	d11e      	bne.n	800146c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800143c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800143e:	b672      	cpsid	i
}
 8001440:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001466:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001468:	b662      	cpsie	i
}
 800146a:	e035      	b.n	80014d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001470:	2b02      	cmp	r3, #2
 8001472:	d11e      	bne.n	80014b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001482:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014ae:	b662      	cpsie	i
}
 80014b0:	e012      	b.n	80014d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014d8:	e166      	b.n	80017a8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014de:	2b03      	cmp	r3, #3
 80014e0:	f200 811f 	bhi.w	8001722 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d123      	bne.n	8001534 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 fc4d 	bl	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e167      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001532:	e139      	b.n	80017a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	2b02      	cmp	r3, #2
 800153a:	d152      	bne.n	80015e2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001542:	2200      	movs	r2, #0
 8001544:	4906      	ldr	r1, [pc, #24]	; (8001560 <HAL_I2C_Mem_Read+0x24c>)
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 faca 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e13c      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
 8001556:	bf00      	nop
 8001558:	00100002 	.word	0x00100002
 800155c:	ffff0000 	.word	0xffff0000
 8001560:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001564:	b672      	cpsid	i
}
 8001566:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015aa:	b662      	cpsie	i
}
 80015ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3b01      	subs	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015e0:	e0e2      	b.n	80017a8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015e8:	2200      	movs	r2, #0
 80015ea:	497b      	ldr	r1, [pc, #492]	; (80017d8 <HAL_I2C_Mem_Read+0x4c4>)
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 fa77 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e0e9      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001642:	4b66      	ldr	r3, [pc, #408]	; (80017dc <HAL_I2C_Mem_Read+0x4c8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	08db      	lsrs	r3, r3, #3
 8001648:	4a65      	ldr	r2, [pc, #404]	; (80017e0 <HAL_I2C_Mem_Read+0x4cc>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a1a      	lsrs	r2, r3, #8
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00da      	lsls	r2, r3, #3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	3b01      	subs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d118      	bne.n	800169a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f043 0220 	orr.w	r2, r3, #32
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800168a:	b662      	cpsie	i
}
 800168c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e09a      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d1d9      	bne.n	800165c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016ea:	b662      	cpsie	i
}
 80016ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001720:	e042      	b.n	80017a8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001724:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f000 fb32 	bl	8001d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e04c      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800175e:	b29b      	uxth	r3, r3
 8001760:	3b01      	subs	r3, #1
 8001762:	b29a      	uxth	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b04      	cmp	r3, #4
 8001774:	d118      	bne.n	80017a8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f ae94 	bne.w	80014da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2220      	movs	r2, #32
 80017b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80017ce:	2302      	movs	r3, #2
  }
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3728      	adds	r7, #40	; 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	00010004 	.word	0x00010004
 80017dc:	20000000 	.word	0x20000000
 80017e0:	14f8b589 	.word	0x14f8b589

080017e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	4608      	mov	r0, r1
 80017ee:	4611      	mov	r1, r2
 80017f0:	461a      	mov	r2, r3
 80017f2:	4603      	mov	r3, r0
 80017f4:	817b      	strh	r3, [r7, #10]
 80017f6:	460b      	mov	r3, r1
 80017f8:	813b      	strh	r3, [r7, #8]
 80017fa:	4613      	mov	r3, r2
 80017fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800180c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	2200      	movs	r2, #0
 8001816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f960 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001834:	d103      	bne.n	800183e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e05f      	b.n	8001902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001842:	897b      	ldrh	r3, [r7, #10]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	492d      	ldr	r1, [pc, #180]	; (800190c <I2C_RequestMemoryWrite+0x128>)
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f998 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e04c      	b.n	8001902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	6a39      	ldr	r1, [r7, #32]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 fa02 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	2b04      	cmp	r3, #4
 8001894:	d107      	bne.n	80018a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e02b      	b.n	8001902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d105      	bne.n	80018bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	611a      	str	r2, [r3, #16]
 80018ba:	e021      	b.n	8001900 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80018bc:	893b      	ldrh	r3, [r7, #8]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f9dc 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d107      	bne.n	80018f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e005      	b.n	8001902 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80018f6:	893b      	ldrh	r3, [r7, #8]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	00010002 	.word	0x00010002

08001910 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	461a      	mov	r2, r3
 800191e:	4603      	mov	r3, r0
 8001920:	817b      	strh	r3, [r7, #10]
 8001922:	460b      	mov	r3, r1
 8001924:	813b      	strh	r3, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001938:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	2200      	movs	r2, #0
 8001952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f8c2 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00d      	beq.n	800197e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001970:	d103      	bne.n	800197a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0aa      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800197e:	897b      	ldrh	r3, [r7, #10]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800198c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	4952      	ldr	r1, [pc, #328]	; (8001adc <I2C_RequestMemoryRead+0x1cc>)
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f8fa 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e097      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	6a39      	ldr	r1, [r7, #32]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f964 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d107      	bne.n	80019e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e076      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d105      	bne.n	80019f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019ec:	893b      	ldrh	r3, [r7, #8]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	e021      	b.n	8001a3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019f8:	893b      	ldrh	r3, [r7, #8]
 80019fa:	0a1b      	lsrs	r3, r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	6a39      	ldr	r1, [r7, #32]
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 f93e 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00d      	beq.n	8001a32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d107      	bne.n	8001a2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e050      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a32:	893b      	ldrh	r3, [r7, #8]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3e:	6a39      	ldr	r1, [r7, #32]
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f000 f923 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00d      	beq.n	8001a68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d107      	bne.n	8001a64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e035      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f82b 	bl	8001ae0 <I2C_WaitOnFlagUntilTimeout>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a9e:	d103      	bne.n	8001aa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e013      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	6a3a      	ldr	r2, [r7, #32]
 8001ac0:	4906      	ldr	r1, [pc, #24]	; (8001adc <I2C_RequestMemoryRead+0x1cc>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f863 	bl	8001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	00010002 	.word	0x00010002

08001ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af0:	e025      	b.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d021      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afa:	f7fe ff37 	bl	800096c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d302      	bcc.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d116      	bne.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e023      	b.n	8001b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10d      	bne.n	8001b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf0c      	ite	eq
 8001b5a:	2301      	moveq	r3, #1
 8001b5c:	2300      	movne	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	e00c      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf0c      	ite	eq
 8001b76:	2301      	moveq	r3, #1
 8001b78:	2300      	movne	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d0b6      	beq.n	8001af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b9c:	e051      	b.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	d123      	bne.n	8001bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0204 	orr.w	r2, r3, #4
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e046      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d021      	beq.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bfe:	f7fe feb5 	bl	800096c <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d116      	bne.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10c      	bne.n	8001c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4013      	ands	r3, r2
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	bf14      	ite	ne
 8001c5e:	2301      	movne	r3, #1
 8001c60:	2300      	moveq	r3, #0
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	e00b      	b.n	8001c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4013      	ands	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d18d      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	e02d      	b.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f8ce 	bl	8001e3c <I2C_IsAcknowledgeFailed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e02d      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d021      	beq.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7fe fe5b 	bl	800096c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d1ca      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d1a:	e02d      	b.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f88d 	bl	8001e3c <I2C_IsAcknowledgeFailed>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e02d      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d32:	d021      	beq.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d34:	f7fe fe1a 	bl	800096c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d116      	bne.n	8001d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f043 0220 	orr.w	r2, r3, #32
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d1ca      	bne.n	8001d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d9c:	e042      	b.n	8001e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d119      	bne.n	8001de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0210 	mvn.w	r2, #16
 8001db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e029      	b.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001de0:	f7fe fdc4 	bl	800096c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d302      	bcc.n	8001df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f043 0220 	orr.w	r2, r3, #32
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e007      	b.n	8001e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d1b5      	bne.n	8001d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e52:	d11b      	bne.n	8001e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0204 	orr.w	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e272      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8087 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eb8:	4b92      	ldr	r3, [pc, #584]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 030c 	and.w	r3, r3, #12
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d00c      	beq.n	8001ede <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec4:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d112      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001edc:	d10b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d06c      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d168      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e24c      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efe:	d106      	bne.n	8001f0e <HAL_RCC_OscConfig+0x76>
 8001f00:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a7f      	ldr	r2, [pc, #508]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	e02e      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b7b      	ldr	r3, [pc, #492]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a77      	ldr	r2, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0xbc>
 8001f3a:	4b72      	ldr	r3, [pc, #456]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a71      	ldr	r2, [pc, #452]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b6f      	ldr	r3, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xd4>
 8001f54:	4b6b      	ldr	r3, [pc, #428]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b68      	ldr	r3, [pc, #416]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a67      	ldr	r2, [pc, #412]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7fe fcfa 	bl	800096c <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fcf6 	bl	800096c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e200      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe4>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fce6 	bl	800096c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fce2 	bl	800096c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1ec      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b53      	ldr	r3, [pc, #332]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x10c>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d063      	beq.n	800209a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd2:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fde:	4b49      	ldr	r3, [pc, #292]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d11c      	bne.n	8002024 <HAL_RCC_OscConfig+0x18c>
 8001fea:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x176>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e1c0      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4939      	ldr	r1, [pc, #228]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	e03a      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	4b36      	ldr	r3, [pc, #216]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe fc9b 	bl	800096c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203a:	f7fe fc97 	bl	800096c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1a1      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4927      	ldr	r1, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_RCC_OscConfig+0x270>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe fc7a 	bl	800096c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fc76 	bl	800096c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e180      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03a      	beq.n	800211c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d019      	beq.n	80020e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b17      	ldr	r3, [pc, #92]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b4:	f7fe fc5a 	bl	800096c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020bc:	f7fe fc56 	bl	800096c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e160      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020da:	2001      	movs	r0, #1
 80020dc:	f000 fac4 	bl	8002668 <RCC_Delay>
 80020e0:	e01c      	b.n	800211c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_RCC_OscConfig+0x274>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7fe fc40 	bl	800096c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ee:	e00f      	b.n	8002110 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f0:	f7fe fc3c 	bl	800096c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d908      	bls.n	8002110 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e146      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
 8002102:	bf00      	nop
 8002104:	40021000 	.word	0x40021000
 8002108:	42420000 	.word	0x42420000
 800210c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b92      	ldr	r3, [pc, #584]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1e9      	bne.n	80020f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a6 	beq.w	8002276 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b8b      	ldr	r3, [pc, #556]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10d      	bne.n	8002156 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a87      	ldr	r2, [pc, #540]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d118      	bne.n	8002194 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7e      	ldr	r2, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 8002168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216e:	f7fe fbfd 	bl	800096c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002176:	f7fe fbf9 	bl	800096c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	; 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e103      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	4b75      	ldr	r3, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4c8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0f0      	beq.n	8002176 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d106      	bne.n	80021aa <HAL_RCC_OscConfig+0x312>
 800219c:	4b6f      	ldr	r3, [pc, #444]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a6e      	ldr	r2, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e02d      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021b2:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a69      	ldr	r2, [pc, #420]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a66      	ldr	r2, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
 80021ca:	e01c      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	2b05      	cmp	r3, #5
 80021d2:	d10c      	bne.n	80021ee <HAL_RCC_OscConfig+0x356>
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	4a60      	ldr	r2, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6213      	str	r3, [r2, #32]
 80021e0:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a5d      	ldr	r2, [pc, #372]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6213      	str	r3, [r2, #32]
 80021ec:	e00b      	b.n	8002206 <HAL_RCC_OscConfig+0x36e>
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0304 	bic.w	r3, r3, #4
 8002204:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe fbad 	bl	800096c <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	e00a      	b.n	800222c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fba9 	bl	800096c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	; 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e0b1      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0ee      	beq.n	8002216 <HAL_RCC_OscConfig+0x37e>
 8002238:	e014      	b.n	8002264 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe fb97 	bl	800096c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fb93 	bl	800096c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e09b      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	4b40      	ldr	r3, [pc, #256]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1ee      	bne.n	8002242 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d105      	bne.n	8002276 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8087 	beq.w	800238e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b36      	ldr	r3, [pc, #216]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	d061      	beq.n	8002350 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d146      	bne.n	8002322 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002294:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7fe fb67 	bl	800096c <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7fe fb63 	bl	800096c <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e06d      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b4:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c8:	d108      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a19      	ldr	r1, [r3, #32]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	430b      	orrs	r3, r1
 80022ee:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fb37 	bl	800096c <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fb33 	bl	800096c <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e03d      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x46a>
 8002320:	e035      	b.n	800238e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x4cc>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fb20 	bl	800096c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fb1c 	bl	800096c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e026      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x4c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x498>
 800234e:	e01e      	b.n	800238e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e019      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
 8002364:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_RCC_OscConfig+0x500>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0d0      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d910      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4965      	ldr	r1, [pc, #404]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a58      	ldr	r2, [pc, #352]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800241a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e073      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06b      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b39      	ldr	r3, [pc, #228]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4936      	ldr	r1, [pc, #216]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7fe fa6e 	bl	800096c <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fa6a 	bl	800096c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e053      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d210      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 0207 	bic.w	r2, r3, #7
 80024d2:	4922      	ldr	r1, [pc, #136]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f821 	bl	8002570 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	; (8002568 <HAL_RCC_ClockConfig+0x1cc>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <HAL_RCC_ClockConfig+0x1d0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe f9cc 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
 8002564:	0800368c 	.word	0x0800368c
 8002568:	20000000 	.word	0x20000000
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002570:	b490      	push	{r4, r7}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCC_GetSysClockFreq+0xac>)
 8002578:	1d3c      	adds	r4, r7, #4
 800257a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800257c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002580:	f240 2301 	movw	r3, #513	; 0x201
 8002584:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	2300      	movs	r3, #0
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x40>
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ae:	e02b      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b2:	623b      	str	r3, [r7, #32]
      break;
 80025b4:	e02b      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	0c9b      	lsrs	r3, r3, #18
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	3328      	adds	r3, #40	; 0x28
 80025c0:	443b      	add	r3, r7
 80025c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025c6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0c5b      	lsrs	r3, r3, #17
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	3328      	adds	r3, #40	; 0x28
 80025de:	443b      	add	r3, r7
 80025e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	4a0e      	ldr	r2, [pc, #56]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	623b      	str	r3, [r7, #32]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetSysClockFreq+0xb4>)
 800260a:	623b      	str	r3, [r7, #32]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	6a3b      	ldr	r3, [r7, #32]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc90      	pop	{r4, r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	0800367c 	.word	0x0800367c
 8002620:	40021000 	.word	0x40021000
 8002624:	007a1200 	.word	0x007a1200
 8002628:	003d0900 	.word	0x003d0900

0800262c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <HAL_RCC_GetHCLKFreq+0x10>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	20000000 	.word	0x20000000

08002640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002644:	f7ff fff2 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	0800369c 	.word	0x0800369c

08002668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <RCC_Delay+0x34>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <RCC_Delay+0x38>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0a5b      	lsrs	r3, r3, #9
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002684:	bf00      	nop
  }
  while (Delay --);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	60fa      	str	r2, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f9      	bne.n	8002684 <RCC_Delay+0x1c>
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000000 	.word	0x20000000
 80026a0:	10624dd3 	.word	0x10624dd3

080026a4 <__errno>:
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <__errno+0x8>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000000c 	.word	0x2000000c

080026b0 <__libc_init_array>:
 80026b0:	b570      	push	{r4, r5, r6, lr}
 80026b2:	2600      	movs	r6, #0
 80026b4:	4d0c      	ldr	r5, [pc, #48]	; (80026e8 <__libc_init_array+0x38>)
 80026b6:	4c0d      	ldr	r4, [pc, #52]	; (80026ec <__libc_init_array+0x3c>)
 80026b8:	1b64      	subs	r4, r4, r5
 80026ba:	10a4      	asrs	r4, r4, #2
 80026bc:	42a6      	cmp	r6, r4
 80026be:	d109      	bne.n	80026d4 <__libc_init_array+0x24>
 80026c0:	f000 ffb6 	bl	8003630 <_init>
 80026c4:	2600      	movs	r6, #0
 80026c6:	4d0a      	ldr	r5, [pc, #40]	; (80026f0 <__libc_init_array+0x40>)
 80026c8:	4c0a      	ldr	r4, [pc, #40]	; (80026f4 <__libc_init_array+0x44>)
 80026ca:	1b64      	subs	r4, r4, r5
 80026cc:	10a4      	asrs	r4, r4, #2
 80026ce:	42a6      	cmp	r6, r4
 80026d0:	d105      	bne.n	80026de <__libc_init_array+0x2e>
 80026d2:	bd70      	pop	{r4, r5, r6, pc}
 80026d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d8:	4798      	blx	r3
 80026da:	3601      	adds	r6, #1
 80026dc:	e7ee      	b.n	80026bc <__libc_init_array+0xc>
 80026de:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e2:	4798      	blx	r3
 80026e4:	3601      	adds	r6, #1
 80026e6:	e7f2      	b.n	80026ce <__libc_init_array+0x1e>
 80026e8:	0800373c 	.word	0x0800373c
 80026ec:	0800373c 	.word	0x0800373c
 80026f0:	0800373c 	.word	0x0800373c
 80026f4:	08003740 	.word	0x08003740

080026f8 <memset>:
 80026f8:	4603      	mov	r3, r0
 80026fa:	4402      	add	r2, r0
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d100      	bne.n	8002702 <memset+0xa>
 8002700:	4770      	bx	lr
 8002702:	f803 1b01 	strb.w	r1, [r3], #1
 8002706:	e7f9      	b.n	80026fc <memset+0x4>

08002708 <iprintf>:
 8002708:	b40f      	push	{r0, r1, r2, r3}
 800270a:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <iprintf+0x2c>)
 800270c:	b513      	push	{r0, r1, r4, lr}
 800270e:	681c      	ldr	r4, [r3, #0]
 8002710:	b124      	cbz	r4, 800271c <iprintf+0x14>
 8002712:	69a3      	ldr	r3, [r4, #24]
 8002714:	b913      	cbnz	r3, 800271c <iprintf+0x14>
 8002716:	4620      	mov	r0, r4
 8002718:	f000 f866 	bl	80027e8 <__sinit>
 800271c:	ab05      	add	r3, sp, #20
 800271e:	4620      	mov	r0, r4
 8002720:	9a04      	ldr	r2, [sp, #16]
 8002722:	68a1      	ldr	r1, [r4, #8]
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	f000 f9bb 	bl	8002aa0 <_vfiprintf_r>
 800272a:	b002      	add	sp, #8
 800272c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002730:	b004      	add	sp, #16
 8002732:	4770      	bx	lr
 8002734:	2000000c 	.word	0x2000000c

08002738 <std>:
 8002738:	2300      	movs	r3, #0
 800273a:	b510      	push	{r4, lr}
 800273c:	4604      	mov	r4, r0
 800273e:	e9c0 3300 	strd	r3, r3, [r0]
 8002742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002746:	6083      	str	r3, [r0, #8]
 8002748:	8181      	strh	r1, [r0, #12]
 800274a:	6643      	str	r3, [r0, #100]	; 0x64
 800274c:	81c2      	strh	r2, [r0, #14]
 800274e:	6183      	str	r3, [r0, #24]
 8002750:	4619      	mov	r1, r3
 8002752:	2208      	movs	r2, #8
 8002754:	305c      	adds	r0, #92	; 0x5c
 8002756:	f7ff ffcf 	bl	80026f8 <memset>
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <std+0x38>)
 800275c:	6224      	str	r4, [r4, #32]
 800275e:	6263      	str	r3, [r4, #36]	; 0x24
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <std+0x3c>)
 8002762:	62a3      	str	r3, [r4, #40]	; 0x28
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <std+0x40>)
 8002766:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <std+0x44>)
 800276a:	6323      	str	r3, [r4, #48]	; 0x30
 800276c:	bd10      	pop	{r4, pc}
 800276e:	bf00      	nop
 8002770:	0800304d 	.word	0x0800304d
 8002774:	0800306f 	.word	0x0800306f
 8002778:	080030a7 	.word	0x080030a7
 800277c:	080030cb 	.word	0x080030cb

08002780 <_cleanup_r>:
 8002780:	4901      	ldr	r1, [pc, #4]	; (8002788 <_cleanup_r+0x8>)
 8002782:	f000 b8af 	b.w	80028e4 <_fwalk_reent>
 8002786:	bf00      	nop
 8002788:	0800339d 	.word	0x0800339d

0800278c <__sfmoreglue>:
 800278c:	2268      	movs	r2, #104	; 0x68
 800278e:	b570      	push	{r4, r5, r6, lr}
 8002790:	1e4d      	subs	r5, r1, #1
 8002792:	4355      	muls	r5, r2
 8002794:	460e      	mov	r6, r1
 8002796:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800279a:	f000 f8e5 	bl	8002968 <_malloc_r>
 800279e:	4604      	mov	r4, r0
 80027a0:	b140      	cbz	r0, 80027b4 <__sfmoreglue+0x28>
 80027a2:	2100      	movs	r1, #0
 80027a4:	e9c0 1600 	strd	r1, r6, [r0]
 80027a8:	300c      	adds	r0, #12
 80027aa:	60a0      	str	r0, [r4, #8]
 80027ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027b0:	f7ff ffa2 	bl	80026f8 <memset>
 80027b4:	4620      	mov	r0, r4
 80027b6:	bd70      	pop	{r4, r5, r6, pc}

080027b8 <__sfp_lock_acquire>:
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <__sfp_lock_acquire+0x8>)
 80027ba:	f000 b8b3 	b.w	8002924 <__retarget_lock_acquire_recursive>
 80027be:	bf00      	nop
 80027c0:	2000010d 	.word	0x2000010d

080027c4 <__sfp_lock_release>:
 80027c4:	4801      	ldr	r0, [pc, #4]	; (80027cc <__sfp_lock_release+0x8>)
 80027c6:	f000 b8ae 	b.w	8002926 <__retarget_lock_release_recursive>
 80027ca:	bf00      	nop
 80027cc:	2000010d 	.word	0x2000010d

080027d0 <__sinit_lock_acquire>:
 80027d0:	4801      	ldr	r0, [pc, #4]	; (80027d8 <__sinit_lock_acquire+0x8>)
 80027d2:	f000 b8a7 	b.w	8002924 <__retarget_lock_acquire_recursive>
 80027d6:	bf00      	nop
 80027d8:	2000010e 	.word	0x2000010e

080027dc <__sinit_lock_release>:
 80027dc:	4801      	ldr	r0, [pc, #4]	; (80027e4 <__sinit_lock_release+0x8>)
 80027de:	f000 b8a2 	b.w	8002926 <__retarget_lock_release_recursive>
 80027e2:	bf00      	nop
 80027e4:	2000010e 	.word	0x2000010e

080027e8 <__sinit>:
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	f7ff fff0 	bl	80027d0 <__sinit_lock_acquire>
 80027f0:	69a3      	ldr	r3, [r4, #24]
 80027f2:	b11b      	cbz	r3, 80027fc <__sinit+0x14>
 80027f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f8:	f7ff bff0 	b.w	80027dc <__sinit_lock_release>
 80027fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002800:	6523      	str	r3, [r4, #80]	; 0x50
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <__sinit+0x68>)
 8002804:	4a13      	ldr	r2, [pc, #76]	; (8002854 <__sinit+0x6c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	62a2      	str	r2, [r4, #40]	; 0x28
 800280a:	42a3      	cmp	r3, r4
 800280c:	bf08      	it	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	4620      	mov	r0, r4
 8002812:	bf08      	it	eq
 8002814:	61a3      	streq	r3, [r4, #24]
 8002816:	f000 f81f 	bl	8002858 <__sfp>
 800281a:	6060      	str	r0, [r4, #4]
 800281c:	4620      	mov	r0, r4
 800281e:	f000 f81b 	bl	8002858 <__sfp>
 8002822:	60a0      	str	r0, [r4, #8]
 8002824:	4620      	mov	r0, r4
 8002826:	f000 f817 	bl	8002858 <__sfp>
 800282a:	2200      	movs	r2, #0
 800282c:	2104      	movs	r1, #4
 800282e:	60e0      	str	r0, [r4, #12]
 8002830:	6860      	ldr	r0, [r4, #4]
 8002832:	f7ff ff81 	bl	8002738 <std>
 8002836:	2201      	movs	r2, #1
 8002838:	2109      	movs	r1, #9
 800283a:	68a0      	ldr	r0, [r4, #8]
 800283c:	f7ff ff7c 	bl	8002738 <std>
 8002840:	2202      	movs	r2, #2
 8002842:	2112      	movs	r1, #18
 8002844:	68e0      	ldr	r0, [r4, #12]
 8002846:	f7ff ff77 	bl	8002738 <std>
 800284a:	2301      	movs	r3, #1
 800284c:	61a3      	str	r3, [r4, #24]
 800284e:	e7d1      	b.n	80027f4 <__sinit+0xc>
 8002850:	080036a4 	.word	0x080036a4
 8002854:	08002781 	.word	0x08002781

08002858 <__sfp>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	4607      	mov	r7, r0
 800285c:	f7ff ffac 	bl	80027b8 <__sfp_lock_acquire>
 8002860:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <__sfp+0x84>)
 8002862:	681e      	ldr	r6, [r3, #0]
 8002864:	69b3      	ldr	r3, [r6, #24]
 8002866:	b913      	cbnz	r3, 800286e <__sfp+0x16>
 8002868:	4630      	mov	r0, r6
 800286a:	f7ff ffbd 	bl	80027e8 <__sinit>
 800286e:	3648      	adds	r6, #72	; 0x48
 8002870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002874:	3b01      	subs	r3, #1
 8002876:	d503      	bpl.n	8002880 <__sfp+0x28>
 8002878:	6833      	ldr	r3, [r6, #0]
 800287a:	b30b      	cbz	r3, 80028c0 <__sfp+0x68>
 800287c:	6836      	ldr	r6, [r6, #0]
 800287e:	e7f7      	b.n	8002870 <__sfp+0x18>
 8002880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002884:	b9d5      	cbnz	r5, 80028bc <__sfp+0x64>
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <__sfp+0x88>)
 8002888:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800288c:	60e3      	str	r3, [r4, #12]
 800288e:	6665      	str	r5, [r4, #100]	; 0x64
 8002890:	f000 f847 	bl	8002922 <__retarget_lock_init_recursive>
 8002894:	f7ff ff96 	bl	80027c4 <__sfp_lock_release>
 8002898:	2208      	movs	r2, #8
 800289a:	4629      	mov	r1, r5
 800289c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028a4:	6025      	str	r5, [r4, #0]
 80028a6:	61a5      	str	r5, [r4, #24]
 80028a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028ac:	f7ff ff24 	bl	80026f8 <memset>
 80028b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028b8:	4620      	mov	r0, r4
 80028ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028bc:	3468      	adds	r4, #104	; 0x68
 80028be:	e7d9      	b.n	8002874 <__sfp+0x1c>
 80028c0:	2104      	movs	r1, #4
 80028c2:	4638      	mov	r0, r7
 80028c4:	f7ff ff62 	bl	800278c <__sfmoreglue>
 80028c8:	4604      	mov	r4, r0
 80028ca:	6030      	str	r0, [r6, #0]
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d1d5      	bne.n	800287c <__sfp+0x24>
 80028d0:	f7ff ff78 	bl	80027c4 <__sfp_lock_release>
 80028d4:	230c      	movs	r3, #12
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	e7ee      	b.n	80028b8 <__sfp+0x60>
 80028da:	bf00      	nop
 80028dc:	080036a4 	.word	0x080036a4
 80028e0:	ffff0001 	.word	0xffff0001

080028e4 <_fwalk_reent>:
 80028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e8:	4606      	mov	r6, r0
 80028ea:	4688      	mov	r8, r1
 80028ec:	2700      	movs	r7, #0
 80028ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028f6:	f1b9 0901 	subs.w	r9, r9, #1
 80028fa:	d505      	bpl.n	8002908 <_fwalk_reent+0x24>
 80028fc:	6824      	ldr	r4, [r4, #0]
 80028fe:	2c00      	cmp	r4, #0
 8002900:	d1f7      	bne.n	80028f2 <_fwalk_reent+0xe>
 8002902:	4638      	mov	r0, r7
 8002904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002908:	89ab      	ldrh	r3, [r5, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d907      	bls.n	800291e <_fwalk_reent+0x3a>
 800290e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002912:	3301      	adds	r3, #1
 8002914:	d003      	beq.n	800291e <_fwalk_reent+0x3a>
 8002916:	4629      	mov	r1, r5
 8002918:	4630      	mov	r0, r6
 800291a:	47c0      	blx	r8
 800291c:	4307      	orrs	r7, r0
 800291e:	3568      	adds	r5, #104	; 0x68
 8002920:	e7e9      	b.n	80028f6 <_fwalk_reent+0x12>

08002922 <__retarget_lock_init_recursive>:
 8002922:	4770      	bx	lr

08002924 <__retarget_lock_acquire_recursive>:
 8002924:	4770      	bx	lr

08002926 <__retarget_lock_release_recursive>:
 8002926:	4770      	bx	lr

08002928 <sbrk_aligned>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	4e0e      	ldr	r6, [pc, #56]	; (8002964 <sbrk_aligned+0x3c>)
 800292c:	460c      	mov	r4, r1
 800292e:	6831      	ldr	r1, [r6, #0]
 8002930:	4605      	mov	r5, r0
 8002932:	b911      	cbnz	r1, 800293a <sbrk_aligned+0x12>
 8002934:	f000 fb7a 	bl	800302c <_sbrk_r>
 8002938:	6030      	str	r0, [r6, #0]
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 fb75 	bl	800302c <_sbrk_r>
 8002942:	1c43      	adds	r3, r0, #1
 8002944:	d00a      	beq.n	800295c <sbrk_aligned+0x34>
 8002946:	1cc4      	adds	r4, r0, #3
 8002948:	f024 0403 	bic.w	r4, r4, #3
 800294c:	42a0      	cmp	r0, r4
 800294e:	d007      	beq.n	8002960 <sbrk_aligned+0x38>
 8002950:	1a21      	subs	r1, r4, r0
 8002952:	4628      	mov	r0, r5
 8002954:	f000 fb6a 	bl	800302c <_sbrk_r>
 8002958:	3001      	adds	r0, #1
 800295a:	d101      	bne.n	8002960 <sbrk_aligned+0x38>
 800295c:	f04f 34ff 	mov.w	r4, #4294967295
 8002960:	4620      	mov	r0, r4
 8002962:	bd70      	pop	{r4, r5, r6, pc}
 8002964:	20000114 	.word	0x20000114

08002968 <_malloc_r>:
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	1ccd      	adds	r5, r1, #3
 800296e:	f025 0503 	bic.w	r5, r5, #3
 8002972:	3508      	adds	r5, #8
 8002974:	2d0c      	cmp	r5, #12
 8002976:	bf38      	it	cc
 8002978:	250c      	movcc	r5, #12
 800297a:	2d00      	cmp	r5, #0
 800297c:	4607      	mov	r7, r0
 800297e:	db01      	blt.n	8002984 <_malloc_r+0x1c>
 8002980:	42a9      	cmp	r1, r5
 8002982:	d905      	bls.n	8002990 <_malloc_r+0x28>
 8002984:	230c      	movs	r3, #12
 8002986:	2600      	movs	r6, #0
 8002988:	603b      	str	r3, [r7, #0]
 800298a:	4630      	mov	r0, r6
 800298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002990:	4e2e      	ldr	r6, [pc, #184]	; (8002a4c <_malloc_r+0xe4>)
 8002992:	f000 fdc5 	bl	8003520 <__malloc_lock>
 8002996:	6833      	ldr	r3, [r6, #0]
 8002998:	461c      	mov	r4, r3
 800299a:	bb34      	cbnz	r4, 80029ea <_malloc_r+0x82>
 800299c:	4629      	mov	r1, r5
 800299e:	4638      	mov	r0, r7
 80029a0:	f7ff ffc2 	bl	8002928 <sbrk_aligned>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	4604      	mov	r4, r0
 80029a8:	d14d      	bne.n	8002a46 <_malloc_r+0xde>
 80029aa:	6834      	ldr	r4, [r6, #0]
 80029ac:	4626      	mov	r6, r4
 80029ae:	2e00      	cmp	r6, #0
 80029b0:	d140      	bne.n	8002a34 <_malloc_r+0xcc>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	4631      	mov	r1, r6
 80029b6:	4638      	mov	r0, r7
 80029b8:	eb04 0803 	add.w	r8, r4, r3
 80029bc:	f000 fb36 	bl	800302c <_sbrk_r>
 80029c0:	4580      	cmp	r8, r0
 80029c2:	d13a      	bne.n	8002a3a <_malloc_r+0xd2>
 80029c4:	6821      	ldr	r1, [r4, #0]
 80029c6:	3503      	adds	r5, #3
 80029c8:	1a6d      	subs	r5, r5, r1
 80029ca:	f025 0503 	bic.w	r5, r5, #3
 80029ce:	3508      	adds	r5, #8
 80029d0:	2d0c      	cmp	r5, #12
 80029d2:	bf38      	it	cc
 80029d4:	250c      	movcc	r5, #12
 80029d6:	4638      	mov	r0, r7
 80029d8:	4629      	mov	r1, r5
 80029da:	f7ff ffa5 	bl	8002928 <sbrk_aligned>
 80029de:	3001      	adds	r0, #1
 80029e0:	d02b      	beq.n	8002a3a <_malloc_r+0xd2>
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	442b      	add	r3, r5
 80029e6:	6023      	str	r3, [r4, #0]
 80029e8:	e00e      	b.n	8002a08 <_malloc_r+0xa0>
 80029ea:	6822      	ldr	r2, [r4, #0]
 80029ec:	1b52      	subs	r2, r2, r5
 80029ee:	d41e      	bmi.n	8002a2e <_malloc_r+0xc6>
 80029f0:	2a0b      	cmp	r2, #11
 80029f2:	d916      	bls.n	8002a22 <_malloc_r+0xba>
 80029f4:	1961      	adds	r1, r4, r5
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	6025      	str	r5, [r4, #0]
 80029fa:	bf18      	it	ne
 80029fc:	6059      	strne	r1, [r3, #4]
 80029fe:	6863      	ldr	r3, [r4, #4]
 8002a00:	bf08      	it	eq
 8002a02:	6031      	streq	r1, [r6, #0]
 8002a04:	5162      	str	r2, [r4, r5]
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	4638      	mov	r0, r7
 8002a0a:	f104 060b 	add.w	r6, r4, #11
 8002a0e:	f000 fd8d 	bl	800352c <__malloc_unlock>
 8002a12:	f026 0607 	bic.w	r6, r6, #7
 8002a16:	1d23      	adds	r3, r4, #4
 8002a18:	1af2      	subs	r2, r6, r3
 8002a1a:	d0b6      	beq.n	800298a <_malloc_r+0x22>
 8002a1c:	1b9b      	subs	r3, r3, r6
 8002a1e:	50a3      	str	r3, [r4, r2]
 8002a20:	e7b3      	b.n	800298a <_malloc_r+0x22>
 8002a22:	6862      	ldr	r2, [r4, #4]
 8002a24:	42a3      	cmp	r3, r4
 8002a26:	bf0c      	ite	eq
 8002a28:	6032      	streq	r2, [r6, #0]
 8002a2a:	605a      	strne	r2, [r3, #4]
 8002a2c:	e7ec      	b.n	8002a08 <_malloc_r+0xa0>
 8002a2e:	4623      	mov	r3, r4
 8002a30:	6864      	ldr	r4, [r4, #4]
 8002a32:	e7b2      	b.n	800299a <_malloc_r+0x32>
 8002a34:	4634      	mov	r4, r6
 8002a36:	6876      	ldr	r6, [r6, #4]
 8002a38:	e7b9      	b.n	80029ae <_malloc_r+0x46>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	f000 fd74 	bl	800352c <__malloc_unlock>
 8002a44:	e7a1      	b.n	800298a <_malloc_r+0x22>
 8002a46:	6025      	str	r5, [r4, #0]
 8002a48:	e7de      	b.n	8002a08 <_malloc_r+0xa0>
 8002a4a:	bf00      	nop
 8002a4c:	20000110 	.word	0x20000110

08002a50 <__sfputc_r>:
 8002a50:	6893      	ldr	r3, [r2, #8]
 8002a52:	b410      	push	{r4}
 8002a54:	3b01      	subs	r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	6093      	str	r3, [r2, #8]
 8002a5a:	da07      	bge.n	8002a6c <__sfputc_r+0x1c>
 8002a5c:	6994      	ldr	r4, [r2, #24]
 8002a5e:	42a3      	cmp	r3, r4
 8002a60:	db01      	blt.n	8002a66 <__sfputc_r+0x16>
 8002a62:	290a      	cmp	r1, #10
 8002a64:	d102      	bne.n	8002a6c <__sfputc_r+0x1c>
 8002a66:	bc10      	pop	{r4}
 8002a68:	f000 bb34 	b.w	80030d4 <__swbuf_r>
 8002a6c:	6813      	ldr	r3, [r2, #0]
 8002a6e:	1c58      	adds	r0, r3, #1
 8002a70:	6010      	str	r0, [r2, #0]
 8002a72:	7019      	strb	r1, [r3, #0]
 8002a74:	4608      	mov	r0, r1
 8002a76:	bc10      	pop	{r4}
 8002a78:	4770      	bx	lr

08002a7a <__sfputs_r>:
 8002a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	460f      	mov	r7, r1
 8002a80:	4614      	mov	r4, r2
 8002a82:	18d5      	adds	r5, r2, r3
 8002a84:	42ac      	cmp	r4, r5
 8002a86:	d101      	bne.n	8002a8c <__sfputs_r+0x12>
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e007      	b.n	8002a9c <__sfputs_r+0x22>
 8002a8c:	463a      	mov	r2, r7
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a94:	f7ff ffdc 	bl	8002a50 <__sfputc_r>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d1f3      	bne.n	8002a84 <__sfputs_r+0xa>
 8002a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002aa0 <_vfiprintf_r>:
 8002aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	4698      	mov	r8, r3
 8002aaa:	4606      	mov	r6, r0
 8002aac:	b09d      	sub	sp, #116	; 0x74
 8002aae:	b118      	cbz	r0, 8002ab8 <_vfiprintf_r+0x18>
 8002ab0:	6983      	ldr	r3, [r0, #24]
 8002ab2:	b90b      	cbnz	r3, 8002ab8 <_vfiprintf_r+0x18>
 8002ab4:	f7ff fe98 	bl	80027e8 <__sinit>
 8002ab8:	4b89      	ldr	r3, [pc, #548]	; (8002ce0 <_vfiprintf_r+0x240>)
 8002aba:	429d      	cmp	r5, r3
 8002abc:	d11b      	bne.n	8002af6 <_vfiprintf_r+0x56>
 8002abe:	6875      	ldr	r5, [r6, #4]
 8002ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ac2:	07d9      	lsls	r1, r3, #31
 8002ac4:	d405      	bmi.n	8002ad2 <_vfiprintf_r+0x32>
 8002ac6:	89ab      	ldrh	r3, [r5, #12]
 8002ac8:	059a      	lsls	r2, r3, #22
 8002aca:	d402      	bmi.n	8002ad2 <_vfiprintf_r+0x32>
 8002acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ace:	f7ff ff29 	bl	8002924 <__retarget_lock_acquire_recursive>
 8002ad2:	89ab      	ldrh	r3, [r5, #12]
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	d501      	bpl.n	8002adc <_vfiprintf_r+0x3c>
 8002ad8:	692b      	ldr	r3, [r5, #16]
 8002ada:	b9eb      	cbnz	r3, 8002b18 <_vfiprintf_r+0x78>
 8002adc:	4629      	mov	r1, r5
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f000 fb5c 	bl	800319c <__swsetup_r>
 8002ae4:	b1c0      	cbz	r0, 8002b18 <_vfiprintf_r+0x78>
 8002ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ae8:	07dc      	lsls	r4, r3, #31
 8002aea:	d50e      	bpl.n	8002b0a <_vfiprintf_r+0x6a>
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	b01d      	add	sp, #116	; 0x74
 8002af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002af6:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <_vfiprintf_r+0x244>)
 8002af8:	429d      	cmp	r5, r3
 8002afa:	d101      	bne.n	8002b00 <_vfiprintf_r+0x60>
 8002afc:	68b5      	ldr	r5, [r6, #8]
 8002afe:	e7df      	b.n	8002ac0 <_vfiprintf_r+0x20>
 8002b00:	4b79      	ldr	r3, [pc, #484]	; (8002ce8 <_vfiprintf_r+0x248>)
 8002b02:	429d      	cmp	r5, r3
 8002b04:	bf08      	it	eq
 8002b06:	68f5      	ldreq	r5, [r6, #12]
 8002b08:	e7da      	b.n	8002ac0 <_vfiprintf_r+0x20>
 8002b0a:	89ab      	ldrh	r3, [r5, #12]
 8002b0c:	0598      	lsls	r0, r3, #22
 8002b0e:	d4ed      	bmi.n	8002aec <_vfiprintf_r+0x4c>
 8002b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b12:	f7ff ff08 	bl	8002926 <__retarget_lock_release_recursive>
 8002b16:	e7e9      	b.n	8002aec <_vfiprintf_r+0x4c>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b22:	2330      	movs	r3, #48	; 0x30
 8002b24:	f04f 0901 	mov.w	r9, #1
 8002b28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002cec <_vfiprintf_r+0x24c>
 8002b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b34:	4623      	mov	r3, r4
 8002b36:	469a      	mov	sl, r3
 8002b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b3c:	b10a      	cbz	r2, 8002b42 <_vfiprintf_r+0xa2>
 8002b3e:	2a25      	cmp	r2, #37	; 0x25
 8002b40:	d1f9      	bne.n	8002b36 <_vfiprintf_r+0x96>
 8002b42:	ebba 0b04 	subs.w	fp, sl, r4
 8002b46:	d00b      	beq.n	8002b60 <_vfiprintf_r+0xc0>
 8002b48:	465b      	mov	r3, fp
 8002b4a:	4622      	mov	r2, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	4630      	mov	r0, r6
 8002b50:	f7ff ff93 	bl	8002a7a <__sfputs_r>
 8002b54:	3001      	adds	r0, #1
 8002b56:	f000 80aa 	beq.w	8002cae <_vfiprintf_r+0x20e>
 8002b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b5c:	445a      	add	r2, fp
 8002b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8002b60:	f89a 3000 	ldrb.w	r3, [sl]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80a2 	beq.w	8002cae <_vfiprintf_r+0x20e>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b74:	f10a 0a01 	add.w	sl, sl, #1
 8002b78:	9304      	str	r3, [sp, #16]
 8002b7a:	9307      	str	r3, [sp, #28]
 8002b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b80:	931a      	str	r3, [sp, #104]	; 0x68
 8002b82:	4654      	mov	r4, sl
 8002b84:	2205      	movs	r2, #5
 8002b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b8a:	4858      	ldr	r0, [pc, #352]	; (8002cec <_vfiprintf_r+0x24c>)
 8002b8c:	f000 fcba 	bl	8003504 <memchr>
 8002b90:	9a04      	ldr	r2, [sp, #16]
 8002b92:	b9d8      	cbnz	r0, 8002bcc <_vfiprintf_r+0x12c>
 8002b94:	06d1      	lsls	r1, r2, #27
 8002b96:	bf44      	itt	mi
 8002b98:	2320      	movmi	r3, #32
 8002b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b9e:	0713      	lsls	r3, r2, #28
 8002ba0:	bf44      	itt	mi
 8002ba2:	232b      	movmi	r3, #43	; 0x2b
 8002ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8002bac:	2b2a      	cmp	r3, #42	; 0x2a
 8002bae:	d015      	beq.n	8002bdc <_vfiprintf_r+0x13c>
 8002bb0:	4654      	mov	r4, sl
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f04f 0c0a 	mov.w	ip, #10
 8002bb8:	9a07      	ldr	r2, [sp, #28]
 8002bba:	4621      	mov	r1, r4
 8002bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bc0:	3b30      	subs	r3, #48	; 0x30
 8002bc2:	2b09      	cmp	r3, #9
 8002bc4:	d94e      	bls.n	8002c64 <_vfiprintf_r+0x1c4>
 8002bc6:	b1b0      	cbz	r0, 8002bf6 <_vfiprintf_r+0x156>
 8002bc8:	9207      	str	r2, [sp, #28]
 8002bca:	e014      	b.n	8002bf6 <_vfiprintf_r+0x156>
 8002bcc:	eba0 0308 	sub.w	r3, r0, r8
 8002bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	46a2      	mov	sl, r4
 8002bd8:	9304      	str	r3, [sp, #16]
 8002bda:	e7d2      	b.n	8002b82 <_vfiprintf_r+0xe2>
 8002bdc:	9b03      	ldr	r3, [sp, #12]
 8002bde:	1d19      	adds	r1, r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	9103      	str	r1, [sp, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bfbb      	ittet	lt
 8002be8:	425b      	neglt	r3, r3
 8002bea:	f042 0202 	orrlt.w	r2, r2, #2
 8002bee:	9307      	strge	r3, [sp, #28]
 8002bf0:	9307      	strlt	r3, [sp, #28]
 8002bf2:	bfb8      	it	lt
 8002bf4:	9204      	strlt	r2, [sp, #16]
 8002bf6:	7823      	ldrb	r3, [r4, #0]
 8002bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bfa:	d10c      	bne.n	8002c16 <_vfiprintf_r+0x176>
 8002bfc:	7863      	ldrb	r3, [r4, #1]
 8002bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002c00:	d135      	bne.n	8002c6e <_vfiprintf_r+0x1ce>
 8002c02:	9b03      	ldr	r3, [sp, #12]
 8002c04:	3402      	adds	r4, #2
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	9203      	str	r2, [sp, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bfb8      	it	lt
 8002c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c14:	9305      	str	r3, [sp, #20]
 8002c16:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002cf0 <_vfiprintf_r+0x250>
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4650      	mov	r0, sl
 8002c1e:	7821      	ldrb	r1, [r4, #0]
 8002c20:	f000 fc70 	bl	8003504 <memchr>
 8002c24:	b140      	cbz	r0, 8002c38 <_vfiprintf_r+0x198>
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	eba0 000a 	sub.w	r0, r0, sl
 8002c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c30:	9b04      	ldr	r3, [sp, #16]
 8002c32:	3401      	adds	r4, #1
 8002c34:	4303      	orrs	r3, r0
 8002c36:	9304      	str	r3, [sp, #16]
 8002c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	482d      	ldr	r0, [pc, #180]	; (8002cf4 <_vfiprintf_r+0x254>)
 8002c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c44:	f000 fc5e 	bl	8003504 <memchr>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d03f      	beq.n	8002ccc <_vfiprintf_r+0x22c>
 8002c4c:	4b2a      	ldr	r3, [pc, #168]	; (8002cf8 <_vfiprintf_r+0x258>)
 8002c4e:	bb1b      	cbnz	r3, 8002c98 <_vfiprintf_r+0x1f8>
 8002c50:	9b03      	ldr	r3, [sp, #12]
 8002c52:	3307      	adds	r3, #7
 8002c54:	f023 0307 	bic.w	r3, r3, #7
 8002c58:	3308      	adds	r3, #8
 8002c5a:	9303      	str	r3, [sp, #12]
 8002c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c5e:	443b      	add	r3, r7
 8002c60:	9309      	str	r3, [sp, #36]	; 0x24
 8002c62:	e767      	b.n	8002b34 <_vfiprintf_r+0x94>
 8002c64:	460c      	mov	r4, r1
 8002c66:	2001      	movs	r0, #1
 8002c68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c6c:	e7a5      	b.n	8002bba <_vfiprintf_r+0x11a>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	f04f 0c0a 	mov.w	ip, #10
 8002c74:	4619      	mov	r1, r3
 8002c76:	3401      	adds	r4, #1
 8002c78:	9305      	str	r3, [sp, #20]
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c80:	3a30      	subs	r2, #48	; 0x30
 8002c82:	2a09      	cmp	r2, #9
 8002c84:	d903      	bls.n	8002c8e <_vfiprintf_r+0x1ee>
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0c5      	beq.n	8002c16 <_vfiprintf_r+0x176>
 8002c8a:	9105      	str	r1, [sp, #20]
 8002c8c:	e7c3      	b.n	8002c16 <_vfiprintf_r+0x176>
 8002c8e:	4604      	mov	r4, r0
 8002c90:	2301      	movs	r3, #1
 8002c92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c96:	e7f0      	b.n	8002c7a <_vfiprintf_r+0x1da>
 8002c98:	ab03      	add	r3, sp, #12
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	462a      	mov	r2, r5
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <_vfiprintf_r+0x25c>)
 8002ca2:	a904      	add	r1, sp, #16
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	4607      	mov	r7, r0
 8002caa:	1c78      	adds	r0, r7, #1
 8002cac:	d1d6      	bne.n	8002c5c <_vfiprintf_r+0x1bc>
 8002cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cb0:	07d9      	lsls	r1, r3, #31
 8002cb2:	d405      	bmi.n	8002cc0 <_vfiprintf_r+0x220>
 8002cb4:	89ab      	ldrh	r3, [r5, #12]
 8002cb6:	059a      	lsls	r2, r3, #22
 8002cb8:	d402      	bmi.n	8002cc0 <_vfiprintf_r+0x220>
 8002cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cbc:	f7ff fe33 	bl	8002926 <__retarget_lock_release_recursive>
 8002cc0:	89ab      	ldrh	r3, [r5, #12]
 8002cc2:	065b      	lsls	r3, r3, #25
 8002cc4:	f53f af12 	bmi.w	8002aec <_vfiprintf_r+0x4c>
 8002cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cca:	e711      	b.n	8002af0 <_vfiprintf_r+0x50>
 8002ccc:	ab03      	add	r3, sp, #12
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	462a      	mov	r2, r5
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <_vfiprintf_r+0x25c>)
 8002cd6:	a904      	add	r1, sp, #16
 8002cd8:	f000 f882 	bl	8002de0 <_printf_i>
 8002cdc:	e7e4      	b.n	8002ca8 <_vfiprintf_r+0x208>
 8002cde:	bf00      	nop
 8002ce0:	080036c8 	.word	0x080036c8
 8002ce4:	080036e8 	.word	0x080036e8
 8002ce8:	080036a8 	.word	0x080036a8
 8002cec:	08003708 	.word	0x08003708
 8002cf0:	0800370e 	.word	0x0800370e
 8002cf4:	08003712 	.word	0x08003712
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	08002a7b 	.word	0x08002a7b

08002d00 <_printf_common>:
 8002d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	4616      	mov	r6, r2
 8002d06:	4699      	mov	r9, r3
 8002d08:	688a      	ldr	r2, [r1, #8]
 8002d0a:	690b      	ldr	r3, [r1, #16]
 8002d0c:	4607      	mov	r7, r0
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	bfb8      	it	lt
 8002d12:	4613      	movlt	r3, r2
 8002d14:	6033      	str	r3, [r6, #0]
 8002d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d1a:	460c      	mov	r4, r1
 8002d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d20:	b10a      	cbz	r2, 8002d26 <_printf_common+0x26>
 8002d22:	3301      	adds	r3, #1
 8002d24:	6033      	str	r3, [r6, #0]
 8002d26:	6823      	ldr	r3, [r4, #0]
 8002d28:	0699      	lsls	r1, r3, #26
 8002d2a:	bf42      	ittt	mi
 8002d2c:	6833      	ldrmi	r3, [r6, #0]
 8002d2e:	3302      	addmi	r3, #2
 8002d30:	6033      	strmi	r3, [r6, #0]
 8002d32:	6825      	ldr	r5, [r4, #0]
 8002d34:	f015 0506 	ands.w	r5, r5, #6
 8002d38:	d106      	bne.n	8002d48 <_printf_common+0x48>
 8002d3a:	f104 0a19 	add.w	sl, r4, #25
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	6832      	ldr	r2, [r6, #0]
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	42ab      	cmp	r3, r5
 8002d46:	dc28      	bgt.n	8002d9a <_printf_common+0x9a>
 8002d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d4c:	1e13      	subs	r3, r2, #0
 8002d4e:	6822      	ldr	r2, [r4, #0]
 8002d50:	bf18      	it	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	0692      	lsls	r2, r2, #26
 8002d56:	d42d      	bmi.n	8002db4 <_printf_common+0xb4>
 8002d58:	4649      	mov	r1, r9
 8002d5a:	4638      	mov	r0, r7
 8002d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d60:	47c0      	blx	r8
 8002d62:	3001      	adds	r0, #1
 8002d64:	d020      	beq.n	8002da8 <_printf_common+0xa8>
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	68e5      	ldr	r5, [r4, #12]
 8002d6a:	f003 0306 	and.w	r3, r3, #6
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf18      	it	ne
 8002d72:	2500      	movne	r5, #0
 8002d74:	6832      	ldr	r2, [r6, #0]
 8002d76:	f04f 0600 	mov.w	r6, #0
 8002d7a:	68a3      	ldr	r3, [r4, #8]
 8002d7c:	bf08      	it	eq
 8002d7e:	1aad      	subeq	r5, r5, r2
 8002d80:	6922      	ldr	r2, [r4, #16]
 8002d82:	bf08      	it	eq
 8002d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bfc4      	itt	gt
 8002d8c:	1a9b      	subgt	r3, r3, r2
 8002d8e:	18ed      	addgt	r5, r5, r3
 8002d90:	341a      	adds	r4, #26
 8002d92:	42b5      	cmp	r5, r6
 8002d94:	d11a      	bne.n	8002dcc <_printf_common+0xcc>
 8002d96:	2000      	movs	r0, #0
 8002d98:	e008      	b.n	8002dac <_printf_common+0xac>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	4652      	mov	r2, sl
 8002d9e:	4649      	mov	r1, r9
 8002da0:	4638      	mov	r0, r7
 8002da2:	47c0      	blx	r8
 8002da4:	3001      	adds	r0, #1
 8002da6:	d103      	bne.n	8002db0 <_printf_common+0xb0>
 8002da8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002db0:	3501      	adds	r5, #1
 8002db2:	e7c4      	b.n	8002d3e <_printf_common+0x3e>
 8002db4:	2030      	movs	r0, #48	; 0x30
 8002db6:	18e1      	adds	r1, r4, r3
 8002db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dc2:	4422      	add	r2, r4
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dca:	e7c5      	b.n	8002d58 <_printf_common+0x58>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	4622      	mov	r2, r4
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	4638      	mov	r0, r7
 8002dd4:	47c0      	blx	r8
 8002dd6:	3001      	adds	r0, #1
 8002dd8:	d0e6      	beq.n	8002da8 <_printf_common+0xa8>
 8002dda:	3601      	adds	r6, #1
 8002ddc:	e7d9      	b.n	8002d92 <_printf_common+0x92>
	...

08002de0 <_printf_i>:
 8002de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002de4:	7e0f      	ldrb	r7, [r1, #24]
 8002de6:	4691      	mov	r9, r2
 8002de8:	2f78      	cmp	r7, #120	; 0x78
 8002dea:	4680      	mov	r8, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	469a      	mov	sl, r3
 8002df0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002df6:	d807      	bhi.n	8002e08 <_printf_i+0x28>
 8002df8:	2f62      	cmp	r7, #98	; 0x62
 8002dfa:	d80a      	bhi.n	8002e12 <_printf_i+0x32>
 8002dfc:	2f00      	cmp	r7, #0
 8002dfe:	f000 80d9 	beq.w	8002fb4 <_printf_i+0x1d4>
 8002e02:	2f58      	cmp	r7, #88	; 0x58
 8002e04:	f000 80a4 	beq.w	8002f50 <_printf_i+0x170>
 8002e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e10:	e03a      	b.n	8002e88 <_printf_i+0xa8>
 8002e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e16:	2b15      	cmp	r3, #21
 8002e18:	d8f6      	bhi.n	8002e08 <_printf_i+0x28>
 8002e1a:	a101      	add	r1, pc, #4	; (adr r1, 8002e20 <_printf_i+0x40>)
 8002e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e20:	08002e79 	.word	0x08002e79
 8002e24:	08002e8d 	.word	0x08002e8d
 8002e28:	08002e09 	.word	0x08002e09
 8002e2c:	08002e09 	.word	0x08002e09
 8002e30:	08002e09 	.word	0x08002e09
 8002e34:	08002e09 	.word	0x08002e09
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002e09 	.word	0x08002e09
 8002e40:	08002e09 	.word	0x08002e09
 8002e44:	08002e09 	.word	0x08002e09
 8002e48:	08002e09 	.word	0x08002e09
 8002e4c:	08002f9b 	.word	0x08002f9b
 8002e50:	08002ebd 	.word	0x08002ebd
 8002e54:	08002f7d 	.word	0x08002f7d
 8002e58:	08002e09 	.word	0x08002e09
 8002e5c:	08002e09 	.word	0x08002e09
 8002e60:	08002fbd 	.word	0x08002fbd
 8002e64:	08002e09 	.word	0x08002e09
 8002e68:	08002ebd 	.word	0x08002ebd
 8002e6c:	08002e09 	.word	0x08002e09
 8002e70:	08002e09 	.word	0x08002e09
 8002e74:	08002f85 	.word	0x08002f85
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	1d1a      	adds	r2, r3, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	602a      	str	r2, [r5, #0]
 8002e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0a4      	b.n	8002fd6 <_printf_i+0x1f6>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	6829      	ldr	r1, [r5, #0]
 8002e90:	0606      	lsls	r6, r0, #24
 8002e92:	f101 0304 	add.w	r3, r1, #4
 8002e96:	d50a      	bpl.n	8002eae <_printf_i+0xce>
 8002e98:	680e      	ldr	r6, [r1, #0]
 8002e9a:	602b      	str	r3, [r5, #0]
 8002e9c:	2e00      	cmp	r6, #0
 8002e9e:	da03      	bge.n	8002ea8 <_printf_i+0xc8>
 8002ea0:	232d      	movs	r3, #45	; 0x2d
 8002ea2:	4276      	negs	r6, r6
 8002ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ea8:	230a      	movs	r3, #10
 8002eaa:	485e      	ldr	r0, [pc, #376]	; (8003024 <_printf_i+0x244>)
 8002eac:	e019      	b.n	8002ee2 <_printf_i+0x102>
 8002eae:	680e      	ldr	r6, [r1, #0]
 8002eb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002eb4:	602b      	str	r3, [r5, #0]
 8002eb6:	bf18      	it	ne
 8002eb8:	b236      	sxthne	r6, r6
 8002eba:	e7ef      	b.n	8002e9c <_printf_i+0xbc>
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	1d19      	adds	r1, r3, #4
 8002ec2:	6029      	str	r1, [r5, #0]
 8002ec4:	0601      	lsls	r1, r0, #24
 8002ec6:	d501      	bpl.n	8002ecc <_printf_i+0xec>
 8002ec8:	681e      	ldr	r6, [r3, #0]
 8002eca:	e002      	b.n	8002ed2 <_printf_i+0xf2>
 8002ecc:	0646      	lsls	r6, r0, #25
 8002ece:	d5fb      	bpl.n	8002ec8 <_printf_i+0xe8>
 8002ed0:	881e      	ldrh	r6, [r3, #0]
 8002ed2:	2f6f      	cmp	r7, #111	; 0x6f
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2308      	moveq	r3, #8
 8002ed8:	230a      	movne	r3, #10
 8002eda:	4852      	ldr	r0, [pc, #328]	; (8003024 <_printf_i+0x244>)
 8002edc:	2100      	movs	r1, #0
 8002ede:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ee2:	6865      	ldr	r5, [r4, #4]
 8002ee4:	2d00      	cmp	r5, #0
 8002ee6:	bfa8      	it	ge
 8002ee8:	6821      	ldrge	r1, [r4, #0]
 8002eea:	60a5      	str	r5, [r4, #8]
 8002eec:	bfa4      	itt	ge
 8002eee:	f021 0104 	bicge.w	r1, r1, #4
 8002ef2:	6021      	strge	r1, [r4, #0]
 8002ef4:	b90e      	cbnz	r6, 8002efa <_printf_i+0x11a>
 8002ef6:	2d00      	cmp	r5, #0
 8002ef8:	d04d      	beq.n	8002f96 <_printf_i+0x1b6>
 8002efa:	4615      	mov	r5, r2
 8002efc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f00:	fb03 6711 	mls	r7, r3, r1, r6
 8002f04:	5dc7      	ldrb	r7, [r0, r7]
 8002f06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f0a:	4637      	mov	r7, r6
 8002f0c:	42bb      	cmp	r3, r7
 8002f0e:	460e      	mov	r6, r1
 8002f10:	d9f4      	bls.n	8002efc <_printf_i+0x11c>
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d10b      	bne.n	8002f2e <_printf_i+0x14e>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	07de      	lsls	r6, r3, #31
 8002f1a:	d508      	bpl.n	8002f2e <_printf_i+0x14e>
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	6861      	ldr	r1, [r4, #4]
 8002f20:	4299      	cmp	r1, r3
 8002f22:	bfde      	ittt	le
 8002f24:	2330      	movle	r3, #48	; 0x30
 8002f26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f2e:	1b52      	subs	r2, r2, r5
 8002f30:	6122      	str	r2, [r4, #16]
 8002f32:	464b      	mov	r3, r9
 8002f34:	4621      	mov	r1, r4
 8002f36:	4640      	mov	r0, r8
 8002f38:	f8cd a000 	str.w	sl, [sp]
 8002f3c:	aa03      	add	r2, sp, #12
 8002f3e:	f7ff fedf 	bl	8002d00 <_printf_common>
 8002f42:	3001      	adds	r0, #1
 8002f44:	d14c      	bne.n	8002fe0 <_printf_i+0x200>
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4a:	b004      	add	sp, #16
 8002f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f50:	4834      	ldr	r0, [pc, #208]	; (8003024 <_printf_i+0x244>)
 8002f52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f5e:	6029      	str	r1, [r5, #0]
 8002f60:	061d      	lsls	r5, r3, #24
 8002f62:	d514      	bpl.n	8002f8e <_printf_i+0x1ae>
 8002f64:	07df      	lsls	r7, r3, #31
 8002f66:	bf44      	itt	mi
 8002f68:	f043 0320 	orrmi.w	r3, r3, #32
 8002f6c:	6023      	strmi	r3, [r4, #0]
 8002f6e:	b91e      	cbnz	r6, 8002f78 <_printf_i+0x198>
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	f023 0320 	bic.w	r3, r3, #32
 8002f76:	6023      	str	r3, [r4, #0]
 8002f78:	2310      	movs	r3, #16
 8002f7a:	e7af      	b.n	8002edc <_printf_i+0xfc>
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	6023      	str	r3, [r4, #0]
 8002f84:	2378      	movs	r3, #120	; 0x78
 8002f86:	4828      	ldr	r0, [pc, #160]	; (8003028 <_printf_i+0x248>)
 8002f88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f8c:	e7e3      	b.n	8002f56 <_printf_i+0x176>
 8002f8e:	0659      	lsls	r1, r3, #25
 8002f90:	bf48      	it	mi
 8002f92:	b2b6      	uxthmi	r6, r6
 8002f94:	e7e6      	b.n	8002f64 <_printf_i+0x184>
 8002f96:	4615      	mov	r5, r2
 8002f98:	e7bb      	b.n	8002f12 <_printf_i+0x132>
 8002f9a:	682b      	ldr	r3, [r5, #0]
 8002f9c:	6826      	ldr	r6, [r4, #0]
 8002f9e:	1d18      	adds	r0, r3, #4
 8002fa0:	6961      	ldr	r1, [r4, #20]
 8002fa2:	6028      	str	r0, [r5, #0]
 8002fa4:	0635      	lsls	r5, r6, #24
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	d501      	bpl.n	8002fae <_printf_i+0x1ce>
 8002faa:	6019      	str	r1, [r3, #0]
 8002fac:	e002      	b.n	8002fb4 <_printf_i+0x1d4>
 8002fae:	0670      	lsls	r0, r6, #25
 8002fb0:	d5fb      	bpl.n	8002faa <_printf_i+0x1ca>
 8002fb2:	8019      	strh	r1, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	4615      	mov	r5, r2
 8002fb8:	6123      	str	r3, [r4, #16]
 8002fba:	e7ba      	b.n	8002f32 <_printf_i+0x152>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	1d1a      	adds	r2, r3, #4
 8002fc2:	602a      	str	r2, [r5, #0]
 8002fc4:	681d      	ldr	r5, [r3, #0]
 8002fc6:	6862      	ldr	r2, [r4, #4]
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f000 fa9b 	bl	8003504 <memchr>
 8002fce:	b108      	cbz	r0, 8002fd4 <_printf_i+0x1f4>
 8002fd0:	1b40      	subs	r0, r0, r5
 8002fd2:	6060      	str	r0, [r4, #4]
 8002fd4:	6863      	ldr	r3, [r4, #4]
 8002fd6:	6123      	str	r3, [r4, #16]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fde:	e7a8      	b.n	8002f32 <_printf_i+0x152>
 8002fe0:	462a      	mov	r2, r5
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	4640      	mov	r0, r8
 8002fe6:	6923      	ldr	r3, [r4, #16]
 8002fe8:	47d0      	blx	sl
 8002fea:	3001      	adds	r0, #1
 8002fec:	d0ab      	beq.n	8002f46 <_printf_i+0x166>
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	079b      	lsls	r3, r3, #30
 8002ff2:	d413      	bmi.n	800301c <_printf_i+0x23c>
 8002ff4:	68e0      	ldr	r0, [r4, #12]
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	4298      	cmp	r0, r3
 8002ffa:	bfb8      	it	lt
 8002ffc:	4618      	movlt	r0, r3
 8002ffe:	e7a4      	b.n	8002f4a <_printf_i+0x16a>
 8003000:	2301      	movs	r3, #1
 8003002:	4632      	mov	r2, r6
 8003004:	4649      	mov	r1, r9
 8003006:	4640      	mov	r0, r8
 8003008:	47d0      	blx	sl
 800300a:	3001      	adds	r0, #1
 800300c:	d09b      	beq.n	8002f46 <_printf_i+0x166>
 800300e:	3501      	adds	r5, #1
 8003010:	68e3      	ldr	r3, [r4, #12]
 8003012:	9903      	ldr	r1, [sp, #12]
 8003014:	1a5b      	subs	r3, r3, r1
 8003016:	42ab      	cmp	r3, r5
 8003018:	dcf2      	bgt.n	8003000 <_printf_i+0x220>
 800301a:	e7eb      	b.n	8002ff4 <_printf_i+0x214>
 800301c:	2500      	movs	r5, #0
 800301e:	f104 0619 	add.w	r6, r4, #25
 8003022:	e7f5      	b.n	8003010 <_printf_i+0x230>
 8003024:	08003719 	.word	0x08003719
 8003028:	0800372a 	.word	0x0800372a

0800302c <_sbrk_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	2300      	movs	r3, #0
 8003030:	4d05      	ldr	r5, [pc, #20]	; (8003048 <_sbrk_r+0x1c>)
 8003032:	4604      	mov	r4, r0
 8003034:	4608      	mov	r0, r1
 8003036:	602b      	str	r3, [r5, #0]
 8003038:	f7fd fbde 	bl	80007f8 <_sbrk>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_sbrk_r+0x1a>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_sbrk_r+0x1a>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000118 	.word	0x20000118

0800304c <__sread>:
 800304c:	b510      	push	{r4, lr}
 800304e:	460c      	mov	r4, r1
 8003050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003054:	f000 fab8 	bl	80035c8 <_read_r>
 8003058:	2800      	cmp	r0, #0
 800305a:	bfab      	itete	ge
 800305c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800305e:	89a3      	ldrhlt	r3, [r4, #12]
 8003060:	181b      	addge	r3, r3, r0
 8003062:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003066:	bfac      	ite	ge
 8003068:	6563      	strge	r3, [r4, #84]	; 0x54
 800306a:	81a3      	strhlt	r3, [r4, #12]
 800306c:	bd10      	pop	{r4, pc}

0800306e <__swrite>:
 800306e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003072:	461f      	mov	r7, r3
 8003074:	898b      	ldrh	r3, [r1, #12]
 8003076:	4605      	mov	r5, r0
 8003078:	05db      	lsls	r3, r3, #23
 800307a:	460c      	mov	r4, r1
 800307c:	4616      	mov	r6, r2
 800307e:	d505      	bpl.n	800308c <__swrite+0x1e>
 8003080:	2302      	movs	r3, #2
 8003082:	2200      	movs	r2, #0
 8003084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003088:	f000 f9c4 	bl	8003414 <_lseek_r>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	4632      	mov	r2, r6
 8003090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	4628      	mov	r0, r5
 8003098:	463b      	mov	r3, r7
 800309a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800309e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030a2:	f000 b869 	b.w	8003178 <_write_r>

080030a6 <__sseek>:
 80030a6:	b510      	push	{r4, lr}
 80030a8:	460c      	mov	r4, r1
 80030aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ae:	f000 f9b1 	bl	8003414 <_lseek_r>
 80030b2:	1c43      	adds	r3, r0, #1
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	bf15      	itete	ne
 80030b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80030ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030c2:	81a3      	strheq	r3, [r4, #12]
 80030c4:	bf18      	it	ne
 80030c6:	81a3      	strhne	r3, [r4, #12]
 80030c8:	bd10      	pop	{r4, pc}

080030ca <__sclose>:
 80030ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ce:	f000 b8d3 	b.w	8003278 <_close_r>
	...

080030d4 <__swbuf_r>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	460e      	mov	r6, r1
 80030d8:	4614      	mov	r4, r2
 80030da:	4605      	mov	r5, r0
 80030dc:	b118      	cbz	r0, 80030e6 <__swbuf_r+0x12>
 80030de:	6983      	ldr	r3, [r0, #24]
 80030e0:	b90b      	cbnz	r3, 80030e6 <__swbuf_r+0x12>
 80030e2:	f7ff fb81 	bl	80027e8 <__sinit>
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <__swbuf_r+0x98>)
 80030e8:	429c      	cmp	r4, r3
 80030ea:	d12b      	bne.n	8003144 <__swbuf_r+0x70>
 80030ec:	686c      	ldr	r4, [r5, #4]
 80030ee:	69a3      	ldr	r3, [r4, #24]
 80030f0:	60a3      	str	r3, [r4, #8]
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	071a      	lsls	r2, r3, #28
 80030f6:	d52f      	bpl.n	8003158 <__swbuf_r+0x84>
 80030f8:	6923      	ldr	r3, [r4, #16]
 80030fa:	b36b      	cbz	r3, 8003158 <__swbuf_r+0x84>
 80030fc:	6923      	ldr	r3, [r4, #16]
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	b2f6      	uxtb	r6, r6
 8003102:	1ac0      	subs	r0, r0, r3
 8003104:	6963      	ldr	r3, [r4, #20]
 8003106:	4637      	mov	r7, r6
 8003108:	4283      	cmp	r3, r0
 800310a:	dc04      	bgt.n	8003116 <__swbuf_r+0x42>
 800310c:	4621      	mov	r1, r4
 800310e:	4628      	mov	r0, r5
 8003110:	f000 f944 	bl	800339c <_fflush_r>
 8003114:	bb30      	cbnz	r0, 8003164 <__swbuf_r+0x90>
 8003116:	68a3      	ldr	r3, [r4, #8]
 8003118:	3001      	adds	r0, #1
 800311a:	3b01      	subs	r3, #1
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	6823      	ldr	r3, [r4, #0]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	6022      	str	r2, [r4, #0]
 8003124:	701e      	strb	r6, [r3, #0]
 8003126:	6963      	ldr	r3, [r4, #20]
 8003128:	4283      	cmp	r3, r0
 800312a:	d004      	beq.n	8003136 <__swbuf_r+0x62>
 800312c:	89a3      	ldrh	r3, [r4, #12]
 800312e:	07db      	lsls	r3, r3, #31
 8003130:	d506      	bpl.n	8003140 <__swbuf_r+0x6c>
 8003132:	2e0a      	cmp	r6, #10
 8003134:	d104      	bne.n	8003140 <__swbuf_r+0x6c>
 8003136:	4621      	mov	r1, r4
 8003138:	4628      	mov	r0, r5
 800313a:	f000 f92f 	bl	800339c <_fflush_r>
 800313e:	b988      	cbnz	r0, 8003164 <__swbuf_r+0x90>
 8003140:	4638      	mov	r0, r7
 8003142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <__swbuf_r+0x9c>)
 8003146:	429c      	cmp	r4, r3
 8003148:	d101      	bne.n	800314e <__swbuf_r+0x7a>
 800314a:	68ac      	ldr	r4, [r5, #8]
 800314c:	e7cf      	b.n	80030ee <__swbuf_r+0x1a>
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <__swbuf_r+0xa0>)
 8003150:	429c      	cmp	r4, r3
 8003152:	bf08      	it	eq
 8003154:	68ec      	ldreq	r4, [r5, #12]
 8003156:	e7ca      	b.n	80030ee <__swbuf_r+0x1a>
 8003158:	4621      	mov	r1, r4
 800315a:	4628      	mov	r0, r5
 800315c:	f000 f81e 	bl	800319c <__swsetup_r>
 8003160:	2800      	cmp	r0, #0
 8003162:	d0cb      	beq.n	80030fc <__swbuf_r+0x28>
 8003164:	f04f 37ff 	mov.w	r7, #4294967295
 8003168:	e7ea      	b.n	8003140 <__swbuf_r+0x6c>
 800316a:	bf00      	nop
 800316c:	080036c8 	.word	0x080036c8
 8003170:	080036e8 	.word	0x080036e8
 8003174:	080036a8 	.word	0x080036a8

08003178 <_write_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4604      	mov	r4, r0
 800317c:	4608      	mov	r0, r1
 800317e:	4611      	mov	r1, r2
 8003180:	2200      	movs	r2, #0
 8003182:	4d05      	ldr	r5, [pc, #20]	; (8003198 <_write_r+0x20>)
 8003184:	602a      	str	r2, [r5, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f7fd faea 	bl	8000760 <_write>
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	d102      	bne.n	8003196 <_write_r+0x1e>
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	b103      	cbz	r3, 8003196 <_write_r+0x1e>
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	bd38      	pop	{r3, r4, r5, pc}
 8003198:	20000118 	.word	0x20000118

0800319c <__swsetup_r>:
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <__swsetup_r+0xcc>)
 800319e:	b570      	push	{r4, r5, r6, lr}
 80031a0:	681d      	ldr	r5, [r3, #0]
 80031a2:	4606      	mov	r6, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	b125      	cbz	r5, 80031b2 <__swsetup_r+0x16>
 80031a8:	69ab      	ldr	r3, [r5, #24]
 80031aa:	b913      	cbnz	r3, 80031b2 <__swsetup_r+0x16>
 80031ac:	4628      	mov	r0, r5
 80031ae:	f7ff fb1b 	bl	80027e8 <__sinit>
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <__swsetup_r+0xd0>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	d10f      	bne.n	80031d8 <__swsetup_r+0x3c>
 80031b8:	686c      	ldr	r4, [r5, #4]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031c0:	0719      	lsls	r1, r3, #28
 80031c2:	d42c      	bmi.n	800321e <__swsetup_r+0x82>
 80031c4:	06dd      	lsls	r5, r3, #27
 80031c6:	d411      	bmi.n	80031ec <__swsetup_r+0x50>
 80031c8:	2309      	movs	r3, #9
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	81a3      	strh	r3, [r4, #12]
 80031d6:	e03e      	b.n	8003256 <__swsetup_r+0xba>
 80031d8:	4b25      	ldr	r3, [pc, #148]	; (8003270 <__swsetup_r+0xd4>)
 80031da:	429c      	cmp	r4, r3
 80031dc:	d101      	bne.n	80031e2 <__swsetup_r+0x46>
 80031de:	68ac      	ldr	r4, [r5, #8]
 80031e0:	e7eb      	b.n	80031ba <__swsetup_r+0x1e>
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <__swsetup_r+0xd8>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	bf08      	it	eq
 80031e8:	68ec      	ldreq	r4, [r5, #12]
 80031ea:	e7e6      	b.n	80031ba <__swsetup_r+0x1e>
 80031ec:	0758      	lsls	r0, r3, #29
 80031ee:	d512      	bpl.n	8003216 <__swsetup_r+0x7a>
 80031f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031f2:	b141      	cbz	r1, 8003206 <__swsetup_r+0x6a>
 80031f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031f8:	4299      	cmp	r1, r3
 80031fa:	d002      	beq.n	8003202 <__swsetup_r+0x66>
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f99b 	bl	8003538 <_free_r>
 8003202:	2300      	movs	r3, #0
 8003204:	6363      	str	r3, [r4, #52]	; 0x34
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	2300      	movs	r3, #0
 8003210:	6063      	str	r3, [r4, #4]
 8003212:	6923      	ldr	r3, [r4, #16]
 8003214:	6023      	str	r3, [r4, #0]
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	81a3      	strh	r3, [r4, #12]
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	b94b      	cbnz	r3, 8003236 <__swsetup_r+0x9a>
 8003222:	89a3      	ldrh	r3, [r4, #12]
 8003224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	d003      	beq.n	8003236 <__swsetup_r+0x9a>
 800322e:	4621      	mov	r1, r4
 8003230:	4630      	mov	r0, r6
 8003232:	f000 f927 	bl	8003484 <__smakebuf_r>
 8003236:	89a0      	ldrh	r0, [r4, #12]
 8003238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800323c:	f010 0301 	ands.w	r3, r0, #1
 8003240:	d00a      	beq.n	8003258 <__swsetup_r+0xbc>
 8003242:	2300      	movs	r3, #0
 8003244:	60a3      	str	r3, [r4, #8]
 8003246:	6963      	ldr	r3, [r4, #20]
 8003248:	425b      	negs	r3, r3
 800324a:	61a3      	str	r3, [r4, #24]
 800324c:	6923      	ldr	r3, [r4, #16]
 800324e:	b943      	cbnz	r3, 8003262 <__swsetup_r+0xc6>
 8003250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003254:	d1ba      	bne.n	80031cc <__swsetup_r+0x30>
 8003256:	bd70      	pop	{r4, r5, r6, pc}
 8003258:	0781      	lsls	r1, r0, #30
 800325a:	bf58      	it	pl
 800325c:	6963      	ldrpl	r3, [r4, #20]
 800325e:	60a3      	str	r3, [r4, #8]
 8003260:	e7f4      	b.n	800324c <__swsetup_r+0xb0>
 8003262:	2000      	movs	r0, #0
 8003264:	e7f7      	b.n	8003256 <__swsetup_r+0xba>
 8003266:	bf00      	nop
 8003268:	2000000c 	.word	0x2000000c
 800326c:	080036c8 	.word	0x080036c8
 8003270:	080036e8 	.word	0x080036e8
 8003274:	080036a8 	.word	0x080036a8

08003278 <_close_r>:
 8003278:	b538      	push	{r3, r4, r5, lr}
 800327a:	2300      	movs	r3, #0
 800327c:	4d05      	ldr	r5, [pc, #20]	; (8003294 <_close_r+0x1c>)
 800327e:	4604      	mov	r4, r0
 8003280:	4608      	mov	r0, r1
 8003282:	602b      	str	r3, [r5, #0]
 8003284:	f7fd fa88 	bl	8000798 <_close>
 8003288:	1c43      	adds	r3, r0, #1
 800328a:	d102      	bne.n	8003292 <_close_r+0x1a>
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	b103      	cbz	r3, 8003292 <_close_r+0x1a>
 8003290:	6023      	str	r3, [r4, #0]
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	20000118 	.word	0x20000118

08003298 <__sflush_r>:
 8003298:	898a      	ldrh	r2, [r1, #12]
 800329a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329c:	4605      	mov	r5, r0
 800329e:	0710      	lsls	r0, r2, #28
 80032a0:	460c      	mov	r4, r1
 80032a2:	d457      	bmi.n	8003354 <__sflush_r+0xbc>
 80032a4:	684b      	ldr	r3, [r1, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dc04      	bgt.n	80032b4 <__sflush_r+0x1c>
 80032aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dc01      	bgt.n	80032b4 <__sflush_r+0x1c>
 80032b0:	2000      	movs	r0, #0
 80032b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032b6:	2e00      	cmp	r6, #0
 80032b8:	d0fa      	beq.n	80032b0 <__sflush_r+0x18>
 80032ba:	2300      	movs	r3, #0
 80032bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80032c0:	682f      	ldr	r7, [r5, #0]
 80032c2:	602b      	str	r3, [r5, #0]
 80032c4:	d032      	beq.n	800332c <__sflush_r+0x94>
 80032c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	075a      	lsls	r2, r3, #29
 80032cc:	d505      	bpl.n	80032da <__sflush_r+0x42>
 80032ce:	6863      	ldr	r3, [r4, #4]
 80032d0:	1ac0      	subs	r0, r0, r3
 80032d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032d4:	b10b      	cbz	r3, 80032da <__sflush_r+0x42>
 80032d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032d8:	1ac0      	subs	r0, r0, r3
 80032da:	2300      	movs	r3, #0
 80032dc:	4602      	mov	r2, r0
 80032de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032e0:	4628      	mov	r0, r5
 80032e2:	6a21      	ldr	r1, [r4, #32]
 80032e4:	47b0      	blx	r6
 80032e6:	1c43      	adds	r3, r0, #1
 80032e8:	89a3      	ldrh	r3, [r4, #12]
 80032ea:	d106      	bne.n	80032fa <__sflush_r+0x62>
 80032ec:	6829      	ldr	r1, [r5, #0]
 80032ee:	291d      	cmp	r1, #29
 80032f0:	d82c      	bhi.n	800334c <__sflush_r+0xb4>
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <__sflush_r+0x100>)
 80032f4:	40ca      	lsrs	r2, r1
 80032f6:	07d6      	lsls	r6, r2, #31
 80032f8:	d528      	bpl.n	800334c <__sflush_r+0xb4>
 80032fa:	2200      	movs	r2, #0
 80032fc:	6062      	str	r2, [r4, #4]
 80032fe:	6922      	ldr	r2, [r4, #16]
 8003300:	04d9      	lsls	r1, r3, #19
 8003302:	6022      	str	r2, [r4, #0]
 8003304:	d504      	bpl.n	8003310 <__sflush_r+0x78>
 8003306:	1c42      	adds	r2, r0, #1
 8003308:	d101      	bne.n	800330e <__sflush_r+0x76>
 800330a:	682b      	ldr	r3, [r5, #0]
 800330c:	b903      	cbnz	r3, 8003310 <__sflush_r+0x78>
 800330e:	6560      	str	r0, [r4, #84]	; 0x54
 8003310:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003312:	602f      	str	r7, [r5, #0]
 8003314:	2900      	cmp	r1, #0
 8003316:	d0cb      	beq.n	80032b0 <__sflush_r+0x18>
 8003318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800331c:	4299      	cmp	r1, r3
 800331e:	d002      	beq.n	8003326 <__sflush_r+0x8e>
 8003320:	4628      	mov	r0, r5
 8003322:	f000 f909 	bl	8003538 <_free_r>
 8003326:	2000      	movs	r0, #0
 8003328:	6360      	str	r0, [r4, #52]	; 0x34
 800332a:	e7c2      	b.n	80032b2 <__sflush_r+0x1a>
 800332c:	6a21      	ldr	r1, [r4, #32]
 800332e:	2301      	movs	r3, #1
 8003330:	4628      	mov	r0, r5
 8003332:	47b0      	blx	r6
 8003334:	1c41      	adds	r1, r0, #1
 8003336:	d1c7      	bne.n	80032c8 <__sflush_r+0x30>
 8003338:	682b      	ldr	r3, [r5, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0c4      	beq.n	80032c8 <__sflush_r+0x30>
 800333e:	2b1d      	cmp	r3, #29
 8003340:	d001      	beq.n	8003346 <__sflush_r+0xae>
 8003342:	2b16      	cmp	r3, #22
 8003344:	d101      	bne.n	800334a <__sflush_r+0xb2>
 8003346:	602f      	str	r7, [r5, #0]
 8003348:	e7b2      	b.n	80032b0 <__sflush_r+0x18>
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003350:	81a3      	strh	r3, [r4, #12]
 8003352:	e7ae      	b.n	80032b2 <__sflush_r+0x1a>
 8003354:	690f      	ldr	r7, [r1, #16]
 8003356:	2f00      	cmp	r7, #0
 8003358:	d0aa      	beq.n	80032b0 <__sflush_r+0x18>
 800335a:	0793      	lsls	r3, r2, #30
 800335c:	bf18      	it	ne
 800335e:	2300      	movne	r3, #0
 8003360:	680e      	ldr	r6, [r1, #0]
 8003362:	bf08      	it	eq
 8003364:	694b      	ldreq	r3, [r1, #20]
 8003366:	1bf6      	subs	r6, r6, r7
 8003368:	600f      	str	r7, [r1, #0]
 800336a:	608b      	str	r3, [r1, #8]
 800336c:	2e00      	cmp	r6, #0
 800336e:	dd9f      	ble.n	80032b0 <__sflush_r+0x18>
 8003370:	4633      	mov	r3, r6
 8003372:	463a      	mov	r2, r7
 8003374:	4628      	mov	r0, r5
 8003376:	6a21      	ldr	r1, [r4, #32]
 8003378:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800337c:	47e0      	blx	ip
 800337e:	2800      	cmp	r0, #0
 8003380:	dc06      	bgt.n	8003390 <__sflush_r+0xf8>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	e790      	b.n	80032b2 <__sflush_r+0x1a>
 8003390:	4407      	add	r7, r0
 8003392:	1a36      	subs	r6, r6, r0
 8003394:	e7ea      	b.n	800336c <__sflush_r+0xd4>
 8003396:	bf00      	nop
 8003398:	20400001 	.word	0x20400001

0800339c <_fflush_r>:
 800339c:	b538      	push	{r3, r4, r5, lr}
 800339e:	690b      	ldr	r3, [r1, #16]
 80033a0:	4605      	mov	r5, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	b913      	cbnz	r3, 80033ac <_fflush_r+0x10>
 80033a6:	2500      	movs	r5, #0
 80033a8:	4628      	mov	r0, r5
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	b118      	cbz	r0, 80033b6 <_fflush_r+0x1a>
 80033ae:	6983      	ldr	r3, [r0, #24]
 80033b0:	b90b      	cbnz	r3, 80033b6 <_fflush_r+0x1a>
 80033b2:	f7ff fa19 	bl	80027e8 <__sinit>
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <_fflush_r+0x6c>)
 80033b8:	429c      	cmp	r4, r3
 80033ba:	d11b      	bne.n	80033f4 <_fflush_r+0x58>
 80033bc:	686c      	ldr	r4, [r5, #4]
 80033be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0ef      	beq.n	80033a6 <_fflush_r+0xa>
 80033c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80033c8:	07d0      	lsls	r0, r2, #31
 80033ca:	d404      	bmi.n	80033d6 <_fflush_r+0x3a>
 80033cc:	0599      	lsls	r1, r3, #22
 80033ce:	d402      	bmi.n	80033d6 <_fflush_r+0x3a>
 80033d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033d2:	f7ff faa7 	bl	8002924 <__retarget_lock_acquire_recursive>
 80033d6:	4628      	mov	r0, r5
 80033d8:	4621      	mov	r1, r4
 80033da:	f7ff ff5d 	bl	8003298 <__sflush_r>
 80033de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033e0:	4605      	mov	r5, r0
 80033e2:	07da      	lsls	r2, r3, #31
 80033e4:	d4e0      	bmi.n	80033a8 <_fflush_r+0xc>
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	059b      	lsls	r3, r3, #22
 80033ea:	d4dd      	bmi.n	80033a8 <_fflush_r+0xc>
 80033ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ee:	f7ff fa9a 	bl	8002926 <__retarget_lock_release_recursive>
 80033f2:	e7d9      	b.n	80033a8 <_fflush_r+0xc>
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <_fflush_r+0x70>)
 80033f6:	429c      	cmp	r4, r3
 80033f8:	d101      	bne.n	80033fe <_fflush_r+0x62>
 80033fa:	68ac      	ldr	r4, [r5, #8]
 80033fc:	e7df      	b.n	80033be <_fflush_r+0x22>
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <_fflush_r+0x74>)
 8003400:	429c      	cmp	r4, r3
 8003402:	bf08      	it	eq
 8003404:	68ec      	ldreq	r4, [r5, #12]
 8003406:	e7da      	b.n	80033be <_fflush_r+0x22>
 8003408:	080036c8 	.word	0x080036c8
 800340c:	080036e8 	.word	0x080036e8
 8003410:	080036a8 	.word	0x080036a8

08003414 <_lseek_r>:
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	4608      	mov	r0, r1
 800341a:	4611      	mov	r1, r2
 800341c:	2200      	movs	r2, #0
 800341e:	4d05      	ldr	r5, [pc, #20]	; (8003434 <_lseek_r+0x20>)
 8003420:	602a      	str	r2, [r5, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f7fd f9dc 	bl	80007e0 <_lseek>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d102      	bne.n	8003432 <_lseek_r+0x1e>
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	b103      	cbz	r3, 8003432 <_lseek_r+0x1e>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	bd38      	pop	{r3, r4, r5, pc}
 8003434:	20000118 	.word	0x20000118

08003438 <__swhatbuf_r>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	460e      	mov	r6, r1
 800343c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003440:	4614      	mov	r4, r2
 8003442:	2900      	cmp	r1, #0
 8003444:	461d      	mov	r5, r3
 8003446:	b096      	sub	sp, #88	; 0x58
 8003448:	da08      	bge.n	800345c <__swhatbuf_r+0x24>
 800344a:	2200      	movs	r2, #0
 800344c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003450:	602a      	str	r2, [r5, #0]
 8003452:	061a      	lsls	r2, r3, #24
 8003454:	d410      	bmi.n	8003478 <__swhatbuf_r+0x40>
 8003456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345a:	e00e      	b.n	800347a <__swhatbuf_r+0x42>
 800345c:	466a      	mov	r2, sp
 800345e:	f000 f8c5 	bl	80035ec <_fstat_r>
 8003462:	2800      	cmp	r0, #0
 8003464:	dbf1      	blt.n	800344a <__swhatbuf_r+0x12>
 8003466:	9a01      	ldr	r2, [sp, #4]
 8003468:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800346c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003470:	425a      	negs	r2, r3
 8003472:	415a      	adcs	r2, r3
 8003474:	602a      	str	r2, [r5, #0]
 8003476:	e7ee      	b.n	8003456 <__swhatbuf_r+0x1e>
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	2000      	movs	r0, #0
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	b016      	add	sp, #88	; 0x58
 8003480:	bd70      	pop	{r4, r5, r6, pc}
	...

08003484 <__smakebuf_r>:
 8003484:	898b      	ldrh	r3, [r1, #12]
 8003486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003488:	079d      	lsls	r5, r3, #30
 800348a:	4606      	mov	r6, r0
 800348c:	460c      	mov	r4, r1
 800348e:	d507      	bpl.n	80034a0 <__smakebuf_r+0x1c>
 8003490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	6123      	str	r3, [r4, #16]
 8003498:	2301      	movs	r3, #1
 800349a:	6163      	str	r3, [r4, #20]
 800349c:	b002      	add	sp, #8
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	466a      	mov	r2, sp
 80034a2:	ab01      	add	r3, sp, #4
 80034a4:	f7ff ffc8 	bl	8003438 <__swhatbuf_r>
 80034a8:	9900      	ldr	r1, [sp, #0]
 80034aa:	4605      	mov	r5, r0
 80034ac:	4630      	mov	r0, r6
 80034ae:	f7ff fa5b 	bl	8002968 <_malloc_r>
 80034b2:	b948      	cbnz	r0, 80034c8 <__smakebuf_r+0x44>
 80034b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b8:	059a      	lsls	r2, r3, #22
 80034ba:	d4ef      	bmi.n	800349c <__smakebuf_r+0x18>
 80034bc:	f023 0303 	bic.w	r3, r3, #3
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	81a3      	strh	r3, [r4, #12]
 80034c6:	e7e3      	b.n	8003490 <__smakebuf_r+0xc>
 80034c8:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <__smakebuf_r+0x7c>)
 80034ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	6020      	str	r0, [r4, #0]
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	81a3      	strh	r3, [r4, #12]
 80034d6:	9b00      	ldr	r3, [sp, #0]
 80034d8:	6120      	str	r0, [r4, #16]
 80034da:	6163      	str	r3, [r4, #20]
 80034dc:	9b01      	ldr	r3, [sp, #4]
 80034de:	b15b      	cbz	r3, 80034f8 <__smakebuf_r+0x74>
 80034e0:	4630      	mov	r0, r6
 80034e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e6:	f000 f893 	bl	8003610 <_isatty_r>
 80034ea:	b128      	cbz	r0, 80034f8 <__smakebuf_r+0x74>
 80034ec:	89a3      	ldrh	r3, [r4, #12]
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	81a3      	strh	r3, [r4, #12]
 80034f8:	89a0      	ldrh	r0, [r4, #12]
 80034fa:	4305      	orrs	r5, r0
 80034fc:	81a5      	strh	r5, [r4, #12]
 80034fe:	e7cd      	b.n	800349c <__smakebuf_r+0x18>
 8003500:	08002781 	.word	0x08002781

08003504 <memchr>:
 8003504:	4603      	mov	r3, r0
 8003506:	b510      	push	{r4, lr}
 8003508:	b2c9      	uxtb	r1, r1
 800350a:	4402      	add	r2, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	d101      	bne.n	8003516 <memchr+0x12>
 8003512:	2000      	movs	r0, #0
 8003514:	e003      	b.n	800351e <memchr+0x1a>
 8003516:	7804      	ldrb	r4, [r0, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	428c      	cmp	r4, r1
 800351c:	d1f6      	bne.n	800350c <memchr+0x8>
 800351e:	bd10      	pop	{r4, pc}

08003520 <__malloc_lock>:
 8003520:	4801      	ldr	r0, [pc, #4]	; (8003528 <__malloc_lock+0x8>)
 8003522:	f7ff b9ff 	b.w	8002924 <__retarget_lock_acquire_recursive>
 8003526:	bf00      	nop
 8003528:	2000010c 	.word	0x2000010c

0800352c <__malloc_unlock>:
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <__malloc_unlock+0x8>)
 800352e:	f7ff b9fa 	b.w	8002926 <__retarget_lock_release_recursive>
 8003532:	bf00      	nop
 8003534:	2000010c 	.word	0x2000010c

08003538 <_free_r>:
 8003538:	b538      	push	{r3, r4, r5, lr}
 800353a:	4605      	mov	r5, r0
 800353c:	2900      	cmp	r1, #0
 800353e:	d040      	beq.n	80035c2 <_free_r+0x8a>
 8003540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003544:	1f0c      	subs	r4, r1, #4
 8003546:	2b00      	cmp	r3, #0
 8003548:	bfb8      	it	lt
 800354a:	18e4      	addlt	r4, r4, r3
 800354c:	f7ff ffe8 	bl	8003520 <__malloc_lock>
 8003550:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <_free_r+0x8c>)
 8003552:	6813      	ldr	r3, [r2, #0]
 8003554:	b933      	cbnz	r3, 8003564 <_free_r+0x2c>
 8003556:	6063      	str	r3, [r4, #4]
 8003558:	6014      	str	r4, [r2, #0]
 800355a:	4628      	mov	r0, r5
 800355c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003560:	f7ff bfe4 	b.w	800352c <__malloc_unlock>
 8003564:	42a3      	cmp	r3, r4
 8003566:	d908      	bls.n	800357a <_free_r+0x42>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	1821      	adds	r1, r4, r0
 800356c:	428b      	cmp	r3, r1
 800356e:	bf01      	itttt	eq
 8003570:	6819      	ldreq	r1, [r3, #0]
 8003572:	685b      	ldreq	r3, [r3, #4]
 8003574:	1809      	addeq	r1, r1, r0
 8003576:	6021      	streq	r1, [r4, #0]
 8003578:	e7ed      	b.n	8003556 <_free_r+0x1e>
 800357a:	461a      	mov	r2, r3
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	b10b      	cbz	r3, 8003584 <_free_r+0x4c>
 8003580:	42a3      	cmp	r3, r4
 8003582:	d9fa      	bls.n	800357a <_free_r+0x42>
 8003584:	6811      	ldr	r1, [r2, #0]
 8003586:	1850      	adds	r0, r2, r1
 8003588:	42a0      	cmp	r0, r4
 800358a:	d10b      	bne.n	80035a4 <_free_r+0x6c>
 800358c:	6820      	ldr	r0, [r4, #0]
 800358e:	4401      	add	r1, r0
 8003590:	1850      	adds	r0, r2, r1
 8003592:	4283      	cmp	r3, r0
 8003594:	6011      	str	r1, [r2, #0]
 8003596:	d1e0      	bne.n	800355a <_free_r+0x22>
 8003598:	6818      	ldr	r0, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	4401      	add	r1, r0
 800359e:	6011      	str	r1, [r2, #0]
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	e7da      	b.n	800355a <_free_r+0x22>
 80035a4:	d902      	bls.n	80035ac <_free_r+0x74>
 80035a6:	230c      	movs	r3, #12
 80035a8:	602b      	str	r3, [r5, #0]
 80035aa:	e7d6      	b.n	800355a <_free_r+0x22>
 80035ac:	6820      	ldr	r0, [r4, #0]
 80035ae:	1821      	adds	r1, r4, r0
 80035b0:	428b      	cmp	r3, r1
 80035b2:	bf01      	itttt	eq
 80035b4:	6819      	ldreq	r1, [r3, #0]
 80035b6:	685b      	ldreq	r3, [r3, #4]
 80035b8:	1809      	addeq	r1, r1, r0
 80035ba:	6021      	streq	r1, [r4, #0]
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	6054      	str	r4, [r2, #4]
 80035c0:	e7cb      	b.n	800355a <_free_r+0x22>
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	20000110 	.word	0x20000110

080035c8 <_read_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	2200      	movs	r2, #0
 80035d2:	4d05      	ldr	r5, [pc, #20]	; (80035e8 <_read_r+0x20>)
 80035d4:	602a      	str	r2, [r5, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7fd f8a5 	bl	8000726 <_read>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d102      	bne.n	80035e6 <_read_r+0x1e>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <_read_r+0x1e>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	20000118 	.word	0x20000118

080035ec <_fstat_r>:
 80035ec:	b538      	push	{r3, r4, r5, lr}
 80035ee:	2300      	movs	r3, #0
 80035f0:	4d06      	ldr	r5, [pc, #24]	; (800360c <_fstat_r+0x20>)
 80035f2:	4604      	mov	r4, r0
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	f7fd f8d8 	bl	80007ae <_fstat>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d102      	bne.n	8003608 <_fstat_r+0x1c>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	b103      	cbz	r3, 8003608 <_fstat_r+0x1c>
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	bf00      	nop
 800360c:	20000118 	.word	0x20000118

08003610 <_isatty_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	2300      	movs	r3, #0
 8003614:	4d05      	ldr	r5, [pc, #20]	; (800362c <_isatty_r+0x1c>)
 8003616:	4604      	mov	r4, r0
 8003618:	4608      	mov	r0, r1
 800361a:	602b      	str	r3, [r5, #0]
 800361c:	f7fd f8d6 	bl	80007cc <_isatty>
 8003620:	1c43      	adds	r3, r0, #1
 8003622:	d102      	bne.n	800362a <_isatty_r+0x1a>
 8003624:	682b      	ldr	r3, [r5, #0]
 8003626:	b103      	cbz	r3, 800362a <_isatty_r+0x1a>
 8003628:	6023      	str	r3, [r4, #0]
 800362a:	bd38      	pop	{r3, r4, r5, pc}
 800362c:	20000118 	.word	0x20000118

08003630 <_init>:
 8003630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003632:	bf00      	nop
 8003634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003636:	bc08      	pop	{r3}
 8003638:	469e      	mov	lr, r3
 800363a:	4770      	bx	lr

0800363c <_fini>:
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	bf00      	nop
 8003640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003642:	bc08      	pop	{r3}
 8003644:	469e      	mov	lr, r3
 8003646:	4770      	bx	lr
