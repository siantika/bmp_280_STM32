
bmp_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003150  08003150  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003150  08003150  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003150  08003150  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003154  08003154  00013154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080031c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080031c8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006701  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013dc  00000000  00000000  0002679a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00027b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  000282d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bf  00000000  00000000  00028998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fa1  00000000  00000000  00040157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000838c5  00000000  00000000  000490f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc9bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002500  00000000  00000000  000cca10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003074 	.word	0x08003074

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003074 	.word	0x08003074

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 faa6 	bl	80006a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f8b0 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f918 	bl	800038c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f8e8 	bl	8000330 <MX_I2C1_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  TrimRead();
 8000160:	f000 f806 	bl	8000170 <TrimRead>
	  HAL_Delay(500);
 8000164:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000168:	f000 fafc 	bl	8000764 <HAL_Delay>
	  TrimRead();
 800016c:	e7f8      	b.n	8000160 <main+0x14>
	...

08000170 <TrimRead>:



// USER functions
void TrimRead()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08c      	sub	sp, #48	; 0x30
 8000174:	af04      	add	r7, sp, #16
	uint8_t trimdata[25];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000176:	f04f 33ff 	mov.w	r3, #4294967295
 800017a:	9302      	str	r3, [sp, #8]
 800017c:	2319      	movs	r3, #25
 800017e:	9301      	str	r3, [sp, #4]
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	2301      	movs	r3, #1
 8000186:	2288      	movs	r2, #136	; 0x88
 8000188:	21ec      	movs	r1, #236	; 0xec
 800018a:	483d      	ldr	r0, [pc, #244]	; (8000280 <TrimRead+0x110>)
 800018c:	f000 feba 	bl	8000f04 <HAL_I2C_Mem_Read>


	// Arrange the data as per the datasheet (page no. 21)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8000190:	797b      	ldrb	r3, [r7, #5]
 8000192:	021b      	lsls	r3, r3, #8
 8000194:	b21a      	sxth	r2, r3
 8000196:	793b      	ldrb	r3, [r7, #4]
 8000198:	b21b      	sxth	r3, r3
 800019a:	4313      	orrs	r3, r2
 800019c:	b21b      	sxth	r3, r3
 800019e:	b29a      	uxth	r2, r3
 80001a0:	4b38      	ldr	r3, [pc, #224]	; (8000284 <TrimRead+0x114>)
 80001a2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80001a4:	79fb      	ldrb	r3, [r7, #7]
 80001a6:	021b      	lsls	r3, r3, #8
 80001a8:	b21a      	sxth	r2, r3
 80001aa:	79bb      	ldrb	r3, [r7, #6]
 80001ac:	b21b      	sxth	r3, r3
 80001ae:	4313      	orrs	r3, r2
 80001b0:	b21a      	sxth	r2, r3
 80001b2:	4b35      	ldr	r3, [pc, #212]	; (8000288 <TrimRead+0x118>)
 80001b4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80001b6:	7a7b      	ldrb	r3, [r7, #9]
 80001b8:	021b      	lsls	r3, r3, #8
 80001ba:	b21a      	sxth	r2, r3
 80001bc:	7a3b      	ldrb	r3, [r7, #8]
 80001be:	b21b      	sxth	r3, r3
 80001c0:	4313      	orrs	r3, r2
 80001c2:	b21a      	sxth	r2, r3
 80001c4:	4b31      	ldr	r3, [pc, #196]	; (800028c <TrimRead+0x11c>)
 80001c6:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80001c8:	7afb      	ldrb	r3, [r7, #11]
 80001ca:	021b      	lsls	r3, r3, #8
 80001cc:	b21a      	sxth	r2, r3
 80001ce:	7a7b      	ldrb	r3, [r7, #9]
 80001d0:	b21b      	sxth	r3, r3
 80001d2:	4313      	orrs	r3, r2
 80001d4:	b21b      	sxth	r3, r3
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	4b2d      	ldr	r3, [pc, #180]	; (8000290 <TrimRead+0x120>)
 80001da:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80001dc:	7b7b      	ldrb	r3, [r7, #13]
 80001de:	021b      	lsls	r3, r3, #8
 80001e0:	b21a      	sxth	r2, r3
 80001e2:	7abb      	ldrb	r3, [r7, #10]
 80001e4:	b21b      	sxth	r3, r3
 80001e6:	4313      	orrs	r3, r2
 80001e8:	b21a      	sxth	r2, r3
 80001ea:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <TrimRead+0x124>)
 80001ec:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80001ee:	7bfb      	ldrb	r3, [r7, #15]
 80001f0:	021b      	lsls	r3, r3, #8
 80001f2:	b21a      	sxth	r2, r3
 80001f4:	7bbb      	ldrb	r3, [r7, #14]
 80001f6:	b21b      	sxth	r3, r3
 80001f8:	4313      	orrs	r3, r2
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	4b26      	ldr	r3, [pc, #152]	; (8000298 <TrimRead+0x128>)
 80001fe:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8000200:	7c7b      	ldrb	r3, [r7, #17]
 8000202:	021b      	lsls	r3, r3, #8
 8000204:	b21a      	sxth	r2, r3
 8000206:	7c3b      	ldrb	r3, [r7, #16]
 8000208:	b21b      	sxth	r3, r3
 800020a:	4313      	orrs	r3, r2
 800020c:	b21a      	sxth	r2, r3
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <TrimRead+0x12c>)
 8000210:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8000212:	7cfb      	ldrb	r3, [r7, #19]
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	b21a      	sxth	r2, r3
 8000218:	7cbb      	ldrb	r3, [r7, #18]
 800021a:	b21b      	sxth	r3, r3
 800021c:	4313      	orrs	r3, r2
 800021e:	b21a      	sxth	r2, r3
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <TrimRead+0x130>)
 8000222:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000224:	7d7b      	ldrb	r3, [r7, #21]
 8000226:	021b      	lsls	r3, r3, #8
 8000228:	b21a      	sxth	r2, r3
 800022a:	7d3b      	ldrb	r3, [r7, #20]
 800022c:	b21b      	sxth	r3, r3
 800022e:	4313      	orrs	r3, r2
 8000230:	b21a      	sxth	r2, r3
 8000232:	4b1c      	ldr	r3, [pc, #112]	; (80002a4 <TrimRead+0x134>)
 8000234:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000236:	7dfb      	ldrb	r3, [r7, #23]
 8000238:	021b      	lsls	r3, r3, #8
 800023a:	b21a      	sxth	r2, r3
 800023c:	7dbb      	ldrb	r3, [r7, #22]
 800023e:	b21b      	sxth	r3, r3
 8000240:	4313      	orrs	r3, r2
 8000242:	b21a      	sxth	r2, r3
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <TrimRead+0x138>)
 8000246:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000248:	7e7b      	ldrb	r3, [r7, #25]
 800024a:	021b      	lsls	r3, r3, #8
 800024c:	b21a      	sxth	r2, r3
 800024e:	7e3b      	ldrb	r3, [r7, #24]
 8000250:	b21b      	sxth	r3, r3
 8000252:	4313      	orrs	r3, r2
 8000254:	b21a      	sxth	r2, r3
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <TrimRead+0x13c>)
 8000258:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800025a:	7efb      	ldrb	r3, [r7, #27]
 800025c:	021b      	lsls	r3, r3, #8
 800025e:	b21a      	sxth	r2, r3
 8000260:	7ebb      	ldrb	r3, [r7, #26]
 8000262:	b21b      	sxth	r3, r3
 8000264:	4313      	orrs	r3, r2
 8000266:	b21a      	sxth	r2, r3
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <TrimRead+0x140>)
 800026a:	801a      	strh	r2, [r3, #0]

	printf("%s ",trimdata);
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4619      	mov	r1, r3
 8000270:	4810      	ldr	r0, [pc, #64]	; (80002b4 <TrimRead+0x144>)
 8000272:	f001 ff6b 	bl	800214c <iprintf>

}
 8000276:	bf00      	nop
 8000278:	3720      	adds	r7, #32
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	2000008c 	.word	0x2000008c
 8000284:	200000e0 	.word	0x200000e0
 8000288:	200000e4 	.word	0x200000e4
 800028c:	200000e6 	.word	0x200000e6
 8000290:	200000e2 	.word	0x200000e2
 8000294:	200000e8 	.word	0x200000e8
 8000298:	200000ea 	.word	0x200000ea
 800029c:	200000ec 	.word	0x200000ec
 80002a0:	200000ee 	.word	0x200000ee
 80002a4:	200000f0 	.word	0x200000f0
 80002a8:	200000f2 	.word	0x200000f2
 80002ac:	200000f4 	.word	0x200000f4
 80002b0:	200000f6 	.word	0x200000f6
 80002b4:	0800308c 	.word	0x0800308c

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	; 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	; 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 ff38 	bl	800213c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 faf4 	bl	80018dc <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002fa:	f000 f869 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fd62 	bl	8001de0 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000322:	f000 f855 	bl	80003d0 <Error_Handler>
  }
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	; 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <MX_I2C1_Init+0x50>)
 8000336:	4a13      	ldr	r2, [pc, #76]	; (8000384 <MX_I2C1_Init+0x54>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800033a:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_I2C1_Init+0x50>)
 800033c:	4a12      	ldr	r2, [pc, #72]	; (8000388 <MX_I2C1_Init+0x58>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <MX_I2C1_Init+0x50>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000346:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_I2C1_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <MX_I2C1_Init+0x50>)
 800034e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_I2C1_Init+0x50>)
 800036e:	f000 fc85 	bl	8000c7c <HAL_I2C_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f82a 	bl	80003d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000008c 	.word	0x2000008c
 8000384:	40005400 	.word	0x40005400
 8000388:	000186a0 	.word	0x000186a0

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <MX_GPIO_Init+0x40>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <MX_GPIO_Init+0x40>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <MX_GPIO_Init+0x40>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <MX_GPIO_Init+0x40>)
 80003b0:	f043 0308 	orr.w	r3, r3, #8
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <MX_GPIO_Init+0x40>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <Error_Handler+0x8>
	...

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a14      	ldr	r2, [pc, #80]	; (8000438 <HAL_MspInit+0x5c>)
 80003e8:	f043 0301 	orr.w	r3, r3, #1
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0301 	and.w	r3, r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <HAL_MspInit+0x5c>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000404:	61d3      	str	r3, [r2, #28]
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000412:	4b0a      	ldr	r3, [pc, #40]	; (800043c <HAL_MspInit+0x60>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <HAL_MspInit+0x60>)
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	40021000 	.word	0x40021000
 800043c:	40010000 	.word	0x40010000

08000440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
 8000450:	605a      	str	r2, [r3, #4]
 8000452:	609a      	str	r2, [r3, #8]
 8000454:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a15      	ldr	r2, [pc, #84]	; (80004b0 <HAL_I2C_MspInit+0x70>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d123      	bne.n	80004a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0308 	and.w	r3, r3, #8
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000478:	23c0      	movs	r3, #192	; 0xc0
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800047c:	2312      	movs	r3, #18
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480b      	ldr	r0, [pc, #44]	; (80004b8 <HAL_I2C_MspInit+0x78>)
 800048c:	f000 fa72 	bl	8000974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 8000496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800049a:	61d3      	str	r3, [r2, #28]
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <HAL_I2C_MspInit+0x74>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80004a8:	bf00      	nop
 80004aa:	3720      	adds	r7, #32
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40005400 	.word	0x40005400
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010c00 	.word	0x40010c00

080004bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <NMI_Handler+0x4>

080004c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <HardFault_Handler+0x4>

080004c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004cc:	e7fe      	b.n	80004cc <MemManage_Handler+0x4>

080004ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <BusFault_Handler+0x4>

080004d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <UsageFault_Handler+0x4>

080004da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr

080004f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000502:	f000 f913 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}

0800050a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b086      	sub	sp, #24
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000516:	2300      	movs	r3, #0
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	e00a      	b.n	8000532 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800051c:	f3af 8000 	nop.w
 8000520:	4601      	mov	r1, r0
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	b2ca      	uxtb	r2, r1
 800052a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	429a      	cmp	r2, r3
 8000538:	dbf0      	blt.n	800051c <_read+0x12>
	}

return len;
 800053a:	687b      	ldr	r3, [r7, #4]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000550:	2300      	movs	r3, #0
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	e009      	b.n	800056a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	60ba      	str	r2, [r7, #8]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	4618      	mov	r0, r3
 8000560:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	3301      	adds	r3, #1
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	429a      	cmp	r2, r3
 8000570:	dbf1      	blt.n	8000556 <_write+0x12>
	}
	return len;
 8000572:	687b      	ldr	r3, [r7, #4]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <_close>:

int _close(int file)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	return -1;
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005a2:	605a      	str	r2, [r3, #4]
	return 0;
 80005a4:	2300      	movs	r3, #0
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <_isatty>:

int _isatty(int file)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	return 1;
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
	return 0;
 80005d0:	2300      	movs	r3, #0
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	; (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f001 fd6c 	bl	80020e8 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	; (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20005000 	.word	0x20005000
 800063c:	00000400 	.word	0x00000400
 8000640:	200000f8 	.word	0x200000f8
 8000644:	20000110 	.word	0x20000110

08000648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000656:	490d      	ldr	r1, [pc, #52]	; (800068c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000658:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800066c:	4c0a      	ldr	r4, [pc, #40]	; (8000698 <LoopFillZerobss+0x22>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800067a:	f7ff ffe5 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800067e:	f001 fd39 	bl	80020f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff fd63 	bl	800014c <main>
  bx lr
 8000686:	4770      	bx	lr
  ldr r0, =_sdata
 8000688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800068c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000690:	08003158 	.word	0x08003158
  ldr r2, =_sbss
 8000694:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000698:	20000110 	.word	0x20000110

0800069c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800069c:	e7fe      	b.n	800069c <ADC1_2_IRQHandler>
	...

080006a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_Init+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <HAL_Init+0x28>)
 80006aa:	f043 0310 	orr.w	r3, r3, #16
 80006ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b0:	2003      	movs	r0, #3
 80006b2:	f000 f92b 	bl	800090c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f808 	bl	80006cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006bc:	f7ff fe8e 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c0:	2300      	movs	r3, #0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40022000 	.word	0x40022000

080006cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x54>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x58>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 f935 	bl	800095a <HAL_SYSTICK_Config>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e00e      	b.n	8000718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b0f      	cmp	r3, #15
 80006fe:	d80a      	bhi.n	8000716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000700:	2200      	movs	r2, #0
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	f04f 30ff 	mov.w	r0, #4294967295
 8000708:	f000 f90b 	bl	8000922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4a06      	ldr	r2, [pc, #24]	; (8000728 <HAL_InitTick+0x5c>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4413      	add	r3, r2
 800073c:	4a03      	ldr	r2, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000008 	.word	0x20000008
 800074c:	200000fc 	.word	0x200000fc

08000750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	200000fc 	.word	0x200000fc

08000764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800076c:	f7ff fff0 	bl	8000750 <HAL_GetTick>
 8000770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077c:	d005      	beq.n	800078a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Delay+0x44>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	461a      	mov	r2, r3
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4413      	add	r3, r2
 8000788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078a:	bf00      	nop
 800078c:	f7ff ffe0 	bl	8000750 <HAL_GetTick>
 8000790:	4602      	mov	r2, r0
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	d8f7      	bhi.n	800078c <HAL_Delay+0x28>
  {
  }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000008 	.word	0x20000008

080007ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007c8:	4013      	ands	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <__NVIC_SetPriorityGrouping+0x44>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007f8:	4b04      	ldr	r3, [pc, #16]	; (800080c <__NVIC_GetPriorityGrouping+0x18>)
 80007fa:	68db      	ldr	r3, [r3, #12]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	f003 0307 	and.w	r3, r3, #7
}
 8000802:	4618      	mov	r0, r3
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	490c      	ldr	r1, [pc, #48]	; (800085c <__NVIC_SetPriority+0x4c>)
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	0112      	lsls	r2, r2, #4
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	440b      	add	r3, r1
 8000834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000838:	e00a      	b.n	8000850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4908      	ldr	r1, [pc, #32]	; (8000860 <__NVIC_SetPriority+0x50>)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f003 030f 	and.w	r3, r3, #15
 8000846:	3b04      	subs	r3, #4
 8000848:	0112      	lsls	r2, r2, #4
 800084a:	b2d2      	uxtb	r2, r2
 800084c:	440b      	add	r3, r1
 800084e:	761a      	strb	r2, [r3, #24]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000e100 	.word	0xe000e100
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000864:	b480      	push	{r7}
 8000866:	b089      	sub	sp, #36	; 0x24
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	f1c3 0307 	rsb	r3, r3, #7
 800087e:	2b04      	cmp	r3, #4
 8000880:	bf28      	it	cs
 8000882:	2304      	movcs	r3, #4
 8000884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3304      	adds	r3, #4
 800088a:	2b06      	cmp	r3, #6
 800088c:	d902      	bls.n	8000894 <NVIC_EncodePriority+0x30>
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3b03      	subs	r3, #3
 8000892:	e000      	b.n	8000896 <NVIC_EncodePriority+0x32>
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000898:	f04f 32ff 	mov.w	r2, #4294967295
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43da      	mvns	r2, r3
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	401a      	ands	r2, r3
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	43d9      	mvns	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	4313      	orrs	r3, r2
         );
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3724      	adds	r7, #36	; 0x24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008d8:	d301      	bcc.n	80008de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008da:	2301      	movs	r3, #1
 80008dc:	e00f      	b.n	80008fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <SysTick_Config+0x40>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e6:	210f      	movs	r1, #15
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f7ff ff90 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f0:	4b05      	ldr	r3, [pc, #20]	; (8000908 <SysTick_Config+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SysTick_Config+0x40>)
 80008f8:	2207      	movs	r2, #7
 80008fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	e000e010 	.word	0xe000e010

0800090c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff49 	bl	80007ac <__NVIC_SetPriorityGrouping>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
 800092e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000934:	f7ff ff5e 	bl	80007f4 <__NVIC_GetPriorityGrouping>
 8000938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68b9      	ldr	r1, [r7, #8]
 800093e:	6978      	ldr	r0, [r7, #20]
 8000940:	f7ff ff90 	bl	8000864 <NVIC_EncodePriority>
 8000944:	4602      	mov	r2, r0
 8000946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5f 	bl	8000810 <__NVIC_SetPriority>
}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f7ff ffb0 	bl	80008c8 <SysTick_Config>
 8000968:	4603      	mov	r3, r0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000974:	b480      	push	{r7}
 8000976:	b08b      	sub	sp, #44	; 0x2c
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e169      	b.n	8000c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000988:	2201      	movs	r2, #1
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	f040 8158 	bne.w	8000c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a9a      	ldr	r2, [pc, #616]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d05e      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009b0:	4a98      	ldr	r2, [pc, #608]	; (8000c14 <HAL_GPIO_Init+0x2a0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d875      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009b6:	4a98      	ldr	r2, [pc, #608]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d058      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009bc:	4a96      	ldr	r2, [pc, #600]	; (8000c18 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d86f      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009c2:	4a96      	ldr	r2, [pc, #600]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d052      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009c8:	4a94      	ldr	r2, [pc, #592]	; (8000c1c <HAL_GPIO_Init+0x2a8>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d869      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ce:	4a94      	ldr	r2, [pc, #592]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d04c      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009d4:	4a92      	ldr	r2, [pc, #584]	; (8000c20 <HAL_GPIO_Init+0x2ac>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d863      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009da:	4a92      	ldr	r2, [pc, #584]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d046      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
 80009e0:	4a90      	ldr	r2, [pc, #576]	; (8000c24 <HAL_GPIO_Init+0x2b0>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d85d      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009e6:	2b12      	cmp	r3, #18
 80009e8:	d82a      	bhi.n	8000a40 <HAL_GPIO_Init+0xcc>
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d859      	bhi.n	8000aa2 <HAL_GPIO_Init+0x12e>
 80009ee:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <HAL_GPIO_Init+0x80>)
 80009f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000a49 	.word	0x08000a49
 80009fc:	08000a5b 	.word	0x08000a5b
 8000a00:	08000a9d 	.word	0x08000a9d
 8000a04:	08000aa3 	.word	0x08000aa3
 8000a08:	08000aa3 	.word	0x08000aa3
 8000a0c:	08000aa3 	.word	0x08000aa3
 8000a10:	08000aa3 	.word	0x08000aa3
 8000a14:	08000aa3 	.word	0x08000aa3
 8000a18:	08000aa3 	.word	0x08000aa3
 8000a1c:	08000aa3 	.word	0x08000aa3
 8000a20:	08000aa3 	.word	0x08000aa3
 8000a24:	08000aa3 	.word	0x08000aa3
 8000a28:	08000aa3 	.word	0x08000aa3
 8000a2c:	08000aa3 	.word	0x08000aa3
 8000a30:	08000aa3 	.word	0x08000aa3
 8000a34:	08000aa3 	.word	0x08000aa3
 8000a38:	08000a51 	.word	0x08000a51
 8000a3c:	08000a65 	.word	0x08000a65
 8000a40:	4a79      	ldr	r2, [pc, #484]	; (8000c28 <HAL_GPIO_Init+0x2b4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d013      	beq.n	8000a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a46:	e02c      	b.n	8000aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e029      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	3304      	adds	r3, #4
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e024      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	3308      	adds	r3, #8
 8000a60:	623b      	str	r3, [r7, #32]
          break;
 8000a62:	e01f      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	330c      	adds	r3, #12
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e01a      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d102      	bne.n	8000a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a76:	2304      	movs	r3, #4
 8000a78:	623b      	str	r3, [r7, #32]
          break;
 8000a7a:	e013      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d105      	bne.n	8000a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a84:	2308      	movs	r3, #8
 8000a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	611a      	str	r2, [r3, #16]
          break;
 8000a8e:	e009      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a90:	2308      	movs	r3, #8
 8000a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	69fa      	ldr	r2, [r7, #28]
 8000a98:	615a      	str	r2, [r3, #20]
          break;
 8000a9a:	e003      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e000      	b.n	8000aa4 <HAL_GPIO_Init+0x130>
          break;
 8000aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d801      	bhi.n	8000aae <HAL_GPIO_Init+0x13a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	e001      	b.n	8000ab2 <HAL_GPIO_Init+0x13e>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	2bff      	cmp	r3, #255	; 0xff
 8000ab8:	d802      	bhi.n	8000ac0 <HAL_GPIO_Init+0x14c>
 8000aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	e002      	b.n	8000ac6 <HAL_GPIO_Init+0x152>
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac2:	3b08      	subs	r3, #8
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	210f      	movs	r1, #15
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	6a39      	ldr	r1, [r7, #32]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_GPIO_Init+0x2b8>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b0c:	4a48      	ldr	r2, [pc, #288]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	089b      	lsrs	r3, r3, #2
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1c:	f003 0303 	and.w	r3, r3, #3
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	220f      	movs	r2, #15
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <HAL_GPIO_Init+0x2c0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d013      	beq.n	8000b60 <HAL_GPIO_Init+0x1ec>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a3f      	ldr	r2, [pc, #252]	; (8000c38 <HAL_GPIO_Init+0x2c4>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d00d      	beq.n	8000b5c <HAL_GPIO_Init+0x1e8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a3e      	ldr	r2, [pc, #248]	; (8000c3c <HAL_GPIO_Init+0x2c8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d007      	beq.n	8000b58 <HAL_GPIO_Init+0x1e4>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a3d      	ldr	r2, [pc, #244]	; (8000c40 <HAL_GPIO_Init+0x2cc>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d101      	bne.n	8000b54 <HAL_GPIO_Init+0x1e0>
 8000b50:	2303      	movs	r3, #3
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b54:	2304      	movs	r3, #4
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x1ee>
 8000b60:	2300      	movs	r3, #0
 8000b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b72:	492f      	ldr	r1, [pc, #188]	; (8000c30 <HAL_GPIO_Init+0x2bc>)
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b8c:	4b2d      	ldr	r3, [pc, #180]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	492c      	ldr	r1, [pc, #176]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b9a:	4b2a      	ldr	r3, [pc, #168]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4928      	ldr	r1, [pc, #160]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	4922      	ldr	r1, [pc, #136]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
 8000bc0:	e006      	b.n	8000bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	491e      	ldr	r1, [pc, #120]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d006      	beq.n	8000bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	4918      	ldr	r1, [pc, #96]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
 8000be8:	e006      	b.n	8000bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	4914      	ldr	r1, [pc, #80]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d021      	beq.n	8000c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c06:	68da      	ldr	r2, [r3, #12]
 8000c08:	490e      	ldr	r1, [pc, #56]	; (8000c44 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60cb      	str	r3, [r1, #12]
 8000c10:	e021      	b.n	8000c56 <HAL_GPIO_Init+0x2e2>
 8000c12:	bf00      	nop
 8000c14:	10320000 	.word	0x10320000
 8000c18:	10310000 	.word	0x10310000
 8000c1c:	10220000 	.word	0x10220000
 8000c20:	10210000 	.word	0x10210000
 8000c24:	10120000 	.word	0x10120000
 8000c28:	10110000 	.word	0x10110000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40011400 	.word	0x40011400
 8000c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c4a:	68da      	ldr	r2, [r3, #12]
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4909      	ldr	r1, [pc, #36]	; (8000c78 <HAL_GPIO_Init+0x304>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	3301      	adds	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	fa22 f303 	lsr.w	r3, r2, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f47f ae8e 	bne.w	8000988 <HAL_GPIO_Init+0x14>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	372c      	adds	r7, #44	; 0x2c
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40010400 	.word	0x40010400

08000c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e12b      	b.n	8000ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d106      	bne.n	8000ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fbcc 	bl	8000440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2224      	movs	r2, #36	; 0x24
 8000cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f022 0201 	bic.w	r2, r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ce0:	f001 f9d0 	bl	8002084 <HAL_RCC_GetPCLK1Freq>
 8000ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	4a81      	ldr	r2, [pc, #516]	; (8000ef0 <HAL_I2C_Init+0x274>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d807      	bhi.n	8000d00 <HAL_I2C_Init+0x84>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <HAL_I2C_Init+0x278>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	bf94      	ite	ls
 8000cf8:	2301      	movls	r3, #1
 8000cfa:	2300      	movhi	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	e006      	b.n	8000d0e <HAL_I2C_Init+0x92>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a7d      	ldr	r2, [pc, #500]	; (8000ef8 <HAL_I2C_Init+0x27c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf94      	ite	ls
 8000d08:	2301      	movls	r3, #1
 8000d0a:	2300      	movhi	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0e7      	b.n	8000ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	4a78      	ldr	r2, [pc, #480]	; (8000efc <HAL_I2C_Init+0x280>)
 8000d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1e:	0c9b      	lsrs	r3, r3, #18
 8000d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68ba      	ldr	r2, [r7, #8]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a6a      	ldr	r2, [pc, #424]	; (8000ef0 <HAL_I2C_Init+0x274>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d802      	bhi.n	8000d50 <HAL_I2C_Init+0xd4>
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	e009      	b.n	8000d64 <HAL_I2C_Init+0xe8>
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d56:	fb02 f303 	mul.w	r3, r2, r3
 8000d5a:	4a69      	ldr	r2, [pc, #420]	; (8000f00 <HAL_I2C_Init+0x284>)
 8000d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d60:	099b      	lsrs	r3, r3, #6
 8000d62:	3301      	adds	r3, #1
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	495c      	ldr	r1, [pc, #368]	; (8000ef0 <HAL_I2C_Init+0x274>)
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d819      	bhi.n	8000db8 <HAL_I2C_Init+0x13c>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	1e59      	subs	r1, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d92:	1c59      	adds	r1, r3, #1
 8000d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000d98:	400b      	ands	r3, r1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00a      	beq.n	8000db4 <HAL_I2C_Init+0x138>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	1e59      	subs	r1, r3, #1
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db2:	e051      	b.n	8000e58 <HAL_I2C_Init+0x1dc>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e04f      	b.n	8000e58 <HAL_I2C_Init+0x1dc>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_I2C_Init+0x168>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1e58      	subs	r0, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	440b      	add	r3, r1
 8000dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	bf0c      	ite	eq
 8000ddc:	2301      	moveq	r3, #1
 8000dde:	2300      	movne	r3, #0
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	e012      	b.n	8000e0a <HAL_I2C_Init+0x18e>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	1e58      	subs	r0, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6859      	ldr	r1, [r3, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	440b      	add	r3, r1
 8000df2:	0099      	lsls	r1, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf0c      	ite	eq
 8000e04:	2301      	moveq	r3, #1
 8000e06:	2300      	movne	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_I2C_Init+0x196>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e022      	b.n	8000e58 <HAL_I2C_Init+0x1dc>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10e      	bne.n	8000e38 <HAL_I2C_Init+0x1bc>
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1e58      	subs	r0, r3, #1
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6859      	ldr	r1, [r3, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	440b      	add	r3, r1
 8000e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e36:	e00f      	b.n	8000e58 <HAL_I2C_Init+0x1dc>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	1e58      	subs	r0, r3, #1
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6859      	ldr	r1, [r3, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	0099      	lsls	r1, r3, #2
 8000e48:	440b      	add	r3, r1
 8000e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e58:	6879      	ldr	r1, [r7, #4]
 8000e5a:	6809      	ldr	r1, [r1, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	6911      	ldr	r1, [r2, #16]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	68d2      	ldr	r2, [r2, #12]
 8000e92:	4311      	orrs	r1, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	430b      	orrs	r3, r1
 8000e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	000186a0 	.word	0x000186a0
 8000ef4:	001e847f 	.word	0x001e847f
 8000ef8:	003d08ff 	.word	0x003d08ff
 8000efc:	431bde83 	.word	0x431bde83
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	; 0x30
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4603      	mov	r3, r0
 8000f14:	817b      	strh	r3, [r7, #10]
 8000f16:	460b      	mov	r3, r1
 8000f18:	813b      	strh	r3, [r7, #8]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f22:	f7ff fc15 	bl	8000750 <HAL_GetTick>
 8000f26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b20      	cmp	r3, #32
 8000f32:	f040 8244 	bne.w	80013be <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2319      	movs	r3, #25
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4982      	ldr	r1, [pc, #520]	; (8001148 <HAL_I2C_Mem_Read+0x244>)
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 fb2f 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	e237      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_I2C_Mem_Read+0x5a>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e230      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d007      	beq.n	8000f84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2222      	movs	r2, #34	; 0x22
 8000f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4a62      	ldr	r2, [pc, #392]	; (800114c <HAL_I2C_Mem_Read+0x248>)
 8000fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fc6:	88f8      	ldrh	r0, [r7, #6]
 8000fc8:	893a      	ldrh	r2, [r7, #8]
 8000fca:	8979      	ldrh	r1, [r7, #10]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f000 f9fc 	bl	80013d4 <I2C_RequestMemoryRead>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1ec      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d113      	bne.n	8001016 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	61fb      	str	r3, [r7, #28]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	e1c0      	b.n	8001398 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800101a:	2b01      	cmp	r3, #1
 800101c:	d11e      	bne.n	800105c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800102c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800102e:	b672      	cpsid	i
}
 8001030:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001056:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001058:	b662      	cpsie	i
}
 800105a:	e035      	b.n	80010c8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	2b02      	cmp	r3, #2
 8001062:	d11e      	bne.n	80010a2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
}
 8001076:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800109e:	b662      	cpsie	i
}
 80010a0:	e012      	b.n	80010c8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80010b0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80010c8:	e166      	b.n	8001398 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	f200 811f 	bhi.w	8001312 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d123      	bne.n	8001124 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 fb76 	bl	80017d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e167      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	691a      	ldr	r2, [r3, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	3b01      	subs	r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29b      	uxth	r3, r3
 800111a:	3b01      	subs	r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001122:	e139      	b.n	8001398 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001128:	2b02      	cmp	r3, #2
 800112a:	d152      	bne.n	80011d2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001132:	2200      	movs	r2, #0
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <HAL_I2C_Mem_Read+0x24c>)
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fa34 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d008      	beq.n	8001154 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e13c      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
 8001146:	bf00      	nop
 8001148:	00100002 	.word	0x00100002
 800114c:	ffff0000 	.word	0xffff0000
 8001150:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800119a:	b662      	cpsie	i
}
 800119c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ba:	3b01      	subs	r3, #1
 80011bc:	b29a      	uxth	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80011d0:	e0e2      	b.n	8001398 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d8:	2200      	movs	r2, #0
 80011da:	497b      	ldr	r1, [pc, #492]	; (80013c8 <HAL_I2C_Mem_Read+0x4c4>)
 80011dc:	68f8      	ldr	r0, [r7, #12]
 80011de:	f000 f9e1 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0e9      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001228:	b29b      	uxth	r3, r3
 800122a:	3b01      	subs	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001232:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_I2C_Mem_Read+0x4c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	08db      	lsrs	r3, r3, #3
 8001238:	4a65      	ldr	r2, [pc, #404]	; (80013d0 <HAL_I2C_Mem_Read+0x4cc>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0a1a      	lsrs	r2, r3, #8
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00da      	lsls	r2, r3, #3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	3b01      	subs	r3, #1
 8001250:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d118      	bne.n	800128a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	f043 0220 	orr.w	r2, r3, #32
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800127a:	b662      	cpsie	i
}
 800127c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e09a      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b04      	cmp	r3, #4
 8001296:	d1d9      	bne.n	800124c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	3b01      	subs	r3, #1
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	3b01      	subs	r3, #1
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80012da:	b662      	cpsie	i
}
 80012dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	691a      	ldr	r2, [r3, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001306:	b29b      	uxth	r3, r3
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001310:	e042      	b.n	8001398 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f000 fa5b 	bl	80017d2 <I2C_WaitOnRXNEFlagUntilTimeout>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e04c      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001342:	3b01      	subs	r3, #1
 8001344:	b29a      	uxth	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b01      	subs	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	2b04      	cmp	r3, #4
 8001364:	d118      	bne.n	8001398 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138e:	b29b      	uxth	r3, r3
 8001390:	3b01      	subs	r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	f47f ae94 	bne.w	80010ca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2220      	movs	r2, #32
 80013a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80013be:	2302      	movs	r3, #2
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3728      	adds	r7, #40	; 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	00010004 	.word	0x00010004
 80013cc:	20000000 	.word	0x20000000
 80013d0:	14f8b589 	.word	0x14f8b589

080013d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af02      	add	r7, sp, #8
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	4608      	mov	r0, r1
 80013de:	4611      	mov	r1, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	817b      	strh	r3, [r7, #10]
 80013e6:	460b      	mov	r3, r1
 80013e8:	813b      	strh	r3, [r7, #8]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800140c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	2200      	movs	r2, #0
 8001416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 f8c2 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00d      	beq.n	8001442 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001434:	d103      	bne.n	800143e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0aa      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001442:	897b      	ldrh	r3, [r7, #10]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	6a3a      	ldr	r2, [r7, #32]
 8001456:	4952      	ldr	r1, [pc, #328]	; (80015a0 <I2C_RequestMemoryRead+0x1cc>)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f8fa 	bl	8001652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e097      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001480:	6a39      	ldr	r1, [r7, #32]
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f964 	bl	8001750 <I2C_WaitOnTXEFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00d      	beq.n	80014aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b04      	cmp	r3, #4
 8001494:	d107      	bne.n	80014a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e076      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d105      	bne.n	80014bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014b0:	893b      	ldrh	r3, [r7, #8]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	e021      	b.n	8001500 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80014bc:	893b      	ldrh	r3, [r7, #8]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	6a39      	ldr	r1, [r7, #32]
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f000 f93e 	bl	8001750 <I2C_WaitOnTXEFlagUntilTimeout>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00d      	beq.n	80014f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d107      	bne.n	80014f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e050      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80014f6:	893b      	ldrh	r3, [r7, #8]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001502:	6a39      	ldr	r1, [r7, #32]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f923 	bl	8001750 <I2C_WaitOnTXEFlagUntilTimeout>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2b04      	cmp	r3, #4
 8001516:	d107      	bne.n	8001528 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e035      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800153a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2200      	movs	r2, #0
 8001544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f82b 	bl	80015a4 <I2C_WaitOnFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001562:	d103      	bne.n	800156c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e013      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	b2da      	uxtb	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <I2C_RequestMemoryRead+0x1cc>)
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f863 	bl	8001652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	00010002 	.word	0x00010002

080015a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015b4:	e025      	b.n	8001602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015bc:	d021      	beq.n	8001602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015be:	f7ff f8c7 	bl	8000750 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d302      	bcc.n	80015d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d116      	bne.n	8001602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e023      	b.n	800164a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d10d      	bne.n	8001628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4013      	ands	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	bf0c      	ite	eq
 800161e:	2301      	moveq	r3, #1
 8001620:	2300      	movne	r3, #0
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	e00c      	b.n	8001642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4013      	ands	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	bf0c      	ite	eq
 800163a:	2301      	moveq	r3, #1
 800163c:	2300      	movne	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461a      	mov	r2, r3
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	429a      	cmp	r2, r3
 8001646:	d0b6      	beq.n	80015b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001660:	e051      	b.n	8001706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001670:	d123      	bne.n	80016ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800168a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f043 0204 	orr.w	r2, r3, #4
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e046      	b.n	8001748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c0:	d021      	beq.n	8001706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016c2:	f7ff f845 	bl	8000750 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d302      	bcc.n	80016d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d116      	bne.n	8001706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f043 0220 	orr.w	r2, r3, #32
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e020      	b.n	8001748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d10c      	bne.n	800172a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4013      	ands	r3, r2
 800171c:	b29b      	uxth	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	bf14      	ite	ne
 8001722:	2301      	movne	r3, #1
 8001724:	2300      	moveq	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	e00b      	b.n	8001742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	43da      	mvns	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4013      	ands	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	bf14      	ite	ne
 800173c:	2301      	movne	r3, #1
 800173e:	2300      	moveq	r3, #0
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d18d      	bne.n	8001662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800175c:	e02d      	b.n	80017ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f88d 	bl	800187e <I2C_IsAcknowledgeFailed>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e02d      	b.n	80017ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d021      	beq.n	80017ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001776:	f7fe ffeb 	bl	8000750 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d302      	bcc.n	800178c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d116      	bne.n	80017ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2220      	movs	r2, #32
 8001796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f043 0220 	orr.w	r2, r3, #32
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e007      	b.n	80017ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c4:	2b80      	cmp	r3, #128	; 0x80
 80017c6:	d1ca      	bne.n	800175e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80017de:	e042      	b.n	8001866 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b10      	cmp	r3, #16
 80017ec:	d119      	bne.n	8001822 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f06f 0210 	mvn.w	r2, #16
 80017f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e029      	b.n	8001876 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001822:	f7fe ff95 	bl	8000750 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	429a      	cmp	r2, r3
 8001830:	d302      	bcc.n	8001838 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d116      	bne.n	8001866 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2200      	movs	r2, #0
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f043 0220 	orr.w	r2, r3, #32
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e007      	b.n	8001876 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001870:	2b40      	cmp	r3, #64	; 0x40
 8001872:	d1b5      	bne.n	80017e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001894:	d11b      	bne.n	80018ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800189e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f043 0204 	orr.w	r2, r3, #4
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e272      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8087 	beq.w	8001a0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d00c      	beq.n	8001922 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001908:	4b8f      	ldr	r3, [pc, #572]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d112      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
 8001914:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d10b      	bne.n	800193a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d06c      	beq.n	8001a08 <HAL_RCC_OscConfig+0x12c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d168      	bne.n	8001a08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e24c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x76>
 8001944:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800194a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02e      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x98>
 800195a:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0xbc>
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xd4>
 8001998:	4b6b      	ldr	r3, [pc, #428]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6a      	ldr	r2, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a67      	ldr	r2, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7fe feca 	bl	8000750 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7fe fec6 	bl	8000750 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	; 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e200      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xe4>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7fe feb6 	bl	8000750 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7fe feb2 	bl	8000750 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1ec      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b53      	ldr	r3, [pc, #332]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x10c>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a16:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
 8001a2e:	4b46      	ldr	r3, [pc, #280]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1c0      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4939      	ldr	r1, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fe6b 	bl	8000750 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7fe fe67 	bl	8000750 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1a1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4927      	ldr	r1, [pc, #156]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_RCC_OscConfig+0x270>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fe4a 	bl	8000750 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7fe fe46 	bl	8000750 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e180      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d03a      	beq.n	8001b60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d019      	beq.n	8001b26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7fe fe2a 	bl	8000750 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7fe fe26 	bl	8000750 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e160      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f000 fac4 	bl	80020ac <RCC_Delay>
 8001b24:	e01c      	b.n	8001b60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7fe fe10 	bl	8000750 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7fe fe0c 	bl	8000750 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d908      	bls.n	8001b54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e146      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	42420000 	.word	0x42420000
 8001b50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e9      	bne.n	8001b34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 80a6 	beq.w	8001cba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10d      	bne.n	8001b9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	61d3      	str	r3, [r2, #28]
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b96:	2301      	movs	r3, #1
 8001b98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b82      	ldr	r3, [pc, #520]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d118      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe fdcd 	bl	8000750 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bba:	f7fe fdc9 	bl	8000750 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b64      	cmp	r3, #100	; 0x64
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e103      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <HAL_RCC_OscConfig+0x4c8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d106      	bne.n	8001bee <HAL_RCC_OscConfig+0x312>
 8001be0:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e02d      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x334>
 8001bf6:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a69      	ldr	r2, [pc, #420]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b67      	ldr	r3, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
 8001c0e:	e01c      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d10c      	bne.n	8001c32 <HAL_RCC_OscConfig+0x356>
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4a60      	ldr	r2, [pc, #384]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	f043 0304 	orr.w	r3, r3, #4
 8001c22:	6213      	str	r3, [r2, #32]
 8001c24:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4a5d      	ldr	r2, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6213      	str	r3, [r2, #32]
 8001c30:	e00b      	b.n	8001c4a <HAL_RCC_OscConfig+0x36e>
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a5a      	ldr	r2, [pc, #360]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 0301 	bic.w	r3, r3, #1
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d015      	beq.n	8001c7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c52:	f7fe fd7d 	bl	8000750 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	e00a      	b.n	8001c70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fd79 	bl	8000750 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0b1      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	4b4b      	ldr	r3, [pc, #300]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ee      	beq.n	8001c5a <HAL_RCC_OscConfig+0x37e>
 8001c7c:	e014      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fd67 	bl	8000750 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	e00a      	b.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe fd63 	bl	8000750 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e09b      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1ee      	bne.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca8:	7dfb      	ldrb	r3, [r7, #23]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4b3c      	ldr	r3, [pc, #240]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8087 	beq.w	8001dd2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d061      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d146      	bne.n	8001d66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7fe fd37 	bl	8000750 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce6:	f7fe fd33 	bl	8000750 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e06d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1f0      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d0c:	d108      	bne.n	8001d20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4921      	ldr	r1, [pc, #132]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a19      	ldr	r1, [r3, #32]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	430b      	orrs	r3, r1
 8001d32:	491b      	ldr	r1, [pc, #108]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3e:	f7fe fd07 	bl	8000750 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7fe fd03 	bl	8000750 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e03d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x46a>
 8001d64:	e035      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fcf0 	bl	8000750 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe fcec 	bl	8000750 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e026      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x498>
 8001d92:	e01e      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e019      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40007000 	.word	0x40007000
 8001da8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_RCC_OscConfig+0x500>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d001      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40021000 	.word	0x40021000

08001de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0d0      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d910      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 0207 	bic.w	r2, r3, #7
 8001e0a:	4965      	ldr	r1, [pc, #404]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a58      	ldr	r2, [pc, #352]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d040      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d115      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e073      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06b      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4936      	ldr	r1, [pc, #216]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fc3e 	bl	8000750 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7fe fc3a 	bl	8000750 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e053      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d210      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <HAL_RCC_ClockConfig+0x1cc>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fb9c 	bl	80006cc <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	080030a0 	.word	0x080030a0
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b490      	push	{r4, r7}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_GetSysClockFreq+0xac>)
 8001fbc:	1d3c      	adds	r4, r7, #4
 8001fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc4:	f240 2301 	movw	r3, #513	; 0x201
 8001fc8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 030c 	and.w	r3, r3, #12
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0x46>
 8001ff2:	e02b      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff6:	623b      	str	r3, [r7, #32]
      break;
 8001ff8:	e02b      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	0c9b      	lsrs	r3, r3, #18
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3328      	adds	r3, #40	; 0x28
 8002004:	443b      	add	r3, r7
 8002006:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800200a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d012      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0c5b      	lsrs	r3, r3, #17
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	3328      	adds	r3, #40	; 0x28
 8002022:	443b      	add	r3, r7
 8002024:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002028:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	4a0e      	ldr	r2, [pc, #56]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	fbb2 f3f3 	udiv	r3, r2, r3
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	e004      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	623b      	str	r3, [r7, #32]
      break;
 800204a:	e002      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb4>)
 800204e:	623b      	str	r3, [r7, #32]
      break;
 8002050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002052:	6a3b      	ldr	r3, [r7, #32]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3728      	adds	r7, #40	; 0x28
 8002058:	46bd      	mov	sp, r7
 800205a:	bc90      	pop	{r4, r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	08003090 	.word	0x08003090
 8002064:	40021000 	.word	0x40021000
 8002068:	007a1200 	.word	0x007a1200
 800206c:	003d0900 	.word	0x003d0900

08002070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b02      	ldr	r3, [pc, #8]	; (8002080 <HAL_RCC_GetHCLKFreq+0x10>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	20000000 	.word	0x20000000

08002084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002088:	f7ff fff2 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	4903      	ldr	r1, [pc, #12]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000
 80020a8:	080030b0 	.word	0x080030b0

080020ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <RCC_Delay+0x34>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <RCC_Delay+0x38>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0a5b      	lsrs	r3, r3, #9
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c8:	bf00      	nop
  }
  while (Delay --);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	60fa      	str	r2, [r7, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <RCC_Delay+0x1c>
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	20000000 	.word	0x20000000
 80020e4:	10624dd3 	.word	0x10624dd3

080020e8 <__errno>:
 80020e8:	4b01      	ldr	r3, [pc, #4]	; (80020f0 <__errno+0x8>)
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000000c 	.word	0x2000000c

080020f4 <__libc_init_array>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	2600      	movs	r6, #0
 80020f8:	4d0c      	ldr	r5, [pc, #48]	; (800212c <__libc_init_array+0x38>)
 80020fa:	4c0d      	ldr	r4, [pc, #52]	; (8002130 <__libc_init_array+0x3c>)
 80020fc:	1b64      	subs	r4, r4, r5
 80020fe:	10a4      	asrs	r4, r4, #2
 8002100:	42a6      	cmp	r6, r4
 8002102:	d109      	bne.n	8002118 <__libc_init_array+0x24>
 8002104:	f000 ffb6 	bl	8003074 <_init>
 8002108:	2600      	movs	r6, #0
 800210a:	4d0a      	ldr	r5, [pc, #40]	; (8002134 <__libc_init_array+0x40>)
 800210c:	4c0a      	ldr	r4, [pc, #40]	; (8002138 <__libc_init_array+0x44>)
 800210e:	1b64      	subs	r4, r4, r5
 8002110:	10a4      	asrs	r4, r4, #2
 8002112:	42a6      	cmp	r6, r4
 8002114:	d105      	bne.n	8002122 <__libc_init_array+0x2e>
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	f855 3b04 	ldr.w	r3, [r5], #4
 800211c:	4798      	blx	r3
 800211e:	3601      	adds	r6, #1
 8002120:	e7ee      	b.n	8002100 <__libc_init_array+0xc>
 8002122:	f855 3b04 	ldr.w	r3, [r5], #4
 8002126:	4798      	blx	r3
 8002128:	3601      	adds	r6, #1
 800212a:	e7f2      	b.n	8002112 <__libc_init_array+0x1e>
 800212c:	08003150 	.word	0x08003150
 8002130:	08003150 	.word	0x08003150
 8002134:	08003150 	.word	0x08003150
 8002138:	08003154 	.word	0x08003154

0800213c <memset>:
 800213c:	4603      	mov	r3, r0
 800213e:	4402      	add	r2, r0
 8002140:	4293      	cmp	r3, r2
 8002142:	d100      	bne.n	8002146 <memset+0xa>
 8002144:	4770      	bx	lr
 8002146:	f803 1b01 	strb.w	r1, [r3], #1
 800214a:	e7f9      	b.n	8002140 <memset+0x4>

0800214c <iprintf>:
 800214c:	b40f      	push	{r0, r1, r2, r3}
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <iprintf+0x2c>)
 8002150:	b513      	push	{r0, r1, r4, lr}
 8002152:	681c      	ldr	r4, [r3, #0]
 8002154:	b124      	cbz	r4, 8002160 <iprintf+0x14>
 8002156:	69a3      	ldr	r3, [r4, #24]
 8002158:	b913      	cbnz	r3, 8002160 <iprintf+0x14>
 800215a:	4620      	mov	r0, r4
 800215c:	f000 f866 	bl	800222c <__sinit>
 8002160:	ab05      	add	r3, sp, #20
 8002162:	4620      	mov	r0, r4
 8002164:	9a04      	ldr	r2, [sp, #16]
 8002166:	68a1      	ldr	r1, [r4, #8]
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	f000 f9bb 	bl	80024e4 <_vfiprintf_r>
 800216e:	b002      	add	sp, #8
 8002170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002174:	b004      	add	sp, #16
 8002176:	4770      	bx	lr
 8002178:	2000000c 	.word	0x2000000c

0800217c <std>:
 800217c:	2300      	movs	r3, #0
 800217e:	b510      	push	{r4, lr}
 8002180:	4604      	mov	r4, r0
 8002182:	e9c0 3300 	strd	r3, r3, [r0]
 8002186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800218a:	6083      	str	r3, [r0, #8]
 800218c:	8181      	strh	r1, [r0, #12]
 800218e:	6643      	str	r3, [r0, #100]	; 0x64
 8002190:	81c2      	strh	r2, [r0, #14]
 8002192:	6183      	str	r3, [r0, #24]
 8002194:	4619      	mov	r1, r3
 8002196:	2208      	movs	r2, #8
 8002198:	305c      	adds	r0, #92	; 0x5c
 800219a:	f7ff ffcf 	bl	800213c <memset>
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <std+0x38>)
 80021a0:	6224      	str	r4, [r4, #32]
 80021a2:	6263      	str	r3, [r4, #36]	; 0x24
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <std+0x3c>)
 80021a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <std+0x40>)
 80021aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <std+0x44>)
 80021ae:	6323      	str	r3, [r4, #48]	; 0x30
 80021b0:	bd10      	pop	{r4, pc}
 80021b2:	bf00      	nop
 80021b4:	08002a91 	.word	0x08002a91
 80021b8:	08002ab3 	.word	0x08002ab3
 80021bc:	08002aeb 	.word	0x08002aeb
 80021c0:	08002b0f 	.word	0x08002b0f

080021c4 <_cleanup_r>:
 80021c4:	4901      	ldr	r1, [pc, #4]	; (80021cc <_cleanup_r+0x8>)
 80021c6:	f000 b8af 	b.w	8002328 <_fwalk_reent>
 80021ca:	bf00      	nop
 80021cc:	08002de1 	.word	0x08002de1

080021d0 <__sfmoreglue>:
 80021d0:	2268      	movs	r2, #104	; 0x68
 80021d2:	b570      	push	{r4, r5, r6, lr}
 80021d4:	1e4d      	subs	r5, r1, #1
 80021d6:	4355      	muls	r5, r2
 80021d8:	460e      	mov	r6, r1
 80021da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021de:	f000 f8e5 	bl	80023ac <_malloc_r>
 80021e2:	4604      	mov	r4, r0
 80021e4:	b140      	cbz	r0, 80021f8 <__sfmoreglue+0x28>
 80021e6:	2100      	movs	r1, #0
 80021e8:	e9c0 1600 	strd	r1, r6, [r0]
 80021ec:	300c      	adds	r0, #12
 80021ee:	60a0      	str	r0, [r4, #8]
 80021f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80021f4:	f7ff ffa2 	bl	800213c <memset>
 80021f8:	4620      	mov	r0, r4
 80021fa:	bd70      	pop	{r4, r5, r6, pc}

080021fc <__sfp_lock_acquire>:
 80021fc:	4801      	ldr	r0, [pc, #4]	; (8002204 <__sfp_lock_acquire+0x8>)
 80021fe:	f000 b8b3 	b.w	8002368 <__retarget_lock_acquire_recursive>
 8002202:	bf00      	nop
 8002204:	20000101 	.word	0x20000101

08002208 <__sfp_lock_release>:
 8002208:	4801      	ldr	r0, [pc, #4]	; (8002210 <__sfp_lock_release+0x8>)
 800220a:	f000 b8ae 	b.w	800236a <__retarget_lock_release_recursive>
 800220e:	bf00      	nop
 8002210:	20000101 	.word	0x20000101

08002214 <__sinit_lock_acquire>:
 8002214:	4801      	ldr	r0, [pc, #4]	; (800221c <__sinit_lock_acquire+0x8>)
 8002216:	f000 b8a7 	b.w	8002368 <__retarget_lock_acquire_recursive>
 800221a:	bf00      	nop
 800221c:	20000102 	.word	0x20000102

08002220 <__sinit_lock_release>:
 8002220:	4801      	ldr	r0, [pc, #4]	; (8002228 <__sinit_lock_release+0x8>)
 8002222:	f000 b8a2 	b.w	800236a <__retarget_lock_release_recursive>
 8002226:	bf00      	nop
 8002228:	20000102 	.word	0x20000102

0800222c <__sinit>:
 800222c:	b510      	push	{r4, lr}
 800222e:	4604      	mov	r4, r0
 8002230:	f7ff fff0 	bl	8002214 <__sinit_lock_acquire>
 8002234:	69a3      	ldr	r3, [r4, #24]
 8002236:	b11b      	cbz	r3, 8002240 <__sinit+0x14>
 8002238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800223c:	f7ff bff0 	b.w	8002220 <__sinit_lock_release>
 8002240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002244:	6523      	str	r3, [r4, #80]	; 0x50
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <__sinit+0x68>)
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <__sinit+0x6c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	62a2      	str	r2, [r4, #40]	; 0x28
 800224e:	42a3      	cmp	r3, r4
 8002250:	bf08      	it	eq
 8002252:	2301      	moveq	r3, #1
 8002254:	4620      	mov	r0, r4
 8002256:	bf08      	it	eq
 8002258:	61a3      	streq	r3, [r4, #24]
 800225a:	f000 f81f 	bl	800229c <__sfp>
 800225e:	6060      	str	r0, [r4, #4]
 8002260:	4620      	mov	r0, r4
 8002262:	f000 f81b 	bl	800229c <__sfp>
 8002266:	60a0      	str	r0, [r4, #8]
 8002268:	4620      	mov	r0, r4
 800226a:	f000 f817 	bl	800229c <__sfp>
 800226e:	2200      	movs	r2, #0
 8002270:	2104      	movs	r1, #4
 8002272:	60e0      	str	r0, [r4, #12]
 8002274:	6860      	ldr	r0, [r4, #4]
 8002276:	f7ff ff81 	bl	800217c <std>
 800227a:	2201      	movs	r2, #1
 800227c:	2109      	movs	r1, #9
 800227e:	68a0      	ldr	r0, [r4, #8]
 8002280:	f7ff ff7c 	bl	800217c <std>
 8002284:	2202      	movs	r2, #2
 8002286:	2112      	movs	r1, #18
 8002288:	68e0      	ldr	r0, [r4, #12]
 800228a:	f7ff ff77 	bl	800217c <std>
 800228e:	2301      	movs	r3, #1
 8002290:	61a3      	str	r3, [r4, #24]
 8002292:	e7d1      	b.n	8002238 <__sinit+0xc>
 8002294:	080030b8 	.word	0x080030b8
 8002298:	080021c5 	.word	0x080021c5

0800229c <__sfp>:
 800229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229e:	4607      	mov	r7, r0
 80022a0:	f7ff ffac 	bl	80021fc <__sfp_lock_acquire>
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <__sfp+0x84>)
 80022a6:	681e      	ldr	r6, [r3, #0]
 80022a8:	69b3      	ldr	r3, [r6, #24]
 80022aa:	b913      	cbnz	r3, 80022b2 <__sfp+0x16>
 80022ac:	4630      	mov	r0, r6
 80022ae:	f7ff ffbd 	bl	800222c <__sinit>
 80022b2:	3648      	adds	r6, #72	; 0x48
 80022b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	d503      	bpl.n	80022c4 <__sfp+0x28>
 80022bc:	6833      	ldr	r3, [r6, #0]
 80022be:	b30b      	cbz	r3, 8002304 <__sfp+0x68>
 80022c0:	6836      	ldr	r6, [r6, #0]
 80022c2:	e7f7      	b.n	80022b4 <__sfp+0x18>
 80022c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80022c8:	b9d5      	cbnz	r5, 8002300 <__sfp+0x64>
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <__sfp+0x88>)
 80022cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80022d0:	60e3      	str	r3, [r4, #12]
 80022d2:	6665      	str	r5, [r4, #100]	; 0x64
 80022d4:	f000 f847 	bl	8002366 <__retarget_lock_init_recursive>
 80022d8:	f7ff ff96 	bl	8002208 <__sfp_lock_release>
 80022dc:	2208      	movs	r2, #8
 80022de:	4629      	mov	r1, r5
 80022e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80022e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80022e8:	6025      	str	r5, [r4, #0]
 80022ea:	61a5      	str	r5, [r4, #24]
 80022ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022f0:	f7ff ff24 	bl	800213c <memset>
 80022f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022fc:	4620      	mov	r0, r4
 80022fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002300:	3468      	adds	r4, #104	; 0x68
 8002302:	e7d9      	b.n	80022b8 <__sfp+0x1c>
 8002304:	2104      	movs	r1, #4
 8002306:	4638      	mov	r0, r7
 8002308:	f7ff ff62 	bl	80021d0 <__sfmoreglue>
 800230c:	4604      	mov	r4, r0
 800230e:	6030      	str	r0, [r6, #0]
 8002310:	2800      	cmp	r0, #0
 8002312:	d1d5      	bne.n	80022c0 <__sfp+0x24>
 8002314:	f7ff ff78 	bl	8002208 <__sfp_lock_release>
 8002318:	230c      	movs	r3, #12
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	e7ee      	b.n	80022fc <__sfp+0x60>
 800231e:	bf00      	nop
 8002320:	080030b8 	.word	0x080030b8
 8002324:	ffff0001 	.word	0xffff0001

08002328 <_fwalk_reent>:
 8002328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800232c:	4606      	mov	r6, r0
 800232e:	4688      	mov	r8, r1
 8002330:	2700      	movs	r7, #0
 8002332:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002336:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800233a:	f1b9 0901 	subs.w	r9, r9, #1
 800233e:	d505      	bpl.n	800234c <_fwalk_reent+0x24>
 8002340:	6824      	ldr	r4, [r4, #0]
 8002342:	2c00      	cmp	r4, #0
 8002344:	d1f7      	bne.n	8002336 <_fwalk_reent+0xe>
 8002346:	4638      	mov	r0, r7
 8002348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800234c:	89ab      	ldrh	r3, [r5, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d907      	bls.n	8002362 <_fwalk_reent+0x3a>
 8002352:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002356:	3301      	adds	r3, #1
 8002358:	d003      	beq.n	8002362 <_fwalk_reent+0x3a>
 800235a:	4629      	mov	r1, r5
 800235c:	4630      	mov	r0, r6
 800235e:	47c0      	blx	r8
 8002360:	4307      	orrs	r7, r0
 8002362:	3568      	adds	r5, #104	; 0x68
 8002364:	e7e9      	b.n	800233a <_fwalk_reent+0x12>

08002366 <__retarget_lock_init_recursive>:
 8002366:	4770      	bx	lr

08002368 <__retarget_lock_acquire_recursive>:
 8002368:	4770      	bx	lr

0800236a <__retarget_lock_release_recursive>:
 800236a:	4770      	bx	lr

0800236c <sbrk_aligned>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	4e0e      	ldr	r6, [pc, #56]	; (80023a8 <sbrk_aligned+0x3c>)
 8002370:	460c      	mov	r4, r1
 8002372:	6831      	ldr	r1, [r6, #0]
 8002374:	4605      	mov	r5, r0
 8002376:	b911      	cbnz	r1, 800237e <sbrk_aligned+0x12>
 8002378:	f000 fb7a 	bl	8002a70 <_sbrk_r>
 800237c:	6030      	str	r0, [r6, #0]
 800237e:	4621      	mov	r1, r4
 8002380:	4628      	mov	r0, r5
 8002382:	f000 fb75 	bl	8002a70 <_sbrk_r>
 8002386:	1c43      	adds	r3, r0, #1
 8002388:	d00a      	beq.n	80023a0 <sbrk_aligned+0x34>
 800238a:	1cc4      	adds	r4, r0, #3
 800238c:	f024 0403 	bic.w	r4, r4, #3
 8002390:	42a0      	cmp	r0, r4
 8002392:	d007      	beq.n	80023a4 <sbrk_aligned+0x38>
 8002394:	1a21      	subs	r1, r4, r0
 8002396:	4628      	mov	r0, r5
 8002398:	f000 fb6a 	bl	8002a70 <_sbrk_r>
 800239c:	3001      	adds	r0, #1
 800239e:	d101      	bne.n	80023a4 <sbrk_aligned+0x38>
 80023a0:	f04f 34ff 	mov.w	r4, #4294967295
 80023a4:	4620      	mov	r0, r4
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	20000108 	.word	0x20000108

080023ac <_malloc_r>:
 80023ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b0:	1ccd      	adds	r5, r1, #3
 80023b2:	f025 0503 	bic.w	r5, r5, #3
 80023b6:	3508      	adds	r5, #8
 80023b8:	2d0c      	cmp	r5, #12
 80023ba:	bf38      	it	cc
 80023bc:	250c      	movcc	r5, #12
 80023be:	2d00      	cmp	r5, #0
 80023c0:	4607      	mov	r7, r0
 80023c2:	db01      	blt.n	80023c8 <_malloc_r+0x1c>
 80023c4:	42a9      	cmp	r1, r5
 80023c6:	d905      	bls.n	80023d4 <_malloc_r+0x28>
 80023c8:	230c      	movs	r3, #12
 80023ca:	2600      	movs	r6, #0
 80023cc:	603b      	str	r3, [r7, #0]
 80023ce:	4630      	mov	r0, r6
 80023d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023d4:	4e2e      	ldr	r6, [pc, #184]	; (8002490 <_malloc_r+0xe4>)
 80023d6:	f000 fdc5 	bl	8002f64 <__malloc_lock>
 80023da:	6833      	ldr	r3, [r6, #0]
 80023dc:	461c      	mov	r4, r3
 80023de:	bb34      	cbnz	r4, 800242e <_malloc_r+0x82>
 80023e0:	4629      	mov	r1, r5
 80023e2:	4638      	mov	r0, r7
 80023e4:	f7ff ffc2 	bl	800236c <sbrk_aligned>
 80023e8:	1c43      	adds	r3, r0, #1
 80023ea:	4604      	mov	r4, r0
 80023ec:	d14d      	bne.n	800248a <_malloc_r+0xde>
 80023ee:	6834      	ldr	r4, [r6, #0]
 80023f0:	4626      	mov	r6, r4
 80023f2:	2e00      	cmp	r6, #0
 80023f4:	d140      	bne.n	8002478 <_malloc_r+0xcc>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	4631      	mov	r1, r6
 80023fa:	4638      	mov	r0, r7
 80023fc:	eb04 0803 	add.w	r8, r4, r3
 8002400:	f000 fb36 	bl	8002a70 <_sbrk_r>
 8002404:	4580      	cmp	r8, r0
 8002406:	d13a      	bne.n	800247e <_malloc_r+0xd2>
 8002408:	6821      	ldr	r1, [r4, #0]
 800240a:	3503      	adds	r5, #3
 800240c:	1a6d      	subs	r5, r5, r1
 800240e:	f025 0503 	bic.w	r5, r5, #3
 8002412:	3508      	adds	r5, #8
 8002414:	2d0c      	cmp	r5, #12
 8002416:	bf38      	it	cc
 8002418:	250c      	movcc	r5, #12
 800241a:	4638      	mov	r0, r7
 800241c:	4629      	mov	r1, r5
 800241e:	f7ff ffa5 	bl	800236c <sbrk_aligned>
 8002422:	3001      	adds	r0, #1
 8002424:	d02b      	beq.n	800247e <_malloc_r+0xd2>
 8002426:	6823      	ldr	r3, [r4, #0]
 8002428:	442b      	add	r3, r5
 800242a:	6023      	str	r3, [r4, #0]
 800242c:	e00e      	b.n	800244c <_malloc_r+0xa0>
 800242e:	6822      	ldr	r2, [r4, #0]
 8002430:	1b52      	subs	r2, r2, r5
 8002432:	d41e      	bmi.n	8002472 <_malloc_r+0xc6>
 8002434:	2a0b      	cmp	r2, #11
 8002436:	d916      	bls.n	8002466 <_malloc_r+0xba>
 8002438:	1961      	adds	r1, r4, r5
 800243a:	42a3      	cmp	r3, r4
 800243c:	6025      	str	r5, [r4, #0]
 800243e:	bf18      	it	ne
 8002440:	6059      	strne	r1, [r3, #4]
 8002442:	6863      	ldr	r3, [r4, #4]
 8002444:	bf08      	it	eq
 8002446:	6031      	streq	r1, [r6, #0]
 8002448:	5162      	str	r2, [r4, r5]
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	4638      	mov	r0, r7
 800244e:	f104 060b 	add.w	r6, r4, #11
 8002452:	f000 fd8d 	bl	8002f70 <__malloc_unlock>
 8002456:	f026 0607 	bic.w	r6, r6, #7
 800245a:	1d23      	adds	r3, r4, #4
 800245c:	1af2      	subs	r2, r6, r3
 800245e:	d0b6      	beq.n	80023ce <_malloc_r+0x22>
 8002460:	1b9b      	subs	r3, r3, r6
 8002462:	50a3      	str	r3, [r4, r2]
 8002464:	e7b3      	b.n	80023ce <_malloc_r+0x22>
 8002466:	6862      	ldr	r2, [r4, #4]
 8002468:	42a3      	cmp	r3, r4
 800246a:	bf0c      	ite	eq
 800246c:	6032      	streq	r2, [r6, #0]
 800246e:	605a      	strne	r2, [r3, #4]
 8002470:	e7ec      	b.n	800244c <_malloc_r+0xa0>
 8002472:	4623      	mov	r3, r4
 8002474:	6864      	ldr	r4, [r4, #4]
 8002476:	e7b2      	b.n	80023de <_malloc_r+0x32>
 8002478:	4634      	mov	r4, r6
 800247a:	6876      	ldr	r6, [r6, #4]
 800247c:	e7b9      	b.n	80023f2 <_malloc_r+0x46>
 800247e:	230c      	movs	r3, #12
 8002480:	4638      	mov	r0, r7
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	f000 fd74 	bl	8002f70 <__malloc_unlock>
 8002488:	e7a1      	b.n	80023ce <_malloc_r+0x22>
 800248a:	6025      	str	r5, [r4, #0]
 800248c:	e7de      	b.n	800244c <_malloc_r+0xa0>
 800248e:	bf00      	nop
 8002490:	20000104 	.word	0x20000104

08002494 <__sfputc_r>:
 8002494:	6893      	ldr	r3, [r2, #8]
 8002496:	b410      	push	{r4}
 8002498:	3b01      	subs	r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	6093      	str	r3, [r2, #8]
 800249e:	da07      	bge.n	80024b0 <__sfputc_r+0x1c>
 80024a0:	6994      	ldr	r4, [r2, #24]
 80024a2:	42a3      	cmp	r3, r4
 80024a4:	db01      	blt.n	80024aa <__sfputc_r+0x16>
 80024a6:	290a      	cmp	r1, #10
 80024a8:	d102      	bne.n	80024b0 <__sfputc_r+0x1c>
 80024aa:	bc10      	pop	{r4}
 80024ac:	f000 bb34 	b.w	8002b18 <__swbuf_r>
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	1c58      	adds	r0, r3, #1
 80024b4:	6010      	str	r0, [r2, #0]
 80024b6:	7019      	strb	r1, [r3, #0]
 80024b8:	4608      	mov	r0, r1
 80024ba:	bc10      	pop	{r4}
 80024bc:	4770      	bx	lr

080024be <__sfputs_r>:
 80024be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c0:	4606      	mov	r6, r0
 80024c2:	460f      	mov	r7, r1
 80024c4:	4614      	mov	r4, r2
 80024c6:	18d5      	adds	r5, r2, r3
 80024c8:	42ac      	cmp	r4, r5
 80024ca:	d101      	bne.n	80024d0 <__sfputs_r+0x12>
 80024cc:	2000      	movs	r0, #0
 80024ce:	e007      	b.n	80024e0 <__sfputs_r+0x22>
 80024d0:	463a      	mov	r2, r7
 80024d2:	4630      	mov	r0, r6
 80024d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024d8:	f7ff ffdc 	bl	8002494 <__sfputc_r>
 80024dc:	1c43      	adds	r3, r0, #1
 80024de:	d1f3      	bne.n	80024c8 <__sfputs_r+0xa>
 80024e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024e4 <_vfiprintf_r>:
 80024e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e8:	460d      	mov	r5, r1
 80024ea:	4614      	mov	r4, r2
 80024ec:	4698      	mov	r8, r3
 80024ee:	4606      	mov	r6, r0
 80024f0:	b09d      	sub	sp, #116	; 0x74
 80024f2:	b118      	cbz	r0, 80024fc <_vfiprintf_r+0x18>
 80024f4:	6983      	ldr	r3, [r0, #24]
 80024f6:	b90b      	cbnz	r3, 80024fc <_vfiprintf_r+0x18>
 80024f8:	f7ff fe98 	bl	800222c <__sinit>
 80024fc:	4b89      	ldr	r3, [pc, #548]	; (8002724 <_vfiprintf_r+0x240>)
 80024fe:	429d      	cmp	r5, r3
 8002500:	d11b      	bne.n	800253a <_vfiprintf_r+0x56>
 8002502:	6875      	ldr	r5, [r6, #4]
 8002504:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002506:	07d9      	lsls	r1, r3, #31
 8002508:	d405      	bmi.n	8002516 <_vfiprintf_r+0x32>
 800250a:	89ab      	ldrh	r3, [r5, #12]
 800250c:	059a      	lsls	r2, r3, #22
 800250e:	d402      	bmi.n	8002516 <_vfiprintf_r+0x32>
 8002510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002512:	f7ff ff29 	bl	8002368 <__retarget_lock_acquire_recursive>
 8002516:	89ab      	ldrh	r3, [r5, #12]
 8002518:	071b      	lsls	r3, r3, #28
 800251a:	d501      	bpl.n	8002520 <_vfiprintf_r+0x3c>
 800251c:	692b      	ldr	r3, [r5, #16]
 800251e:	b9eb      	cbnz	r3, 800255c <_vfiprintf_r+0x78>
 8002520:	4629      	mov	r1, r5
 8002522:	4630      	mov	r0, r6
 8002524:	f000 fb5c 	bl	8002be0 <__swsetup_r>
 8002528:	b1c0      	cbz	r0, 800255c <_vfiprintf_r+0x78>
 800252a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800252c:	07dc      	lsls	r4, r3, #31
 800252e:	d50e      	bpl.n	800254e <_vfiprintf_r+0x6a>
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	b01d      	add	sp, #116	; 0x74
 8002536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <_vfiprintf_r+0x244>)
 800253c:	429d      	cmp	r5, r3
 800253e:	d101      	bne.n	8002544 <_vfiprintf_r+0x60>
 8002540:	68b5      	ldr	r5, [r6, #8]
 8002542:	e7df      	b.n	8002504 <_vfiprintf_r+0x20>
 8002544:	4b79      	ldr	r3, [pc, #484]	; (800272c <_vfiprintf_r+0x248>)
 8002546:	429d      	cmp	r5, r3
 8002548:	bf08      	it	eq
 800254a:	68f5      	ldreq	r5, [r6, #12]
 800254c:	e7da      	b.n	8002504 <_vfiprintf_r+0x20>
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	0598      	lsls	r0, r3, #22
 8002552:	d4ed      	bmi.n	8002530 <_vfiprintf_r+0x4c>
 8002554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002556:	f7ff ff08 	bl	800236a <__retarget_lock_release_recursive>
 800255a:	e7e9      	b.n	8002530 <_vfiprintf_r+0x4c>
 800255c:	2300      	movs	r3, #0
 800255e:	9309      	str	r3, [sp, #36]	; 0x24
 8002560:	2320      	movs	r3, #32
 8002562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002566:	2330      	movs	r3, #48	; 0x30
 8002568:	f04f 0901 	mov.w	r9, #1
 800256c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002570:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002730 <_vfiprintf_r+0x24c>
 8002574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002578:	4623      	mov	r3, r4
 800257a:	469a      	mov	sl, r3
 800257c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002580:	b10a      	cbz	r2, 8002586 <_vfiprintf_r+0xa2>
 8002582:	2a25      	cmp	r2, #37	; 0x25
 8002584:	d1f9      	bne.n	800257a <_vfiprintf_r+0x96>
 8002586:	ebba 0b04 	subs.w	fp, sl, r4
 800258a:	d00b      	beq.n	80025a4 <_vfiprintf_r+0xc0>
 800258c:	465b      	mov	r3, fp
 800258e:	4622      	mov	r2, r4
 8002590:	4629      	mov	r1, r5
 8002592:	4630      	mov	r0, r6
 8002594:	f7ff ff93 	bl	80024be <__sfputs_r>
 8002598:	3001      	adds	r0, #1
 800259a:	f000 80aa 	beq.w	80026f2 <_vfiprintf_r+0x20e>
 800259e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025a0:	445a      	add	r2, fp
 80025a2:	9209      	str	r2, [sp, #36]	; 0x24
 80025a4:	f89a 3000 	ldrb.w	r3, [sl]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a2 	beq.w	80026f2 <_vfiprintf_r+0x20e>
 80025ae:	2300      	movs	r3, #0
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025b8:	f10a 0a01 	add.w	sl, sl, #1
 80025bc:	9304      	str	r3, [sp, #16]
 80025be:	9307      	str	r3, [sp, #28]
 80025c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025c4:	931a      	str	r3, [sp, #104]	; 0x68
 80025c6:	4654      	mov	r4, sl
 80025c8:	2205      	movs	r2, #5
 80025ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025ce:	4858      	ldr	r0, [pc, #352]	; (8002730 <_vfiprintf_r+0x24c>)
 80025d0:	f000 fcba 	bl	8002f48 <memchr>
 80025d4:	9a04      	ldr	r2, [sp, #16]
 80025d6:	b9d8      	cbnz	r0, 8002610 <_vfiprintf_r+0x12c>
 80025d8:	06d1      	lsls	r1, r2, #27
 80025da:	bf44      	itt	mi
 80025dc:	2320      	movmi	r3, #32
 80025de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025e2:	0713      	lsls	r3, r2, #28
 80025e4:	bf44      	itt	mi
 80025e6:	232b      	movmi	r3, #43	; 0x2b
 80025e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025ec:	f89a 3000 	ldrb.w	r3, [sl]
 80025f0:	2b2a      	cmp	r3, #42	; 0x2a
 80025f2:	d015      	beq.n	8002620 <_vfiprintf_r+0x13c>
 80025f4:	4654      	mov	r4, sl
 80025f6:	2000      	movs	r0, #0
 80025f8:	f04f 0c0a 	mov.w	ip, #10
 80025fc:	9a07      	ldr	r2, [sp, #28]
 80025fe:	4621      	mov	r1, r4
 8002600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002604:	3b30      	subs	r3, #48	; 0x30
 8002606:	2b09      	cmp	r3, #9
 8002608:	d94e      	bls.n	80026a8 <_vfiprintf_r+0x1c4>
 800260a:	b1b0      	cbz	r0, 800263a <_vfiprintf_r+0x156>
 800260c:	9207      	str	r2, [sp, #28]
 800260e:	e014      	b.n	800263a <_vfiprintf_r+0x156>
 8002610:	eba0 0308 	sub.w	r3, r0, r8
 8002614:	fa09 f303 	lsl.w	r3, r9, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	46a2      	mov	sl, r4
 800261c:	9304      	str	r3, [sp, #16]
 800261e:	e7d2      	b.n	80025c6 <_vfiprintf_r+0xe2>
 8002620:	9b03      	ldr	r3, [sp, #12]
 8002622:	1d19      	adds	r1, r3, #4
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	9103      	str	r1, [sp, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	bfbb      	ittet	lt
 800262c:	425b      	neglt	r3, r3
 800262e:	f042 0202 	orrlt.w	r2, r2, #2
 8002632:	9307      	strge	r3, [sp, #28]
 8002634:	9307      	strlt	r3, [sp, #28]
 8002636:	bfb8      	it	lt
 8002638:	9204      	strlt	r2, [sp, #16]
 800263a:	7823      	ldrb	r3, [r4, #0]
 800263c:	2b2e      	cmp	r3, #46	; 0x2e
 800263e:	d10c      	bne.n	800265a <_vfiprintf_r+0x176>
 8002640:	7863      	ldrb	r3, [r4, #1]
 8002642:	2b2a      	cmp	r3, #42	; 0x2a
 8002644:	d135      	bne.n	80026b2 <_vfiprintf_r+0x1ce>
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	3402      	adds	r4, #2
 800264a:	1d1a      	adds	r2, r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	9203      	str	r2, [sp, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	bfb8      	it	lt
 8002654:	f04f 33ff 	movlt.w	r3, #4294967295
 8002658:	9305      	str	r3, [sp, #20]
 800265a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002734 <_vfiprintf_r+0x250>
 800265e:	2203      	movs	r2, #3
 8002660:	4650      	mov	r0, sl
 8002662:	7821      	ldrb	r1, [r4, #0]
 8002664:	f000 fc70 	bl	8002f48 <memchr>
 8002668:	b140      	cbz	r0, 800267c <_vfiprintf_r+0x198>
 800266a:	2340      	movs	r3, #64	; 0x40
 800266c:	eba0 000a 	sub.w	r0, r0, sl
 8002670:	fa03 f000 	lsl.w	r0, r3, r0
 8002674:	9b04      	ldr	r3, [sp, #16]
 8002676:	3401      	adds	r4, #1
 8002678:	4303      	orrs	r3, r0
 800267a:	9304      	str	r3, [sp, #16]
 800267c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002680:	2206      	movs	r2, #6
 8002682:	482d      	ldr	r0, [pc, #180]	; (8002738 <_vfiprintf_r+0x254>)
 8002684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002688:	f000 fc5e 	bl	8002f48 <memchr>
 800268c:	2800      	cmp	r0, #0
 800268e:	d03f      	beq.n	8002710 <_vfiprintf_r+0x22c>
 8002690:	4b2a      	ldr	r3, [pc, #168]	; (800273c <_vfiprintf_r+0x258>)
 8002692:	bb1b      	cbnz	r3, 80026dc <_vfiprintf_r+0x1f8>
 8002694:	9b03      	ldr	r3, [sp, #12]
 8002696:	3307      	adds	r3, #7
 8002698:	f023 0307 	bic.w	r3, r3, #7
 800269c:	3308      	adds	r3, #8
 800269e:	9303      	str	r3, [sp, #12]
 80026a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026a2:	443b      	add	r3, r7
 80026a4:	9309      	str	r3, [sp, #36]	; 0x24
 80026a6:	e767      	b.n	8002578 <_vfiprintf_r+0x94>
 80026a8:	460c      	mov	r4, r1
 80026aa:	2001      	movs	r0, #1
 80026ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80026b0:	e7a5      	b.n	80025fe <_vfiprintf_r+0x11a>
 80026b2:	2300      	movs	r3, #0
 80026b4:	f04f 0c0a 	mov.w	ip, #10
 80026b8:	4619      	mov	r1, r3
 80026ba:	3401      	adds	r4, #1
 80026bc:	9305      	str	r3, [sp, #20]
 80026be:	4620      	mov	r0, r4
 80026c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026c4:	3a30      	subs	r2, #48	; 0x30
 80026c6:	2a09      	cmp	r2, #9
 80026c8:	d903      	bls.n	80026d2 <_vfiprintf_r+0x1ee>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0c5      	beq.n	800265a <_vfiprintf_r+0x176>
 80026ce:	9105      	str	r1, [sp, #20]
 80026d0:	e7c3      	b.n	800265a <_vfiprintf_r+0x176>
 80026d2:	4604      	mov	r4, r0
 80026d4:	2301      	movs	r3, #1
 80026d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80026da:	e7f0      	b.n	80026be <_vfiprintf_r+0x1da>
 80026dc:	ab03      	add	r3, sp, #12
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	462a      	mov	r2, r5
 80026e2:	4630      	mov	r0, r6
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <_vfiprintf_r+0x25c>)
 80026e6:	a904      	add	r1, sp, #16
 80026e8:	f3af 8000 	nop.w
 80026ec:	4607      	mov	r7, r0
 80026ee:	1c78      	adds	r0, r7, #1
 80026f0:	d1d6      	bne.n	80026a0 <_vfiprintf_r+0x1bc>
 80026f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80026f4:	07d9      	lsls	r1, r3, #31
 80026f6:	d405      	bmi.n	8002704 <_vfiprintf_r+0x220>
 80026f8:	89ab      	ldrh	r3, [r5, #12]
 80026fa:	059a      	lsls	r2, r3, #22
 80026fc:	d402      	bmi.n	8002704 <_vfiprintf_r+0x220>
 80026fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002700:	f7ff fe33 	bl	800236a <__retarget_lock_release_recursive>
 8002704:	89ab      	ldrh	r3, [r5, #12]
 8002706:	065b      	lsls	r3, r3, #25
 8002708:	f53f af12 	bmi.w	8002530 <_vfiprintf_r+0x4c>
 800270c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800270e:	e711      	b.n	8002534 <_vfiprintf_r+0x50>
 8002710:	ab03      	add	r3, sp, #12
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	462a      	mov	r2, r5
 8002716:	4630      	mov	r0, r6
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <_vfiprintf_r+0x25c>)
 800271a:	a904      	add	r1, sp, #16
 800271c:	f000 f882 	bl	8002824 <_printf_i>
 8002720:	e7e4      	b.n	80026ec <_vfiprintf_r+0x208>
 8002722:	bf00      	nop
 8002724:	080030dc 	.word	0x080030dc
 8002728:	080030fc 	.word	0x080030fc
 800272c:	080030bc 	.word	0x080030bc
 8002730:	0800311c 	.word	0x0800311c
 8002734:	08003122 	.word	0x08003122
 8002738:	08003126 	.word	0x08003126
 800273c:	00000000 	.word	0x00000000
 8002740:	080024bf 	.word	0x080024bf

08002744 <_printf_common>:
 8002744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	4616      	mov	r6, r2
 800274a:	4699      	mov	r9, r3
 800274c:	688a      	ldr	r2, [r1, #8]
 800274e:	690b      	ldr	r3, [r1, #16]
 8002750:	4607      	mov	r7, r0
 8002752:	4293      	cmp	r3, r2
 8002754:	bfb8      	it	lt
 8002756:	4613      	movlt	r3, r2
 8002758:	6033      	str	r3, [r6, #0]
 800275a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800275e:	460c      	mov	r4, r1
 8002760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002764:	b10a      	cbz	r2, 800276a <_printf_common+0x26>
 8002766:	3301      	adds	r3, #1
 8002768:	6033      	str	r3, [r6, #0]
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	0699      	lsls	r1, r3, #26
 800276e:	bf42      	ittt	mi
 8002770:	6833      	ldrmi	r3, [r6, #0]
 8002772:	3302      	addmi	r3, #2
 8002774:	6033      	strmi	r3, [r6, #0]
 8002776:	6825      	ldr	r5, [r4, #0]
 8002778:	f015 0506 	ands.w	r5, r5, #6
 800277c:	d106      	bne.n	800278c <_printf_common+0x48>
 800277e:	f104 0a19 	add.w	sl, r4, #25
 8002782:	68e3      	ldr	r3, [r4, #12]
 8002784:	6832      	ldr	r2, [r6, #0]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	42ab      	cmp	r3, r5
 800278a:	dc28      	bgt.n	80027de <_printf_common+0x9a>
 800278c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002790:	1e13      	subs	r3, r2, #0
 8002792:	6822      	ldr	r2, [r4, #0]
 8002794:	bf18      	it	ne
 8002796:	2301      	movne	r3, #1
 8002798:	0692      	lsls	r2, r2, #26
 800279a:	d42d      	bmi.n	80027f8 <_printf_common+0xb4>
 800279c:	4649      	mov	r1, r9
 800279e:	4638      	mov	r0, r7
 80027a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027a4:	47c0      	blx	r8
 80027a6:	3001      	adds	r0, #1
 80027a8:	d020      	beq.n	80027ec <_printf_common+0xa8>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	68e5      	ldr	r5, [r4, #12]
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf18      	it	ne
 80027b6:	2500      	movne	r5, #0
 80027b8:	6832      	ldr	r2, [r6, #0]
 80027ba:	f04f 0600 	mov.w	r6, #0
 80027be:	68a3      	ldr	r3, [r4, #8]
 80027c0:	bf08      	it	eq
 80027c2:	1aad      	subeq	r5, r5, r2
 80027c4:	6922      	ldr	r2, [r4, #16]
 80027c6:	bf08      	it	eq
 80027c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bfc4      	itt	gt
 80027d0:	1a9b      	subgt	r3, r3, r2
 80027d2:	18ed      	addgt	r5, r5, r3
 80027d4:	341a      	adds	r4, #26
 80027d6:	42b5      	cmp	r5, r6
 80027d8:	d11a      	bne.n	8002810 <_printf_common+0xcc>
 80027da:	2000      	movs	r0, #0
 80027dc:	e008      	b.n	80027f0 <_printf_common+0xac>
 80027de:	2301      	movs	r3, #1
 80027e0:	4652      	mov	r2, sl
 80027e2:	4649      	mov	r1, r9
 80027e4:	4638      	mov	r0, r7
 80027e6:	47c0      	blx	r8
 80027e8:	3001      	adds	r0, #1
 80027ea:	d103      	bne.n	80027f4 <_printf_common+0xb0>
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295
 80027f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027f4:	3501      	adds	r5, #1
 80027f6:	e7c4      	b.n	8002782 <_printf_common+0x3e>
 80027f8:	2030      	movs	r0, #48	; 0x30
 80027fa:	18e1      	adds	r1, r4, r3
 80027fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002806:	4422      	add	r2, r4
 8002808:	3302      	adds	r3, #2
 800280a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800280e:	e7c5      	b.n	800279c <_printf_common+0x58>
 8002810:	2301      	movs	r3, #1
 8002812:	4622      	mov	r2, r4
 8002814:	4649      	mov	r1, r9
 8002816:	4638      	mov	r0, r7
 8002818:	47c0      	blx	r8
 800281a:	3001      	adds	r0, #1
 800281c:	d0e6      	beq.n	80027ec <_printf_common+0xa8>
 800281e:	3601      	adds	r6, #1
 8002820:	e7d9      	b.n	80027d6 <_printf_common+0x92>
	...

08002824 <_printf_i>:
 8002824:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002828:	7e0f      	ldrb	r7, [r1, #24]
 800282a:	4691      	mov	r9, r2
 800282c:	2f78      	cmp	r7, #120	; 0x78
 800282e:	4680      	mov	r8, r0
 8002830:	460c      	mov	r4, r1
 8002832:	469a      	mov	sl, r3
 8002834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002836:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800283a:	d807      	bhi.n	800284c <_printf_i+0x28>
 800283c:	2f62      	cmp	r7, #98	; 0x62
 800283e:	d80a      	bhi.n	8002856 <_printf_i+0x32>
 8002840:	2f00      	cmp	r7, #0
 8002842:	f000 80d9 	beq.w	80029f8 <_printf_i+0x1d4>
 8002846:	2f58      	cmp	r7, #88	; 0x58
 8002848:	f000 80a4 	beq.w	8002994 <_printf_i+0x170>
 800284c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002850:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002854:	e03a      	b.n	80028cc <_printf_i+0xa8>
 8002856:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800285a:	2b15      	cmp	r3, #21
 800285c:	d8f6      	bhi.n	800284c <_printf_i+0x28>
 800285e:	a101      	add	r1, pc, #4	; (adr r1, 8002864 <_printf_i+0x40>)
 8002860:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002864:	080028bd 	.word	0x080028bd
 8002868:	080028d1 	.word	0x080028d1
 800286c:	0800284d 	.word	0x0800284d
 8002870:	0800284d 	.word	0x0800284d
 8002874:	0800284d 	.word	0x0800284d
 8002878:	0800284d 	.word	0x0800284d
 800287c:	080028d1 	.word	0x080028d1
 8002880:	0800284d 	.word	0x0800284d
 8002884:	0800284d 	.word	0x0800284d
 8002888:	0800284d 	.word	0x0800284d
 800288c:	0800284d 	.word	0x0800284d
 8002890:	080029df 	.word	0x080029df
 8002894:	08002901 	.word	0x08002901
 8002898:	080029c1 	.word	0x080029c1
 800289c:	0800284d 	.word	0x0800284d
 80028a0:	0800284d 	.word	0x0800284d
 80028a4:	08002a01 	.word	0x08002a01
 80028a8:	0800284d 	.word	0x0800284d
 80028ac:	08002901 	.word	0x08002901
 80028b0:	0800284d 	.word	0x0800284d
 80028b4:	0800284d 	.word	0x0800284d
 80028b8:	080029c9 	.word	0x080029c9
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	1d1a      	adds	r2, r3, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	602a      	str	r2, [r5, #0]
 80028c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0a4      	b.n	8002a1a <_printf_i+0x1f6>
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	6829      	ldr	r1, [r5, #0]
 80028d4:	0606      	lsls	r6, r0, #24
 80028d6:	f101 0304 	add.w	r3, r1, #4
 80028da:	d50a      	bpl.n	80028f2 <_printf_i+0xce>
 80028dc:	680e      	ldr	r6, [r1, #0]
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	2e00      	cmp	r6, #0
 80028e2:	da03      	bge.n	80028ec <_printf_i+0xc8>
 80028e4:	232d      	movs	r3, #45	; 0x2d
 80028e6:	4276      	negs	r6, r6
 80028e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028ec:	230a      	movs	r3, #10
 80028ee:	485e      	ldr	r0, [pc, #376]	; (8002a68 <_printf_i+0x244>)
 80028f0:	e019      	b.n	8002926 <_printf_i+0x102>
 80028f2:	680e      	ldr	r6, [r1, #0]
 80028f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028f8:	602b      	str	r3, [r5, #0]
 80028fa:	bf18      	it	ne
 80028fc:	b236      	sxthne	r6, r6
 80028fe:	e7ef      	b.n	80028e0 <_printf_i+0xbc>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	1d19      	adds	r1, r3, #4
 8002906:	6029      	str	r1, [r5, #0]
 8002908:	0601      	lsls	r1, r0, #24
 800290a:	d501      	bpl.n	8002910 <_printf_i+0xec>
 800290c:	681e      	ldr	r6, [r3, #0]
 800290e:	e002      	b.n	8002916 <_printf_i+0xf2>
 8002910:	0646      	lsls	r6, r0, #25
 8002912:	d5fb      	bpl.n	800290c <_printf_i+0xe8>
 8002914:	881e      	ldrh	r6, [r3, #0]
 8002916:	2f6f      	cmp	r7, #111	; 0x6f
 8002918:	bf0c      	ite	eq
 800291a:	2308      	moveq	r3, #8
 800291c:	230a      	movne	r3, #10
 800291e:	4852      	ldr	r0, [pc, #328]	; (8002a68 <_printf_i+0x244>)
 8002920:	2100      	movs	r1, #0
 8002922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002926:	6865      	ldr	r5, [r4, #4]
 8002928:	2d00      	cmp	r5, #0
 800292a:	bfa8      	it	ge
 800292c:	6821      	ldrge	r1, [r4, #0]
 800292e:	60a5      	str	r5, [r4, #8]
 8002930:	bfa4      	itt	ge
 8002932:	f021 0104 	bicge.w	r1, r1, #4
 8002936:	6021      	strge	r1, [r4, #0]
 8002938:	b90e      	cbnz	r6, 800293e <_printf_i+0x11a>
 800293a:	2d00      	cmp	r5, #0
 800293c:	d04d      	beq.n	80029da <_printf_i+0x1b6>
 800293e:	4615      	mov	r5, r2
 8002940:	fbb6 f1f3 	udiv	r1, r6, r3
 8002944:	fb03 6711 	mls	r7, r3, r1, r6
 8002948:	5dc7      	ldrb	r7, [r0, r7]
 800294a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800294e:	4637      	mov	r7, r6
 8002950:	42bb      	cmp	r3, r7
 8002952:	460e      	mov	r6, r1
 8002954:	d9f4      	bls.n	8002940 <_printf_i+0x11c>
 8002956:	2b08      	cmp	r3, #8
 8002958:	d10b      	bne.n	8002972 <_printf_i+0x14e>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	07de      	lsls	r6, r3, #31
 800295e:	d508      	bpl.n	8002972 <_printf_i+0x14e>
 8002960:	6923      	ldr	r3, [r4, #16]
 8002962:	6861      	ldr	r1, [r4, #4]
 8002964:	4299      	cmp	r1, r3
 8002966:	bfde      	ittt	le
 8002968:	2330      	movle	r3, #48	; 0x30
 800296a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800296e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002972:	1b52      	subs	r2, r2, r5
 8002974:	6122      	str	r2, [r4, #16]
 8002976:	464b      	mov	r3, r9
 8002978:	4621      	mov	r1, r4
 800297a:	4640      	mov	r0, r8
 800297c:	f8cd a000 	str.w	sl, [sp]
 8002980:	aa03      	add	r2, sp, #12
 8002982:	f7ff fedf 	bl	8002744 <_printf_common>
 8002986:	3001      	adds	r0, #1
 8002988:	d14c      	bne.n	8002a24 <_printf_i+0x200>
 800298a:	f04f 30ff 	mov.w	r0, #4294967295
 800298e:	b004      	add	sp, #16
 8002990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002994:	4834      	ldr	r0, [pc, #208]	; (8002a68 <_printf_i+0x244>)
 8002996:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800299a:	6829      	ldr	r1, [r5, #0]
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	f851 6b04 	ldr.w	r6, [r1], #4
 80029a2:	6029      	str	r1, [r5, #0]
 80029a4:	061d      	lsls	r5, r3, #24
 80029a6:	d514      	bpl.n	80029d2 <_printf_i+0x1ae>
 80029a8:	07df      	lsls	r7, r3, #31
 80029aa:	bf44      	itt	mi
 80029ac:	f043 0320 	orrmi.w	r3, r3, #32
 80029b0:	6023      	strmi	r3, [r4, #0]
 80029b2:	b91e      	cbnz	r6, 80029bc <_printf_i+0x198>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	f023 0320 	bic.w	r3, r3, #32
 80029ba:	6023      	str	r3, [r4, #0]
 80029bc:	2310      	movs	r3, #16
 80029be:	e7af      	b.n	8002920 <_printf_i+0xfc>
 80029c0:	6823      	ldr	r3, [r4, #0]
 80029c2:	f043 0320 	orr.w	r3, r3, #32
 80029c6:	6023      	str	r3, [r4, #0]
 80029c8:	2378      	movs	r3, #120	; 0x78
 80029ca:	4828      	ldr	r0, [pc, #160]	; (8002a6c <_printf_i+0x248>)
 80029cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029d0:	e7e3      	b.n	800299a <_printf_i+0x176>
 80029d2:	0659      	lsls	r1, r3, #25
 80029d4:	bf48      	it	mi
 80029d6:	b2b6      	uxthmi	r6, r6
 80029d8:	e7e6      	b.n	80029a8 <_printf_i+0x184>
 80029da:	4615      	mov	r5, r2
 80029dc:	e7bb      	b.n	8002956 <_printf_i+0x132>
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	6826      	ldr	r6, [r4, #0]
 80029e2:	1d18      	adds	r0, r3, #4
 80029e4:	6961      	ldr	r1, [r4, #20]
 80029e6:	6028      	str	r0, [r5, #0]
 80029e8:	0635      	lsls	r5, r6, #24
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	d501      	bpl.n	80029f2 <_printf_i+0x1ce>
 80029ee:	6019      	str	r1, [r3, #0]
 80029f0:	e002      	b.n	80029f8 <_printf_i+0x1d4>
 80029f2:	0670      	lsls	r0, r6, #25
 80029f4:	d5fb      	bpl.n	80029ee <_printf_i+0x1ca>
 80029f6:	8019      	strh	r1, [r3, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	4615      	mov	r5, r2
 80029fc:	6123      	str	r3, [r4, #16]
 80029fe:	e7ba      	b.n	8002976 <_printf_i+0x152>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	1d1a      	adds	r2, r3, #4
 8002a06:	602a      	str	r2, [r5, #0]
 8002a08:	681d      	ldr	r5, [r3, #0]
 8002a0a:	6862      	ldr	r2, [r4, #4]
 8002a0c:	4628      	mov	r0, r5
 8002a0e:	f000 fa9b 	bl	8002f48 <memchr>
 8002a12:	b108      	cbz	r0, 8002a18 <_printf_i+0x1f4>
 8002a14:	1b40      	subs	r0, r0, r5
 8002a16:	6060      	str	r0, [r4, #4]
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	6123      	str	r3, [r4, #16]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a22:	e7a8      	b.n	8002976 <_printf_i+0x152>
 8002a24:	462a      	mov	r2, r5
 8002a26:	4649      	mov	r1, r9
 8002a28:	4640      	mov	r0, r8
 8002a2a:	6923      	ldr	r3, [r4, #16]
 8002a2c:	47d0      	blx	sl
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d0ab      	beq.n	800298a <_printf_i+0x166>
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	079b      	lsls	r3, r3, #30
 8002a36:	d413      	bmi.n	8002a60 <_printf_i+0x23c>
 8002a38:	68e0      	ldr	r0, [r4, #12]
 8002a3a:	9b03      	ldr	r3, [sp, #12]
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	bfb8      	it	lt
 8002a40:	4618      	movlt	r0, r3
 8002a42:	e7a4      	b.n	800298e <_printf_i+0x16a>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4632      	mov	r2, r6
 8002a48:	4649      	mov	r1, r9
 8002a4a:	4640      	mov	r0, r8
 8002a4c:	47d0      	blx	sl
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d09b      	beq.n	800298a <_printf_i+0x166>
 8002a52:	3501      	adds	r5, #1
 8002a54:	68e3      	ldr	r3, [r4, #12]
 8002a56:	9903      	ldr	r1, [sp, #12]
 8002a58:	1a5b      	subs	r3, r3, r1
 8002a5a:	42ab      	cmp	r3, r5
 8002a5c:	dcf2      	bgt.n	8002a44 <_printf_i+0x220>
 8002a5e:	e7eb      	b.n	8002a38 <_printf_i+0x214>
 8002a60:	2500      	movs	r5, #0
 8002a62:	f104 0619 	add.w	r6, r4, #25
 8002a66:	e7f5      	b.n	8002a54 <_printf_i+0x230>
 8002a68:	0800312d 	.word	0x0800312d
 8002a6c:	0800313e 	.word	0x0800313e

08002a70 <_sbrk_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	2300      	movs	r3, #0
 8002a74:	4d05      	ldr	r5, [pc, #20]	; (8002a8c <_sbrk_r+0x1c>)
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	602b      	str	r3, [r5, #0]
 8002a7c:	f7fd fdae 	bl	80005dc <_sbrk>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_sbrk_r+0x1a>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_sbrk_r+0x1a>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	2000010c 	.word	0x2000010c

08002a90 <__sread>:
 8002a90:	b510      	push	{r4, lr}
 8002a92:	460c      	mov	r4, r1
 8002a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a98:	f000 fab8 	bl	800300c <_read_r>
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	bfab      	itete	ge
 8002aa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8002aa4:	181b      	addge	r3, r3, r0
 8002aa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002aaa:	bfac      	ite	ge
 8002aac:	6563      	strge	r3, [r4, #84]	; 0x54
 8002aae:	81a3      	strhlt	r3, [r4, #12]
 8002ab0:	bd10      	pop	{r4, pc}

08002ab2 <__swrite>:
 8002ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab6:	461f      	mov	r7, r3
 8002ab8:	898b      	ldrh	r3, [r1, #12]
 8002aba:	4605      	mov	r5, r0
 8002abc:	05db      	lsls	r3, r3, #23
 8002abe:	460c      	mov	r4, r1
 8002ac0:	4616      	mov	r6, r2
 8002ac2:	d505      	bpl.n	8002ad0 <__swrite+0x1e>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002acc:	f000 f9c4 	bl	8002e58 <_lseek_r>
 8002ad0:	89a3      	ldrh	r3, [r4, #12]
 8002ad2:	4632      	mov	r2, r6
 8002ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad8:	81a3      	strh	r3, [r4, #12]
 8002ada:	4628      	mov	r0, r5
 8002adc:	463b      	mov	r3, r7
 8002ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae6:	f000 b869 	b.w	8002bbc <_write_r>

08002aea <__sseek>:
 8002aea:	b510      	push	{r4, lr}
 8002aec:	460c      	mov	r4, r1
 8002aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af2:	f000 f9b1 	bl	8002e58 <_lseek_r>
 8002af6:	1c43      	adds	r3, r0, #1
 8002af8:	89a3      	ldrh	r3, [r4, #12]
 8002afa:	bf15      	itete	ne
 8002afc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002afe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b06:	81a3      	strheq	r3, [r4, #12]
 8002b08:	bf18      	it	ne
 8002b0a:	81a3      	strhne	r3, [r4, #12]
 8002b0c:	bd10      	pop	{r4, pc}

08002b0e <__sclose>:
 8002b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b12:	f000 b8d3 	b.w	8002cbc <_close_r>
	...

08002b18 <__swbuf_r>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	460e      	mov	r6, r1
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	4605      	mov	r5, r0
 8002b20:	b118      	cbz	r0, 8002b2a <__swbuf_r+0x12>
 8002b22:	6983      	ldr	r3, [r0, #24]
 8002b24:	b90b      	cbnz	r3, 8002b2a <__swbuf_r+0x12>
 8002b26:	f7ff fb81 	bl	800222c <__sinit>
 8002b2a:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <__swbuf_r+0x98>)
 8002b2c:	429c      	cmp	r4, r3
 8002b2e:	d12b      	bne.n	8002b88 <__swbuf_r+0x70>
 8002b30:	686c      	ldr	r4, [r5, #4]
 8002b32:	69a3      	ldr	r3, [r4, #24]
 8002b34:	60a3      	str	r3, [r4, #8]
 8002b36:	89a3      	ldrh	r3, [r4, #12]
 8002b38:	071a      	lsls	r2, r3, #28
 8002b3a:	d52f      	bpl.n	8002b9c <__swbuf_r+0x84>
 8002b3c:	6923      	ldr	r3, [r4, #16]
 8002b3e:	b36b      	cbz	r3, 8002b9c <__swbuf_r+0x84>
 8002b40:	6923      	ldr	r3, [r4, #16]
 8002b42:	6820      	ldr	r0, [r4, #0]
 8002b44:	b2f6      	uxtb	r6, r6
 8002b46:	1ac0      	subs	r0, r0, r3
 8002b48:	6963      	ldr	r3, [r4, #20]
 8002b4a:	4637      	mov	r7, r6
 8002b4c:	4283      	cmp	r3, r0
 8002b4e:	dc04      	bgt.n	8002b5a <__swbuf_r+0x42>
 8002b50:	4621      	mov	r1, r4
 8002b52:	4628      	mov	r0, r5
 8002b54:	f000 f944 	bl	8002de0 <_fflush_r>
 8002b58:	bb30      	cbnz	r0, 8002ba8 <__swbuf_r+0x90>
 8002b5a:	68a3      	ldr	r3, [r4, #8]
 8002b5c:	3001      	adds	r0, #1
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	60a3      	str	r3, [r4, #8]
 8002b62:	6823      	ldr	r3, [r4, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	6022      	str	r2, [r4, #0]
 8002b68:	701e      	strb	r6, [r3, #0]
 8002b6a:	6963      	ldr	r3, [r4, #20]
 8002b6c:	4283      	cmp	r3, r0
 8002b6e:	d004      	beq.n	8002b7a <__swbuf_r+0x62>
 8002b70:	89a3      	ldrh	r3, [r4, #12]
 8002b72:	07db      	lsls	r3, r3, #31
 8002b74:	d506      	bpl.n	8002b84 <__swbuf_r+0x6c>
 8002b76:	2e0a      	cmp	r6, #10
 8002b78:	d104      	bne.n	8002b84 <__swbuf_r+0x6c>
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4628      	mov	r0, r5
 8002b7e:	f000 f92f 	bl	8002de0 <_fflush_r>
 8002b82:	b988      	cbnz	r0, 8002ba8 <__swbuf_r+0x90>
 8002b84:	4638      	mov	r0, r7
 8002b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <__swbuf_r+0x9c>)
 8002b8a:	429c      	cmp	r4, r3
 8002b8c:	d101      	bne.n	8002b92 <__swbuf_r+0x7a>
 8002b8e:	68ac      	ldr	r4, [r5, #8]
 8002b90:	e7cf      	b.n	8002b32 <__swbuf_r+0x1a>
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <__swbuf_r+0xa0>)
 8002b94:	429c      	cmp	r4, r3
 8002b96:	bf08      	it	eq
 8002b98:	68ec      	ldreq	r4, [r5, #12]
 8002b9a:	e7ca      	b.n	8002b32 <__swbuf_r+0x1a>
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f000 f81e 	bl	8002be0 <__swsetup_r>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d0cb      	beq.n	8002b40 <__swbuf_r+0x28>
 8002ba8:	f04f 37ff 	mov.w	r7, #4294967295
 8002bac:	e7ea      	b.n	8002b84 <__swbuf_r+0x6c>
 8002bae:	bf00      	nop
 8002bb0:	080030dc 	.word	0x080030dc
 8002bb4:	080030fc 	.word	0x080030fc
 8002bb8:	080030bc 	.word	0x080030bc

08002bbc <_write_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4d05      	ldr	r5, [pc, #20]	; (8002bdc <_write_r+0x20>)
 8002bc8:	602a      	str	r2, [r5, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f7fd fcba 	bl	8000544 <_write>
 8002bd0:	1c43      	adds	r3, r0, #1
 8002bd2:	d102      	bne.n	8002bda <_write_r+0x1e>
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	b103      	cbz	r3, 8002bda <_write_r+0x1e>
 8002bd8:	6023      	str	r3, [r4, #0]
 8002bda:	bd38      	pop	{r3, r4, r5, pc}
 8002bdc:	2000010c 	.word	0x2000010c

08002be0 <__swsetup_r>:
 8002be0:	4b32      	ldr	r3, [pc, #200]	; (8002cac <__swsetup_r+0xcc>)
 8002be2:	b570      	push	{r4, r5, r6, lr}
 8002be4:	681d      	ldr	r5, [r3, #0]
 8002be6:	4606      	mov	r6, r0
 8002be8:	460c      	mov	r4, r1
 8002bea:	b125      	cbz	r5, 8002bf6 <__swsetup_r+0x16>
 8002bec:	69ab      	ldr	r3, [r5, #24]
 8002bee:	b913      	cbnz	r3, 8002bf6 <__swsetup_r+0x16>
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	f7ff fb1b 	bl	800222c <__sinit>
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <__swsetup_r+0xd0>)
 8002bf8:	429c      	cmp	r4, r3
 8002bfa:	d10f      	bne.n	8002c1c <__swsetup_r+0x3c>
 8002bfc:	686c      	ldr	r4, [r5, #4]
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c04:	0719      	lsls	r1, r3, #28
 8002c06:	d42c      	bmi.n	8002c62 <__swsetup_r+0x82>
 8002c08:	06dd      	lsls	r5, r3, #27
 8002c0a:	d411      	bmi.n	8002c30 <__swsetup_r+0x50>
 8002c0c:	2309      	movs	r3, #9
 8002c0e:	6033      	str	r3, [r6, #0]
 8002c10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	81a3      	strh	r3, [r4, #12]
 8002c1a:	e03e      	b.n	8002c9a <__swsetup_r+0xba>
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <__swsetup_r+0xd4>)
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	d101      	bne.n	8002c26 <__swsetup_r+0x46>
 8002c22:	68ac      	ldr	r4, [r5, #8]
 8002c24:	e7eb      	b.n	8002bfe <__swsetup_r+0x1e>
 8002c26:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <__swsetup_r+0xd8>)
 8002c28:	429c      	cmp	r4, r3
 8002c2a:	bf08      	it	eq
 8002c2c:	68ec      	ldreq	r4, [r5, #12]
 8002c2e:	e7e6      	b.n	8002bfe <__swsetup_r+0x1e>
 8002c30:	0758      	lsls	r0, r3, #29
 8002c32:	d512      	bpl.n	8002c5a <__swsetup_r+0x7a>
 8002c34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c36:	b141      	cbz	r1, 8002c4a <__swsetup_r+0x6a>
 8002c38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c3c:	4299      	cmp	r1, r3
 8002c3e:	d002      	beq.n	8002c46 <__swsetup_r+0x66>
 8002c40:	4630      	mov	r0, r6
 8002c42:	f000 f99b 	bl	8002f7c <_free_r>
 8002c46:	2300      	movs	r3, #0
 8002c48:	6363      	str	r3, [r4, #52]	; 0x34
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c50:	81a3      	strh	r3, [r4, #12]
 8002c52:	2300      	movs	r3, #0
 8002c54:	6063      	str	r3, [r4, #4]
 8002c56:	6923      	ldr	r3, [r4, #16]
 8002c58:	6023      	str	r3, [r4, #0]
 8002c5a:	89a3      	ldrh	r3, [r4, #12]
 8002c5c:	f043 0308 	orr.w	r3, r3, #8
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	6923      	ldr	r3, [r4, #16]
 8002c64:	b94b      	cbnz	r3, 8002c7a <__swsetup_r+0x9a>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c70:	d003      	beq.n	8002c7a <__swsetup_r+0x9a>
 8002c72:	4621      	mov	r1, r4
 8002c74:	4630      	mov	r0, r6
 8002c76:	f000 f927 	bl	8002ec8 <__smakebuf_r>
 8002c7a:	89a0      	ldrh	r0, [r4, #12]
 8002c7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c80:	f010 0301 	ands.w	r3, r0, #1
 8002c84:	d00a      	beq.n	8002c9c <__swsetup_r+0xbc>
 8002c86:	2300      	movs	r3, #0
 8002c88:	60a3      	str	r3, [r4, #8]
 8002c8a:	6963      	ldr	r3, [r4, #20]
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	61a3      	str	r3, [r4, #24]
 8002c90:	6923      	ldr	r3, [r4, #16]
 8002c92:	b943      	cbnz	r3, 8002ca6 <__swsetup_r+0xc6>
 8002c94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002c98:	d1ba      	bne.n	8002c10 <__swsetup_r+0x30>
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	0781      	lsls	r1, r0, #30
 8002c9e:	bf58      	it	pl
 8002ca0:	6963      	ldrpl	r3, [r4, #20]
 8002ca2:	60a3      	str	r3, [r4, #8]
 8002ca4:	e7f4      	b.n	8002c90 <__swsetup_r+0xb0>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	e7f7      	b.n	8002c9a <__swsetup_r+0xba>
 8002caa:	bf00      	nop
 8002cac:	2000000c 	.word	0x2000000c
 8002cb0:	080030dc 	.word	0x080030dc
 8002cb4:	080030fc 	.word	0x080030fc
 8002cb8:	080030bc 	.word	0x080030bc

08002cbc <_close_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	4d05      	ldr	r5, [pc, #20]	; (8002cd8 <_close_r+0x1c>)
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	4608      	mov	r0, r1
 8002cc6:	602b      	str	r3, [r5, #0]
 8002cc8:	f7fd fc58 	bl	800057c <_close>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_close_r+0x1a>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_close_r+0x1a>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	2000010c 	.word	0x2000010c

08002cdc <__sflush_r>:
 8002cdc:	898a      	ldrh	r2, [r1, #12]
 8002cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	0710      	lsls	r0, r2, #28
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	d457      	bmi.n	8002d98 <__sflush_r+0xbc>
 8002ce8:	684b      	ldr	r3, [r1, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	dc04      	bgt.n	8002cf8 <__sflush_r+0x1c>
 8002cee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dc01      	bgt.n	8002cf8 <__sflush_r+0x1c>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cfa:	2e00      	cmp	r6, #0
 8002cfc:	d0fa      	beq.n	8002cf4 <__sflush_r+0x18>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d04:	682f      	ldr	r7, [r5, #0]
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	d032      	beq.n	8002d70 <__sflush_r+0x94>
 8002d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	075a      	lsls	r2, r3, #29
 8002d10:	d505      	bpl.n	8002d1e <__sflush_r+0x42>
 8002d12:	6863      	ldr	r3, [r4, #4]
 8002d14:	1ac0      	subs	r0, r0, r3
 8002d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d18:	b10b      	cbz	r3, 8002d1e <__sflush_r+0x42>
 8002d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d1c:	1ac0      	subs	r0, r0, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4602      	mov	r2, r0
 8002d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d24:	4628      	mov	r0, r5
 8002d26:	6a21      	ldr	r1, [r4, #32]
 8002d28:	47b0      	blx	r6
 8002d2a:	1c43      	adds	r3, r0, #1
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	d106      	bne.n	8002d3e <__sflush_r+0x62>
 8002d30:	6829      	ldr	r1, [r5, #0]
 8002d32:	291d      	cmp	r1, #29
 8002d34:	d82c      	bhi.n	8002d90 <__sflush_r+0xb4>
 8002d36:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <__sflush_r+0x100>)
 8002d38:	40ca      	lsrs	r2, r1
 8002d3a:	07d6      	lsls	r6, r2, #31
 8002d3c:	d528      	bpl.n	8002d90 <__sflush_r+0xb4>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	6062      	str	r2, [r4, #4]
 8002d42:	6922      	ldr	r2, [r4, #16]
 8002d44:	04d9      	lsls	r1, r3, #19
 8002d46:	6022      	str	r2, [r4, #0]
 8002d48:	d504      	bpl.n	8002d54 <__sflush_r+0x78>
 8002d4a:	1c42      	adds	r2, r0, #1
 8002d4c:	d101      	bne.n	8002d52 <__sflush_r+0x76>
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	b903      	cbnz	r3, 8002d54 <__sflush_r+0x78>
 8002d52:	6560      	str	r0, [r4, #84]	; 0x54
 8002d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d56:	602f      	str	r7, [r5, #0]
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d0cb      	beq.n	8002cf4 <__sflush_r+0x18>
 8002d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d60:	4299      	cmp	r1, r3
 8002d62:	d002      	beq.n	8002d6a <__sflush_r+0x8e>
 8002d64:	4628      	mov	r0, r5
 8002d66:	f000 f909 	bl	8002f7c <_free_r>
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8002d6e:	e7c2      	b.n	8002cf6 <__sflush_r+0x1a>
 8002d70:	6a21      	ldr	r1, [r4, #32]
 8002d72:	2301      	movs	r3, #1
 8002d74:	4628      	mov	r0, r5
 8002d76:	47b0      	blx	r6
 8002d78:	1c41      	adds	r1, r0, #1
 8002d7a:	d1c7      	bne.n	8002d0c <__sflush_r+0x30>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0c4      	beq.n	8002d0c <__sflush_r+0x30>
 8002d82:	2b1d      	cmp	r3, #29
 8002d84:	d001      	beq.n	8002d8a <__sflush_r+0xae>
 8002d86:	2b16      	cmp	r3, #22
 8002d88:	d101      	bne.n	8002d8e <__sflush_r+0xb2>
 8002d8a:	602f      	str	r7, [r5, #0]
 8002d8c:	e7b2      	b.n	8002cf4 <__sflush_r+0x18>
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d94:	81a3      	strh	r3, [r4, #12]
 8002d96:	e7ae      	b.n	8002cf6 <__sflush_r+0x1a>
 8002d98:	690f      	ldr	r7, [r1, #16]
 8002d9a:	2f00      	cmp	r7, #0
 8002d9c:	d0aa      	beq.n	8002cf4 <__sflush_r+0x18>
 8002d9e:	0793      	lsls	r3, r2, #30
 8002da0:	bf18      	it	ne
 8002da2:	2300      	movne	r3, #0
 8002da4:	680e      	ldr	r6, [r1, #0]
 8002da6:	bf08      	it	eq
 8002da8:	694b      	ldreq	r3, [r1, #20]
 8002daa:	1bf6      	subs	r6, r6, r7
 8002dac:	600f      	str	r7, [r1, #0]
 8002dae:	608b      	str	r3, [r1, #8]
 8002db0:	2e00      	cmp	r6, #0
 8002db2:	dd9f      	ble.n	8002cf4 <__sflush_r+0x18>
 8002db4:	4633      	mov	r3, r6
 8002db6:	463a      	mov	r2, r7
 8002db8:	4628      	mov	r0, r5
 8002dba:	6a21      	ldr	r1, [r4, #32]
 8002dbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002dc0:	47e0      	blx	ip
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	dc06      	bgt.n	8002dd4 <__sflush_r+0xf8>
 8002dc6:	89a3      	ldrh	r3, [r4, #12]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd0:	81a3      	strh	r3, [r4, #12]
 8002dd2:	e790      	b.n	8002cf6 <__sflush_r+0x1a>
 8002dd4:	4407      	add	r7, r0
 8002dd6:	1a36      	subs	r6, r6, r0
 8002dd8:	e7ea      	b.n	8002db0 <__sflush_r+0xd4>
 8002dda:	bf00      	nop
 8002ddc:	20400001 	.word	0x20400001

08002de0 <_fflush_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	690b      	ldr	r3, [r1, #16]
 8002de4:	4605      	mov	r5, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	b913      	cbnz	r3, 8002df0 <_fflush_r+0x10>
 8002dea:	2500      	movs	r5, #0
 8002dec:	4628      	mov	r0, r5
 8002dee:	bd38      	pop	{r3, r4, r5, pc}
 8002df0:	b118      	cbz	r0, 8002dfa <_fflush_r+0x1a>
 8002df2:	6983      	ldr	r3, [r0, #24]
 8002df4:	b90b      	cbnz	r3, 8002dfa <_fflush_r+0x1a>
 8002df6:	f7ff fa19 	bl	800222c <__sinit>
 8002dfa:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <_fflush_r+0x6c>)
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	d11b      	bne.n	8002e38 <_fflush_r+0x58>
 8002e00:	686c      	ldr	r4, [r5, #4]
 8002e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0ef      	beq.n	8002dea <_fflush_r+0xa>
 8002e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e0c:	07d0      	lsls	r0, r2, #31
 8002e0e:	d404      	bmi.n	8002e1a <_fflush_r+0x3a>
 8002e10:	0599      	lsls	r1, r3, #22
 8002e12:	d402      	bmi.n	8002e1a <_fflush_r+0x3a>
 8002e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e16:	f7ff faa7 	bl	8002368 <__retarget_lock_acquire_recursive>
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	f7ff ff5d 	bl	8002cdc <__sflush_r>
 8002e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e24:	4605      	mov	r5, r0
 8002e26:	07da      	lsls	r2, r3, #31
 8002e28:	d4e0      	bmi.n	8002dec <_fflush_r+0xc>
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d4dd      	bmi.n	8002dec <_fflush_r+0xc>
 8002e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e32:	f7ff fa9a 	bl	800236a <__retarget_lock_release_recursive>
 8002e36:	e7d9      	b.n	8002dec <_fflush_r+0xc>
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <_fflush_r+0x70>)
 8002e3a:	429c      	cmp	r4, r3
 8002e3c:	d101      	bne.n	8002e42 <_fflush_r+0x62>
 8002e3e:	68ac      	ldr	r4, [r5, #8]
 8002e40:	e7df      	b.n	8002e02 <_fflush_r+0x22>
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <_fflush_r+0x74>)
 8002e44:	429c      	cmp	r4, r3
 8002e46:	bf08      	it	eq
 8002e48:	68ec      	ldreq	r4, [r5, #12]
 8002e4a:	e7da      	b.n	8002e02 <_fflush_r+0x22>
 8002e4c:	080030dc 	.word	0x080030dc
 8002e50:	080030fc 	.word	0x080030fc
 8002e54:	080030bc 	.word	0x080030bc

08002e58 <_lseek_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4608      	mov	r0, r1
 8002e5e:	4611      	mov	r1, r2
 8002e60:	2200      	movs	r2, #0
 8002e62:	4d05      	ldr	r5, [pc, #20]	; (8002e78 <_lseek_r+0x20>)
 8002e64:	602a      	str	r2, [r5, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7fd fbac 	bl	80005c4 <_lseek>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <_lseek_r+0x1e>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	b103      	cbz	r3, 8002e76 <_lseek_r+0x1e>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	2000010c 	.word	0x2000010c

08002e7c <__swhatbuf_r>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	460e      	mov	r6, r1
 8002e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e84:	4614      	mov	r4, r2
 8002e86:	2900      	cmp	r1, #0
 8002e88:	461d      	mov	r5, r3
 8002e8a:	b096      	sub	sp, #88	; 0x58
 8002e8c:	da08      	bge.n	8002ea0 <__swhatbuf_r+0x24>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e94:	602a      	str	r2, [r5, #0]
 8002e96:	061a      	lsls	r2, r3, #24
 8002e98:	d410      	bmi.n	8002ebc <__swhatbuf_r+0x40>
 8002e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e9e:	e00e      	b.n	8002ebe <__swhatbuf_r+0x42>
 8002ea0:	466a      	mov	r2, sp
 8002ea2:	f000 f8c5 	bl	8003030 <_fstat_r>
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	dbf1      	blt.n	8002e8e <__swhatbuf_r+0x12>
 8002eaa:	9a01      	ldr	r2, [sp, #4]
 8002eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002eb4:	425a      	negs	r2, r3
 8002eb6:	415a      	adcs	r2, r3
 8002eb8:	602a      	str	r2, [r5, #0]
 8002eba:	e7ee      	b.n	8002e9a <__swhatbuf_r+0x1e>
 8002ebc:	2340      	movs	r3, #64	; 0x40
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	b016      	add	sp, #88	; 0x58
 8002ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ec8 <__smakebuf_r>:
 8002ec8:	898b      	ldrh	r3, [r1, #12]
 8002eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ecc:	079d      	lsls	r5, r3, #30
 8002ece:	4606      	mov	r6, r0
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	d507      	bpl.n	8002ee4 <__smakebuf_r+0x1c>
 8002ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	6123      	str	r3, [r4, #16]
 8002edc:	2301      	movs	r3, #1
 8002ede:	6163      	str	r3, [r4, #20]
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	466a      	mov	r2, sp
 8002ee6:	ab01      	add	r3, sp, #4
 8002ee8:	f7ff ffc8 	bl	8002e7c <__swhatbuf_r>
 8002eec:	9900      	ldr	r1, [sp, #0]
 8002eee:	4605      	mov	r5, r0
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f7ff fa5b 	bl	80023ac <_malloc_r>
 8002ef6:	b948      	cbnz	r0, 8002f0c <__smakebuf_r+0x44>
 8002ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002efc:	059a      	lsls	r2, r3, #22
 8002efe:	d4ef      	bmi.n	8002ee0 <__smakebuf_r+0x18>
 8002f00:	f023 0303 	bic.w	r3, r3, #3
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	81a3      	strh	r3, [r4, #12]
 8002f0a:	e7e3      	b.n	8002ed4 <__smakebuf_r+0xc>
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <__smakebuf_r+0x7c>)
 8002f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	6020      	str	r0, [r4, #0]
 8002f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	9b00      	ldr	r3, [sp, #0]
 8002f1c:	6120      	str	r0, [r4, #16]
 8002f1e:	6163      	str	r3, [r4, #20]
 8002f20:	9b01      	ldr	r3, [sp, #4]
 8002f22:	b15b      	cbz	r3, 8002f3c <__smakebuf_r+0x74>
 8002f24:	4630      	mov	r0, r6
 8002f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f2a:	f000 f893 	bl	8003054 <_isatty_r>
 8002f2e:	b128      	cbz	r0, 8002f3c <__smakebuf_r+0x74>
 8002f30:	89a3      	ldrh	r3, [r4, #12]
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	89a0      	ldrh	r0, [r4, #12]
 8002f3e:	4305      	orrs	r5, r0
 8002f40:	81a5      	strh	r5, [r4, #12]
 8002f42:	e7cd      	b.n	8002ee0 <__smakebuf_r+0x18>
 8002f44:	080021c5 	.word	0x080021c5

08002f48 <memchr>:
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b510      	push	{r4, lr}
 8002f4c:	b2c9      	uxtb	r1, r1
 8002f4e:	4402      	add	r2, r0
 8002f50:	4293      	cmp	r3, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	d101      	bne.n	8002f5a <memchr+0x12>
 8002f56:	2000      	movs	r0, #0
 8002f58:	e003      	b.n	8002f62 <memchr+0x1a>
 8002f5a:	7804      	ldrb	r4, [r0, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	428c      	cmp	r4, r1
 8002f60:	d1f6      	bne.n	8002f50 <memchr+0x8>
 8002f62:	bd10      	pop	{r4, pc}

08002f64 <__malloc_lock>:
 8002f64:	4801      	ldr	r0, [pc, #4]	; (8002f6c <__malloc_lock+0x8>)
 8002f66:	f7ff b9ff 	b.w	8002368 <__retarget_lock_acquire_recursive>
 8002f6a:	bf00      	nop
 8002f6c:	20000100 	.word	0x20000100

08002f70 <__malloc_unlock>:
 8002f70:	4801      	ldr	r0, [pc, #4]	; (8002f78 <__malloc_unlock+0x8>)
 8002f72:	f7ff b9fa 	b.w	800236a <__retarget_lock_release_recursive>
 8002f76:	bf00      	nop
 8002f78:	20000100 	.word	0x20000100

08002f7c <_free_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	4605      	mov	r5, r0
 8002f80:	2900      	cmp	r1, #0
 8002f82:	d040      	beq.n	8003006 <_free_r+0x8a>
 8002f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f88:	1f0c      	subs	r4, r1, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bfb8      	it	lt
 8002f8e:	18e4      	addlt	r4, r4, r3
 8002f90:	f7ff ffe8 	bl	8002f64 <__malloc_lock>
 8002f94:	4a1c      	ldr	r2, [pc, #112]	; (8003008 <_free_r+0x8c>)
 8002f96:	6813      	ldr	r3, [r2, #0]
 8002f98:	b933      	cbnz	r3, 8002fa8 <_free_r+0x2c>
 8002f9a:	6063      	str	r3, [r4, #4]
 8002f9c:	6014      	str	r4, [r2, #0]
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa4:	f7ff bfe4 	b.w	8002f70 <__malloc_unlock>
 8002fa8:	42a3      	cmp	r3, r4
 8002faa:	d908      	bls.n	8002fbe <_free_r+0x42>
 8002fac:	6820      	ldr	r0, [r4, #0]
 8002fae:	1821      	adds	r1, r4, r0
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	bf01      	itttt	eq
 8002fb4:	6819      	ldreq	r1, [r3, #0]
 8002fb6:	685b      	ldreq	r3, [r3, #4]
 8002fb8:	1809      	addeq	r1, r1, r0
 8002fba:	6021      	streq	r1, [r4, #0]
 8002fbc:	e7ed      	b.n	8002f9a <_free_r+0x1e>
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	b10b      	cbz	r3, 8002fc8 <_free_r+0x4c>
 8002fc4:	42a3      	cmp	r3, r4
 8002fc6:	d9fa      	bls.n	8002fbe <_free_r+0x42>
 8002fc8:	6811      	ldr	r1, [r2, #0]
 8002fca:	1850      	adds	r0, r2, r1
 8002fcc:	42a0      	cmp	r0, r4
 8002fce:	d10b      	bne.n	8002fe8 <_free_r+0x6c>
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	4401      	add	r1, r0
 8002fd4:	1850      	adds	r0, r2, r1
 8002fd6:	4283      	cmp	r3, r0
 8002fd8:	6011      	str	r1, [r2, #0]
 8002fda:	d1e0      	bne.n	8002f9e <_free_r+0x22>
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4401      	add	r1, r0
 8002fe2:	6011      	str	r1, [r2, #0]
 8002fe4:	6053      	str	r3, [r2, #4]
 8002fe6:	e7da      	b.n	8002f9e <_free_r+0x22>
 8002fe8:	d902      	bls.n	8002ff0 <_free_r+0x74>
 8002fea:	230c      	movs	r3, #12
 8002fec:	602b      	str	r3, [r5, #0]
 8002fee:	e7d6      	b.n	8002f9e <_free_r+0x22>
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	1821      	adds	r1, r4, r0
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	bf01      	itttt	eq
 8002ff8:	6819      	ldreq	r1, [r3, #0]
 8002ffa:	685b      	ldreq	r3, [r3, #4]
 8002ffc:	1809      	addeq	r1, r1, r0
 8002ffe:	6021      	streq	r1, [r4, #0]
 8003000:	6063      	str	r3, [r4, #4]
 8003002:	6054      	str	r4, [r2, #4]
 8003004:	e7cb      	b.n	8002f9e <_free_r+0x22>
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	20000104 	.word	0x20000104

0800300c <_read_r>:
 800300c:	b538      	push	{r3, r4, r5, lr}
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	2200      	movs	r2, #0
 8003016:	4d05      	ldr	r5, [pc, #20]	; (800302c <_read_r+0x20>)
 8003018:	602a      	str	r2, [r5, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	f7fd fa75 	bl	800050a <_read>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d102      	bne.n	800302a <_read_r+0x1e>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	b103      	cbz	r3, 800302a <_read_r+0x1e>
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	2000010c 	.word	0x2000010c

08003030 <_fstat_r>:
 8003030:	b538      	push	{r3, r4, r5, lr}
 8003032:	2300      	movs	r3, #0
 8003034:	4d06      	ldr	r5, [pc, #24]	; (8003050 <_fstat_r+0x20>)
 8003036:	4604      	mov	r4, r0
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	f7fd faa8 	bl	8000592 <_fstat>
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	d102      	bne.n	800304c <_fstat_r+0x1c>
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	b103      	cbz	r3, 800304c <_fstat_r+0x1c>
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	bf00      	nop
 8003050:	2000010c 	.word	0x2000010c

08003054 <_isatty_r>:
 8003054:	b538      	push	{r3, r4, r5, lr}
 8003056:	2300      	movs	r3, #0
 8003058:	4d05      	ldr	r5, [pc, #20]	; (8003070 <_isatty_r+0x1c>)
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	602b      	str	r3, [r5, #0]
 8003060:	f7fd faa6 	bl	80005b0 <_isatty>
 8003064:	1c43      	adds	r3, r0, #1
 8003066:	d102      	bne.n	800306e <_isatty_r+0x1a>
 8003068:	682b      	ldr	r3, [r5, #0]
 800306a:	b103      	cbz	r3, 800306e <_isatty_r+0x1a>
 800306c:	6023      	str	r3, [r4, #0]
 800306e:	bd38      	pop	{r3, r4, r5, pc}
 8003070:	2000010c 	.word	0x2000010c

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	bf00      	nop
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	bf00      	nop
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
