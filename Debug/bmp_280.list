
bmp_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000349c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003680  08003680  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003680  08003680  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003680  08003680  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003684  08003684  00013684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000070  080036f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  080036f8  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000067e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001400  00000000  00000000  0002687b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  00027c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  000283e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177bf  00000000  00000000  00028ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000901c  00000000  00000000  0004026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083911  00000000  00000000  0004928b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccb9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000252c  00000000  00000000  000ccbec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003590 	.word	0x08003590

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003590 	.word	0x08003590

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb63 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f96d 	bl	8000434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f9d5 	bl	8000508 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f9a5 	bl	80004ac <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TrimRead();
 8000162:	f000 f81b 	bl	800019c <TrimRead>
  HAL_Delay(500);
 8000166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800016a:	f000 fbb9 	bl	80008e0 <HAL_Delay>
  int status_bmp =  BMP280_config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 800016e:	2304      	movs	r3, #4
 8000170:	9301      	str	r3, [sp, #4]
 8000172:	2300      	movs	r3, #0
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2303      	movs	r3, #3
 8000178:	2201      	movs	r2, #1
 800017a:	2105      	movs	r1, #5
 800017c:	2002      	movs	r0, #2
 800017e:	f000 f8b1 	bl	80002e4 <BMP280_config>
 8000182:	6078      	str	r0, [r7, #4]
  printf("Status is : %d \r \n ", status_bmp);
 8000184:	6879      	ldr	r1, [r7, #4]
 8000186:	4804      	ldr	r0, [pc, #16]	; (8000198 <main+0x4c>)
 8000188:	f002 fa6e 	bl	8002668 <iprintf>

  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(500);
 800018c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000190:	f000 fba6 	bl	80008e0 <HAL_Delay>
 8000194:	e7fa      	b.n	800018c <main+0x40>
 8000196:	bf00      	nop
 8000198:	080035a8 	.word	0x080035a8

0800019c <TrimRead>:



// USER functions
void TrimRead()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b08c      	sub	sp, #48	; 0x30
 80001a0:	af04      	add	r7, sp, #16
	uint8_t trimdata[25];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80001a2:	f04f 33ff 	mov.w	r3, #4294967295
 80001a6:	9302      	str	r3, [sp, #8]
 80001a8:	2319      	movs	r3, #25
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	2301      	movs	r3, #1
 80001b2:	2288      	movs	r2, #136	; 0x88
 80001b4:	21ec      	movs	r1, #236	; 0xec
 80001b6:	483d      	ldr	r0, [pc, #244]	; (80002ac <TrimRead+0x110>)
 80001b8:	f001 f85c 	bl	8001274 <HAL_I2C_Mem_Read>


	// Arrange the data as per the datasheet (page no. 21)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80001bc:	797b      	ldrb	r3, [r7, #5]
 80001be:	021b      	lsls	r3, r3, #8
 80001c0:	b21a      	sxth	r2, r3
 80001c2:	793b      	ldrb	r3, [r7, #4]
 80001c4:	b21b      	sxth	r3, r3
 80001c6:	4313      	orrs	r3, r2
 80001c8:	b21b      	sxth	r3, r3
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	4b38      	ldr	r3, [pc, #224]	; (80002b0 <TrimRead+0x114>)
 80001ce:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21a      	sxth	r2, r3
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	b21b      	sxth	r3, r3
 80001da:	4313      	orrs	r3, r2
 80001dc:	b21a      	sxth	r2, r3
 80001de:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <TrimRead+0x118>)
 80001e0:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80001e2:	7a7b      	ldrb	r3, [r7, #9]
 80001e4:	021b      	lsls	r3, r3, #8
 80001e6:	b21a      	sxth	r2, r3
 80001e8:	7a3b      	ldrb	r3, [r7, #8]
 80001ea:	b21b      	sxth	r3, r3
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b21a      	sxth	r2, r3
 80001f0:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <TrimRead+0x11c>)
 80001f2:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80001f4:	7afb      	ldrb	r3, [r7, #11]
 80001f6:	021b      	lsls	r3, r3, #8
 80001f8:	b21a      	sxth	r2, r3
 80001fa:	7a7b      	ldrb	r3, [r7, #9]
 80001fc:	b21b      	sxth	r3, r3
 80001fe:	4313      	orrs	r3, r2
 8000200:	b21b      	sxth	r3, r3
 8000202:	b29a      	uxth	r2, r3
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <TrimRead+0x120>)
 8000206:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8000208:	7b7b      	ldrb	r3, [r7, #13]
 800020a:	021b      	lsls	r3, r3, #8
 800020c:	b21a      	sxth	r2, r3
 800020e:	7abb      	ldrb	r3, [r7, #10]
 8000210:	b21b      	sxth	r3, r3
 8000212:	4313      	orrs	r3, r2
 8000214:	b21a      	sxth	r2, r3
 8000216:	4b2a      	ldr	r3, [pc, #168]	; (80002c0 <TrimRead+0x124>)
 8000218:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	021b      	lsls	r3, r3, #8
 800021e:	b21a      	sxth	r2, r3
 8000220:	7bbb      	ldrb	r3, [r7, #14]
 8000222:	b21b      	sxth	r3, r3
 8000224:	4313      	orrs	r3, r2
 8000226:	b21a      	sxth	r2, r3
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <TrimRead+0x128>)
 800022a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800022c:	7c7b      	ldrb	r3, [r7, #17]
 800022e:	021b      	lsls	r3, r3, #8
 8000230:	b21a      	sxth	r2, r3
 8000232:	7c3b      	ldrb	r3, [r7, #16]
 8000234:	b21b      	sxth	r3, r3
 8000236:	4313      	orrs	r3, r2
 8000238:	b21a      	sxth	r2, r3
 800023a:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <TrimRead+0x12c>)
 800023c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800023e:	7cfb      	ldrb	r3, [r7, #19]
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	b21a      	sxth	r2, r3
 8000244:	7cbb      	ldrb	r3, [r7, #18]
 8000246:	b21b      	sxth	r3, r3
 8000248:	4313      	orrs	r3, r2
 800024a:	b21a      	sxth	r2, r3
 800024c:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <TrimRead+0x130>)
 800024e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8000250:	7d7b      	ldrb	r3, [r7, #21]
 8000252:	021b      	lsls	r3, r3, #8
 8000254:	b21a      	sxth	r2, r3
 8000256:	7d3b      	ldrb	r3, [r7, #20]
 8000258:	b21b      	sxth	r3, r3
 800025a:	4313      	orrs	r3, r2
 800025c:	b21a      	sxth	r2, r3
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <TrimRead+0x134>)
 8000260:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8000262:	7dfb      	ldrb	r3, [r7, #23]
 8000264:	021b      	lsls	r3, r3, #8
 8000266:	b21a      	sxth	r2, r3
 8000268:	7dbb      	ldrb	r3, [r7, #22]
 800026a:	b21b      	sxth	r3, r3
 800026c:	4313      	orrs	r3, r2
 800026e:	b21a      	sxth	r2, r3
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <TrimRead+0x138>)
 8000272:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8000274:	7e7b      	ldrb	r3, [r7, #25]
 8000276:	021b      	lsls	r3, r3, #8
 8000278:	b21a      	sxth	r2, r3
 800027a:	7e3b      	ldrb	r3, [r7, #24]
 800027c:	b21b      	sxth	r3, r3
 800027e:	4313      	orrs	r3, r2
 8000280:	b21a      	sxth	r2, r3
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <TrimRead+0x13c>)
 8000284:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8000286:	7efb      	ldrb	r3, [r7, #27]
 8000288:	021b      	lsls	r3, r3, #8
 800028a:	b21a      	sxth	r2, r3
 800028c:	7ebb      	ldrb	r3, [r7, #26]
 800028e:	b21b      	sxth	r3, r3
 8000290:	4313      	orrs	r3, r2
 8000292:	b21a      	sxth	r2, r3
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <TrimRead+0x140>)
 8000296:	801a      	strh	r2, [r3, #0]

	printf("%s ",trimdata); // DEBUG ONLY
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4619      	mov	r1, r3
 800029c:	4810      	ldr	r0, [pc, #64]	; (80002e0 <TrimRead+0x144>)
 800029e:	f002 f9e3 	bl	8002668 <iprintf>

}
 80002a2:	bf00      	nop
 80002a4:	3720      	adds	r7, #32
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000008c 	.word	0x2000008c
 80002b0:	200000e0 	.word	0x200000e0
 80002b4:	200000e4 	.word	0x200000e4
 80002b8:	200000e6 	.word	0x200000e6
 80002bc:	200000e2 	.word	0x200000e2
 80002c0:	200000e8 	.word	0x200000e8
 80002c4:	200000ea 	.word	0x200000ea
 80002c8:	200000ec 	.word	0x200000ec
 80002cc:	200000ee 	.word	0x200000ee
 80002d0:	200000f0 	.word	0x200000f0
 80002d4:	200000f2 	.word	0x200000f2
 80002d8:	200000f4 	.word	0x200000f4
 80002dc:	200000f6 	.word	0x200000f6
 80002e0:	080035bc 	.word	0x080035bc

080002e4 <BMP280_config>:

int BMP280_config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af04      	add	r7, sp, #16
 80002ea:	4604      	mov	r4, r0
 80002ec:	4608      	mov	r0, r1
 80002ee:	4611      	mov	r1, r2
 80002f0:	461a      	mov	r2, r3
 80002f2:	4623      	mov	r3, r4
 80002f4:	71fb      	strb	r3, [r7, #7]
 80002f6:	4603      	mov	r3, r0
 80002f8:	71bb      	strb	r3, [r7, #6]
 80002fa:	460b      	mov	r3, r1
 80002fc:	717b      	strb	r3, [r7, #5]
 80002fe:	4613      	mov	r3, r2
 8000300:	713b      	strb	r3, [r7, #4]
	uint8_t data_to_write = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	73fb      	strb	r3, [r7, #15]
	uint8_t data_check = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	73bb      	strb	r3, [r7, #14]



	// reset the device
	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, RESET_REG, 1, (uint8_t *) 0xB6, 1, 1000) != HAL_OK)
 800030a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800030e:	9302      	str	r3, [sp, #8]
 8000310:	2301      	movs	r3, #1
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	23b6      	movs	r3, #182	; 0xb6
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2301      	movs	r3, #1
 800031a:	22e0      	movs	r2, #224	; 0xe0
 800031c:	21ec      	movs	r1, #236	; 0xec
 800031e:	4844      	ldr	r0, [pc, #272]	; (8000430 <BMP280_config+0x14c>)
 8000320:	f000 feae 	bl	8001080 <HAL_I2C_Mem_Write>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d002      	beq.n	8000330 <BMP280_config+0x4c>
	{
		return -1;
 800032a:	f04f 33ff 	mov.w	r3, #4294967295
 800032e:	e07b      	b.n	8000428 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f000 fad5 	bl	80008e0 <HAL_Delay>

	// set standby and filter IIR
	data_to_write = (t_sb << 5) | (filter << 2);
 8000336:	f897 3020 	ldrb.w	r3, [r7, #32]
 800033a:	015b      	lsls	r3, r3, #5
 800033c:	b25a      	sxtb	r2, r3
 800033e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	b25b      	sxtb	r3, r3
 8000346:	4313      	orrs	r3, r2
 8000348:	b25b      	sxtb	r3, r3
 800034a:	b2db      	uxtb	r3, r3
 800034c:	73fb      	strb	r3, [r7, #15]

	if ( HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_to_write , 1, 1000) != HAL_OK)
 800034e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000352:	9302      	str	r3, [sp, #8]
 8000354:	2301      	movs	r3, #1
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	f107 030f 	add.w	r3, r7, #15
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2301      	movs	r3, #1
 8000360:	22f5      	movs	r2, #245	; 0xf5
 8000362:	21ec      	movs	r1, #236	; 0xec
 8000364:	4832      	ldr	r0, [pc, #200]	; (8000430 <BMP280_config+0x14c>)
 8000366:	f000 fe8b 	bl	8001080 <HAL_I2C_Mem_Write>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d002      	beq.n	8000376 <BMP280_config+0x92>
	{
		return -1;
 8000370:	f04f 33ff 	mov.w	r3, #4294967295
 8000374:	e058      	b.n	8000428 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 8000376:	2064      	movs	r0, #100	; 0x64
 8000378:	f000 fab2 	bl	80008e0 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CONFIG_REG, 1,&data_check , 1, 1000);
 800037c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000380:	9302      	str	r3, [sp, #8]
 8000382:	2301      	movs	r3, #1
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	f107 030e 	add.w	r3, r7, #14
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2301      	movs	r3, #1
 800038e:	22f5      	movs	r2, #245	; 0xf5
 8000390:	21ec      	movs	r1, #236	; 0xec
 8000392:	4827      	ldr	r0, [pc, #156]	; (8000430 <BMP280_config+0x14c>)
 8000394:	f000 ff6e 	bl	8001274 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 8000398:	7bba      	ldrb	r2, [r7, #14]
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	429a      	cmp	r2, r3
 800039e:	d002      	beq.n	80003a6 <BMP280_config+0xc2>
	{
		return -1;
 80003a0:	f04f 33ff 	mov.w	r3, #4294967295
 80003a4:	e040      	b.n	8000428 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 80003a6:	2064      	movs	r0, #100	; 0x64
 80003a8:	f000 fa9a 	bl	80008e0 <HAL_Delay>


	// oversampling config for temp and pressure
	data_to_write = (osrs_t << 5) | (osrs_p << 2) | mode;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	015b      	lsls	r3, r3, #5
 80003b0:	b25a      	sxtb	r2, r3
 80003b2:	79bb      	ldrb	r3, [r7, #6]
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	b25b      	sxtb	r3, r3
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b25a      	sxtb	r2, r3
 80003bc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b25b      	sxtb	r3, r3
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_to_write, 1, 1000) != HAL_OK)
 80003c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003cc:	9302      	str	r3, [sp, #8]
 80003ce:	2301      	movs	r3, #1
 80003d0:	9301      	str	r3, [sp, #4]
 80003d2:	f107 030f 	add.w	r3, r7, #15
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2301      	movs	r3, #1
 80003da:	22f4      	movs	r2, #244	; 0xf4
 80003dc:	21ec      	movs	r1, #236	; 0xec
 80003de:	4814      	ldr	r0, [pc, #80]	; (8000430 <BMP280_config+0x14c>)
 80003e0:	f000 fe4e 	bl	8001080 <HAL_I2C_Mem_Write>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <BMP280_config+0x10c>
	{
		return -1;
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
 80003ee:	e01b      	b.n	8000428 <BMP280_config+0x144>
	}

	HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f000 fa75 	bl	80008e0 <HAL_Delay>

	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDRESS, CTRL_MEAS_REG, 1, &data_check , 1, 1000);
 80003f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003fa:	9302      	str	r3, [sp, #8]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	f107 030e 	add.w	r3, r7, #14
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2301      	movs	r3, #1
 8000408:	22f4      	movs	r2, #244	; 0xf4
 800040a:	21ec      	movs	r1, #236	; 0xec
 800040c:	4808      	ldr	r0, [pc, #32]	; (8000430 <BMP280_config+0x14c>)
 800040e:	f000 ff31 	bl	8001274 <HAL_I2C_Mem_Read>
	if (data_check != data_to_write)
 8000412:	7bba      	ldrb	r2, [r7, #14]
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	429a      	cmp	r2, r3
 8000418:	d002      	beq.n	8000420 <BMP280_config+0x13c>
	{
		return -1;
 800041a:	f04f 33ff 	mov.w	r3, #4294967295
 800041e:	e003      	b.n	8000428 <BMP280_config+0x144>
	}
	HAL_Delay(100);
 8000420:	2064      	movs	r0, #100	; 0x64
 8000422:	f000 fa5d 	bl	80008e0 <HAL_Delay>


	return 1;
 8000426:	2301      	movs	r3, #1
}
 8000428:	4618      	mov	r0, r3
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bd90      	pop	{r4, r7, pc}
 8000430:	2000008c 	.word	0x2000008c

08000434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b090      	sub	sp, #64	; 0x40
 8000438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043a:	f107 0318 	add.w	r3, r7, #24
 800043e:	2228      	movs	r2, #40	; 0x28
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f002 f908 	bl	8002658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
 8000454:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000456:	2302      	movs	r3, #2
 8000458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045a:	2301      	movs	r3, #1
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045e:	2310      	movs	r3, #16
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000462:	2300      	movs	r3, #0
 8000464:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0318 	add.w	r3, r7, #24
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fcc4 	bl	8001df8 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000476:	f000 f869 	bl	800054c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800047e:	2300      	movs	r3, #0
 8000480:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f001 ff32 	bl	80022fc <HAL_RCC_ClockConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800049e:	f000 f855 	bl	800054c <Error_Handler>
  }
}
 80004a2:	bf00      	nop
 80004a4:	3740      	adds	r7, #64	; 0x40
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
	...

080004ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <MX_I2C1_Init+0x50>)
 80004b2:	4a13      	ldr	r2, [pc, #76]	; (8000500 <MX_I2C1_Init+0x54>)
 80004b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004b6:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_I2C1_Init+0x50>)
 80004b8:	4a12      	ldr	r2, [pc, #72]	; (8000504 <MX_I2C1_Init+0x58>)
 80004ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <MX_I2C1_Init+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_I2C1_Init+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_I2C1_Init+0x50>)
 80004ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <MX_I2C1_Init+0x50>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_I2C1_Init+0x50>)
 80004d8:	2200      	movs	r2, #0
 80004da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <MX_I2C1_Init+0x50>)
 80004de:	2200      	movs	r2, #0
 80004e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_I2C1_Init+0x50>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <MX_I2C1_Init+0x50>)
 80004ea:	f000 fc85 	bl	8000df8 <HAL_I2C_Init>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d001      	beq.n	80004f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f4:	f000 f82a 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	40005400 	.word	0x40005400
 8000504:	000186a0 	.word	0x000186a0

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_GPIO_Init+0x40>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <MX_GPIO_Init+0x40>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_GPIO_Init+0x40>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <MX_GPIO_Init+0x40>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a07      	ldr	r2, [pc, #28]	; (8000548 <MX_GPIO_Init+0x40>)
 800052c:	f043 0308 	orr.w	r3, r3, #8
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MX_GPIO_Init+0x40>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0308 	and.w	r3, r3, #8
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_I2C_MspInit+0x70>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d123      	bne.n	8000624 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_I2C_MspInit+0x74>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_I2C_MspInit+0x74>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_I2C_MspInit+0x74>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0308 	and.w	r3, r3, #8
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005f4:	23c0      	movs	r3, #192	; 0xc0
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f8:	2312      	movs	r3, #18
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <HAL_I2C_MspInit+0x78>)
 8000608:	f000 fa72 	bl	8000af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_I2C_MspInit+0x74>)
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_I2C_MspInit+0x74>)
 8000612:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000616:	61d3      	str	r3, [r2, #28]
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_I2C_MspInit+0x74>)
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40005400 	.word	0x40005400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010c00 	.word	0x40010c00

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f913 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}

08000686 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	e00a      	b.n	80006ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000698:	f3af 8000 	nop.w
 800069c:	4601      	mov	r1, r0
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	60ba      	str	r2, [r7, #8]
 80006a4:	b2ca      	uxtb	r2, r1
 80006a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	3301      	adds	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	dbf0      	blt.n	8000698 <_read+0x12>
	}

return len;
 80006b6:	687b      	ldr	r3, [r7, #4]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	e009      	b.n	80006e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	60ba      	str	r2, [r7, #8]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	3301      	adds	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	dbf1      	blt.n	80006d2 <_write+0x12>
	}
	return len;
 80006ee:	687b      	ldr	r3, [r7, #4]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_close>:

int _close(int file)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	return -1;
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000704:	4618      	mov	r0, r3
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800071e:	605a      	str	r2, [r3, #4]
	return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <_isatty>:

int _isatty(int file)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	return 1;
 8000734:	2301      	movs	r3, #1
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
	return 0;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b086      	sub	sp, #24
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000760:	4a14      	ldr	r2, [pc, #80]	; (80007b4 <_sbrk+0x5c>)
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <_sbrk+0x60>)
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d102      	bne.n	800077a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <_sbrk+0x64>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <_sbrk+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	429a      	cmp	r2, r3
 8000786:	d207      	bcs.n	8000798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000788:	f001 ff3c 	bl	8002604 <__errno>
 800078c:	4603      	mov	r3, r0
 800078e:	220c      	movs	r2, #12
 8000790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	e009      	b.n	80007ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <_sbrk+0x64>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <_sbrk+0x64>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4413      	add	r3, r2
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <_sbrk+0x64>)
 80007a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20005000 	.word	0x20005000
 80007b8:	00000400 	.word	0x00000400
 80007bc:	200000f8 	.word	0x200000f8
 80007c0:	20000110 	.word	0x20000110

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ffe5 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f001 ff09 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fca5 	bl	800014c <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800080c:	08003688 	.word	0x08003688
  ldr r2, =_sbss
 8000810:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000814:	20000110 	.word	0x20000110

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f92b 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff fe8e 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f935 	bl	8000ad6 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 f90b 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000000 	.word	0x20000000
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000004 	.word	0x20000004

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000008 	.word	0x20000008
 80008c8:	200000fc 	.word	0x200000fc

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	200000fc 	.word	0x200000fc

080008e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008e8:	f7ff fff0 	bl	80008cc <HAL_GetTick>
 80008ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f8:	d005      	beq.n	8000906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_Delay+0x44>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000906:	bf00      	nop
 8000908:	f7ff ffe0 	bl	80008cc <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f7      	bhi.n	8000908 <HAL_Delay+0x28>
  {
  }
}
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008

08000928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000944:	4013      	ands	r3, r2
 8000946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <__NVIC_SetPriorityGrouping+0x44>)
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	60d3      	str	r3, [r2, #12]
}
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <__NVIC_GetPriorityGrouping+0x18>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	0a1b      	lsrs	r3, r3, #8
 800097a:	f003 0307 	and.w	r3, r3, #7
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f7ff ff90 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff49 	bl	8000928 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff5e 	bl	8000970 <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff90 	bl	80009e0 <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5f 	bl	800098c <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ffb0 	bl	8000a44 <SysTick_Config>
 8000ae4:	4603      	mov	r3, r0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b08b      	sub	sp, #44	; 0x2c
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	e169      	b.n	8000dd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b04:	2201      	movs	r2, #1
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	69fa      	ldr	r2, [r7, #28]
 8000b14:	4013      	ands	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f040 8158 	bne.w	8000dd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a9a      	ldr	r2, [pc, #616]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d05e      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b2c:	4a98      	ldr	r2, [pc, #608]	; (8000d90 <HAL_GPIO_Init+0x2a0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d875      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b32:	4a98      	ldr	r2, [pc, #608]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d058      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b38:	4a96      	ldr	r2, [pc, #600]	; (8000d94 <HAL_GPIO_Init+0x2a4>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d86f      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b3e:	4a96      	ldr	r2, [pc, #600]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d052      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b44:	4a94      	ldr	r2, [pc, #592]	; (8000d98 <HAL_GPIO_Init+0x2a8>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d869      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b4a:	4a94      	ldr	r2, [pc, #592]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d04c      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b50:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <HAL_GPIO_Init+0x2ac>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d863      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b56:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d046      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
 8000b5c:	4a90      	ldr	r2, [pc, #576]	; (8000da0 <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d85d      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b62:	2b12      	cmp	r3, #18
 8000b64:	d82a      	bhi.n	8000bbc <HAL_GPIO_Init+0xcc>
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d859      	bhi.n	8000c1e <HAL_GPIO_Init+0x12e>
 8000b6a:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <HAL_GPIO_Init+0x80>)
 8000b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b70:	08000beb 	.word	0x08000beb
 8000b74:	08000bc5 	.word	0x08000bc5
 8000b78:	08000bd7 	.word	0x08000bd7
 8000b7c:	08000c19 	.word	0x08000c19
 8000b80:	08000c1f 	.word	0x08000c1f
 8000b84:	08000c1f 	.word	0x08000c1f
 8000b88:	08000c1f 	.word	0x08000c1f
 8000b8c:	08000c1f 	.word	0x08000c1f
 8000b90:	08000c1f 	.word	0x08000c1f
 8000b94:	08000c1f 	.word	0x08000c1f
 8000b98:	08000c1f 	.word	0x08000c1f
 8000b9c:	08000c1f 	.word	0x08000c1f
 8000ba0:	08000c1f 	.word	0x08000c1f
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000c1f 	.word	0x08000c1f
 8000bac:	08000c1f 	.word	0x08000c1f
 8000bb0:	08000c1f 	.word	0x08000c1f
 8000bb4:	08000bcd 	.word	0x08000bcd
 8000bb8:	08000be1 	.word	0x08000be1
 8000bbc:	4a79      	ldr	r2, [pc, #484]	; (8000da4 <HAL_GPIO_Init+0x2b4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d013      	beq.n	8000bea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc2:	e02c      	b.n	8000c1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	623b      	str	r3, [r7, #32]
          break;
 8000bca:	e029      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	623b      	str	r3, [r7, #32]
          break;
 8000bd4:	e024      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	3308      	adds	r3, #8
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e01f      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	330c      	adds	r3, #12
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e01a      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d102      	bne.n	8000bf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	623b      	str	r3, [r7, #32]
          break;
 8000bf6:	e013      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d105      	bne.n	8000c0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c00:	2308      	movs	r3, #8
 8000c02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	611a      	str	r2, [r3, #16]
          break;
 8000c0a:	e009      	b.n	8000c20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c0c:	2308      	movs	r3, #8
 8000c0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	615a      	str	r2, [r3, #20]
          break;
 8000c16:	e003      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x130>
          break;
 8000c1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	; 0xff
 8000c24:	d801      	bhi.n	8000c2a <HAL_GPIO_Init+0x13a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	e001      	b.n	8000c2e <HAL_GPIO_Init+0x13e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	2bff      	cmp	r3, #255	; 0xff
 8000c34:	d802      	bhi.n	8000c3c <HAL_GPIO_Init+0x14c>
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x152>
 8000c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3e:	3b08      	subs	r3, #8
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	210f      	movs	r1, #15
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	6a39      	ldr	r1, [r7, #32]
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80b1 	beq.w	8000dd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c70:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a4c      	ldr	r2, [pc, #304]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_GPIO_Init+0x2b8>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c88:	4a48      	ldr	r2, [pc, #288]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	089b      	lsrs	r3, r3, #2
 8000c8e:	3302      	adds	r3, #2
 8000c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	f003 0303 	and.w	r3, r3, #3
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a40      	ldr	r2, [pc, #256]	; (8000db0 <HAL_GPIO_Init+0x2c0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d013      	beq.n	8000cdc <HAL_GPIO_Init+0x1ec>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3f      	ldr	r2, [pc, #252]	; (8000db4 <HAL_GPIO_Init+0x2c4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d00d      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e8>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3e      	ldr	r2, [pc, #248]	; (8000db8 <HAL_GPIO_Init+0x2c8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d007      	beq.n	8000cd4 <HAL_GPIO_Init+0x1e4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_GPIO_Init+0x2cc>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d101      	bne.n	8000cd0 <HAL_GPIO_Init+0x1e0>
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e006      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	e004      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e002      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <HAL_GPIO_Init+0x1ee>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	f002 0203 	and.w	r2, r2, #3
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	4093      	lsls	r3, r2
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cee:	492f      	ldr	r1, [pc, #188]	; (8000dac <HAL_GPIO_Init+0x2bc>)
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	492c      	ldr	r1, [pc, #176]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	600b      	str	r3, [r1, #0]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	4928      	ldr	r1, [pc, #160]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4922      	ldr	r1, [pc, #136]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3e:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	4918      	ldr	r1, [pc, #96]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	608b      	str	r3, [r1, #8]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4914      	ldr	r1, [pc, #80]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d021      	beq.n	8000dc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60cb      	str	r3, [r1, #12]
 8000d8c:	e021      	b.n	8000dd2 <HAL_GPIO_Init+0x2e2>
 8000d8e:	bf00      	nop
 8000d90:	10320000 	.word	0x10320000
 8000d94:	10310000 	.word	0x10310000
 8000d98:	10220000 	.word	0x10220000
 8000d9c:	10210000 	.word	0x10210000
 8000da0:	10120000 	.word	0x10120000
 8000da4:	10110000 	.word	0x10110000
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40011400 	.word	0x40011400
 8000dc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	4909      	ldr	r1, [pc, #36]	; (8000df4 <HAL_GPIO_Init+0x304>)
 8000dce:	4013      	ands	r3, r2
 8000dd0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	fa22 f303 	lsr.w	r3, r2, r3
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f47f ae8e 	bne.w	8000b04 <HAL_GPIO_Init+0x14>
  }
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	372c      	adds	r7, #44	; 0x2c
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40010400 	.word	0x40010400

08000df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e12b      	b.n	8001062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fbcc 	bl	80005bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	; 0x24
 8000e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 fba0 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4a81      	ldr	r2, [pc, #516]	; (800106c <HAL_I2C_Init+0x274>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d807      	bhi.n	8000e7c <HAL_I2C_Init+0x84>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4a80      	ldr	r2, [pc, #512]	; (8001070 <HAL_I2C_Init+0x278>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bf94      	ite	ls
 8000e74:	2301      	movls	r3, #1
 8000e76:	2300      	movhi	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	e006      	b.n	8000e8a <HAL_I2C_Init+0x92>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a7d      	ldr	r2, [pc, #500]	; (8001074 <HAL_I2C_Init+0x27c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	bf94      	ite	ls
 8000e84:	2301      	movls	r3, #1
 8000e86:	2300      	movhi	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0e7      	b.n	8001062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4a78      	ldr	r2, [pc, #480]	; (8001078 <HAL_I2C_Init+0x280>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	0c9b      	lsrs	r3, r3, #18
 8000e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a6a      	ldr	r2, [pc, #424]	; (800106c <HAL_I2C_Init+0x274>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d802      	bhi.n	8000ecc <HAL_I2C_Init+0xd4>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	e009      	b.n	8000ee0 <HAL_I2C_Init+0xe8>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	4a69      	ldr	r2, [pc, #420]	; (800107c <HAL_I2C_Init+0x284>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	3301      	adds	r3, #1
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ef2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	495c      	ldr	r1, [pc, #368]	; (800106c <HAL_I2C_Init+0x274>)
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d819      	bhi.n	8000f34 <HAL_I2C_Init+0x13c>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0e:	1c59      	adds	r1, r3, #1
 8000f10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <HAL_I2C_Init+0x138>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1e59      	subs	r1, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2e:	e051      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e04f      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <HAL_I2C_Init+0x168>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1e58      	subs	r0, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6859      	ldr	r1, [r3, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	440b      	add	r3, r1
 8000f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	e012      	b.n	8000f86 <HAL_I2C_Init+0x18e>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	0099      	lsls	r1, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_Init+0x196>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e022      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10e      	bne.n	8000fb4 <HAL_I2C_Init+0x1bc>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1e58      	subs	r0, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	440b      	add	r3, r1
 8000fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fb2:	e00f      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	0099      	lsls	r1, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	6809      	ldr	r1, [r1, #0]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6911      	ldr	r1, [r2, #16]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68d2      	ldr	r2, [r2, #12]
 800100e:	4311      	orrs	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	430b      	orrs	r3, r1
 8001016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	000186a0 	.word	0x000186a0
 8001070:	001e847f 	.word	0x001e847f
 8001074:	003d08ff 	.word	0x003d08ff
 8001078:	431bde83 	.word	0x431bde83
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	817b      	strh	r3, [r7, #10]
 8001092:	460b      	mov	r3, r1
 8001094:	813b      	strh	r3, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800109a:	f7ff fc17 	bl	80008cc <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b20      	cmp	r3, #32
 80010aa:	f040 80d9 	bne.w	8001260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2319      	movs	r3, #25
 80010b4:	2201      	movs	r2, #1
 80010b6:	496d      	ldr	r1, [pc, #436]	; (800126c <HAL_I2C_Mem_Write+0x1ec>)
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 fcc1 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80010c4:	2302      	movs	r3, #2
 80010c6:	e0cc      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_I2C_Mem_Write+0x56>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0c5      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d007      	beq.n	80010fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800110a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2221      	movs	r2, #33	; 0x21
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2240      	movs	r2, #64	; 0x40
 8001118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800112c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_I2C_Mem_Write+0x1f0>)
 800113c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800113e:	88f8      	ldrh	r0, [r7, #6]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	8979      	ldrh	r1, [r7, #10]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4603      	mov	r3, r0
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 faf8 	bl	8001744 <I2C_RequestMemoryWrite>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d052      	beq.n	8001200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e081      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fd42 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d11b      	bne.n	8001200 <HAL_I2C_Mem_Write+0x180>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d017      	beq.n	8001200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1aa      	bne.n	800115e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fd2e 	bl	8001c6e <I2C_WaitOnBTFFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	2b04      	cmp	r3, #4
 800121e:	d107      	bne.n	8001230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800122e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e016      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2220      	movs	r2, #32
 8001248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001260:	2302      	movs	r3, #2
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	00100002 	.word	0x00100002
 8001270:	ffff0000 	.word	0xffff0000

08001274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	817b      	strh	r3, [r7, #10]
 8001286:	460b      	mov	r3, r1
 8001288:	813b      	strh	r3, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001292:	f7ff fb1b 	bl	80008cc <HAL_GetTick>
 8001296:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	f040 8244 	bne.w	800172e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2319      	movs	r3, #25
 80012ac:	2201      	movs	r2, #1
 80012ae:	4982      	ldr	r1, [pc, #520]	; (80014b8 <HAL_I2C_Mem_Read+0x244>)
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 fbc5 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80012bc:	2302      	movs	r3, #2
 80012be:	e237      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_I2C_Mem_Read+0x5a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e230      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2222      	movs	r2, #34	; 0x22
 8001308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29a      	uxth	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a62      	ldr	r2, [pc, #392]	; (80014bc <HAL_I2C_Mem_Read+0x248>)
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001336:	88f8      	ldrh	r0, [r7, #6]
 8001338:	893a      	ldrh	r2, [r7, #8]
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fa92 	bl	8001870 <I2C_RequestMemoryRead>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1ec      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	d113      	bne.n	8001386 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e1c0      	b.n	8001708 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11e      	bne.n	80013cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800139c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800139e:	b672      	cpsid	i
}
 80013a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c8:	b662      	cpsie	i
}
 80013ca:	e035      	b.n	8001438 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d11e      	bne.n	8001412 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800140c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800140e:	b662      	cpsie	i
}
 8001410:	e012      	b.n	8001438 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001420:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001438:	e166      	b.n	8001708 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143e:	2b03      	cmp	r3, #3
 8001440:	f200 811f 	bhi.w	8001682 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001448:	2b01      	cmp	r3, #1
 800144a:	d123      	bne.n	8001494 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 fc4d 	bl	8001cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e167      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001492:	e139      	b.n	8001708 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001498:	2b02      	cmp	r3, #2
 800149a:	d152      	bne.n	8001542 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a2:	2200      	movs	r2, #0
 80014a4:	4906      	ldr	r1, [pc, #24]	; (80014c0 <HAL_I2C_Mem_Read+0x24c>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 faca 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e13c      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
 80014b6:	bf00      	nop
 80014b8:	00100002 	.word	0x00100002
 80014bc:	ffff0000 	.word	0xffff0000
 80014c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800150a:	b662      	cpsie	i
}
 800150c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001540:	e0e2      	b.n	8001708 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001548:	2200      	movs	r2, #0
 800154a:	497b      	ldr	r1, [pc, #492]	; (8001738 <HAL_I2C_Mem_Read+0x4c4>)
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fa77 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0e9      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800156a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_I2C_Mem_Read+0x4c8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	4a65      	ldr	r2, [pc, #404]	; (8001740 <HAL_I2C_Mem_Read+0x4cc>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0a1a      	lsrs	r2, r3, #8
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00da      	lsls	r2, r3, #3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	3b01      	subs	r3, #1
 80015c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d118      	bne.n	80015fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f043 0220 	orr.w	r2, r3, #32
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015ea:	b662      	cpsie	i
}
 80015ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e09a      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d1d9      	bne.n	80015bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800164a:	b662      	cpsie	i
}
 800164c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001680:	e042      	b.n	8001708 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 fb32 	bl	8001cf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e04c      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d118      	bne.n	8001708 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f2:	3b01      	subs	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	f47f ae94 	bne.w	800143a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800172a:	2300      	movs	r3, #0
 800172c:	e000      	b.n	8001730 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800172e:	2302      	movs	r3, #2
  }
}
 8001730:	4618      	mov	r0, r3
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	00010004 	.word	0x00010004
 800173c:	20000000 	.word	0x20000000
 8001740:	14f8b589 	.word	0x14f8b589

08001744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800176c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	2200      	movs	r2, #0
 8001776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f960 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001794:	d103      	bne.n	800179e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e05f      	b.n	8001862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017a2:	897b      	ldrh	r3, [r7, #10]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	6a3a      	ldr	r2, [r7, #32]
 80017b6:	492d      	ldr	r1, [pc, #180]	; (800186c <I2C_RequestMemoryWrite+0x128>)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f998 	bl	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e04c      	b.n	8001862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	6a39      	ldr	r1, [r7, #32]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa02 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00d      	beq.n	800180a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d107      	bne.n	8001806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e02b      	b.n	8001862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001810:	893b      	ldrh	r3, [r7, #8]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	611a      	str	r2, [r3, #16]
 800181a:	e021      	b.n	8001860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800181c:	893b      	ldrh	r3, [r7, #8]
 800181e:	0a1b      	lsrs	r3, r3, #8
 8001820:	b29b      	uxth	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	6a39      	ldr	r1, [r7, #32]
 800182e:	68f8      	ldr	r0, [r7, #12]
 8001830:	f000 f9dc 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00d      	beq.n	8001856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	2b04      	cmp	r3, #4
 8001840:	d107      	bne.n	8001852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e005      	b.n	8001862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001856:	893b      	ldrh	r3, [r7, #8]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	00010002 	.word	0x00010002

08001870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af02      	add	r7, sp, #8
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	4608      	mov	r0, r1
 800187a:	4611      	mov	r1, r2
 800187c:	461a      	mov	r2, r3
 800187e:	4603      	mov	r3, r0
 8001880:	817b      	strh	r3, [r7, #10]
 8001882:	460b      	mov	r3, r1
 8001884:	813b      	strh	r3, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f8c2 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018d0:	d103      	bne.n	80018da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0aa      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	6a3a      	ldr	r2, [r7, #32]
 80018f2:	4952      	ldr	r1, [pc, #328]	; (8001a3c <I2C_RequestMemoryRead+0x1cc>)
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f8fa 	bl	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e097      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f964 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00d      	beq.n	8001946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	2b04      	cmp	r3, #4
 8001930:	d107      	bne.n	8001942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e076      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800194c:	893b      	ldrh	r3, [r7, #8]
 800194e:	b2da      	uxtb	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	e021      	b.n	800199c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001958:	893b      	ldrh	r3, [r7, #8]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	b29b      	uxth	r3, r3
 800195e:	b2da      	uxtb	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f93e 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	2b04      	cmp	r3, #4
 800197c:	d107      	bne.n	800198e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800198c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e050      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001992:	893b      	ldrh	r3, [r7, #8]
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800199c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199e:	6a39      	ldr	r1, [r7, #32]
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f000 f923 	bl	8001bec <I2C_WaitOnTXEFlagUntilTimeout>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00d      	beq.n	80019c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d107      	bne.n	80019c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e035      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2200      	movs	r2, #0
 80019e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f82b 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00d      	beq.n	8001a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fe:	d103      	bne.n	8001a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e013      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a0c:	897b      	ldrh	r3, [r7, #10]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	6a3a      	ldr	r2, [r7, #32]
 8001a20:	4906      	ldr	r1, [pc, #24]	; (8001a3c <I2C_RequestMemoryRead+0x1cc>)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f863 	bl	8001aee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	00010002 	.word	0x00010002

08001a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a50:	e025      	b.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d021      	beq.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5a:	f7fe ff37 	bl	80008cc <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d302      	bcc.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d116      	bne.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e023      	b.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10d      	bne.n	8001ac4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	e00c      	b.n	8001ade <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d0b6      	beq.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001afc:	e051      	b.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0c:	d123      	bne.n	8001b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f043 0204 	orr.w	r2, r3, #4
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e046      	b.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d021      	beq.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5e:	f7fe feb5 	bl	80008cc <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d302      	bcc.n	8001b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d116      	bne.n	8001ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f043 0220 	orr.w	r2, r3, #32
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e020      	b.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10c      	bne.n	8001bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	e00b      	b.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d18d      	bne.n	8001afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf8:	e02d      	b.n	8001c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f8ce 	bl	8001d9c <I2C_IsAcknowledgeFailed>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02d      	b.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d021      	beq.n	8001c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7fe fe5b 	bl	80008cc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d116      	bne.n	8001c56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f043 0220 	orr.w	r2, r3, #32
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e007      	b.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d1ca      	bne.n	8001bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c7a:	e02d      	b.n	8001cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f88d 	bl	8001d9c <I2C_IsAcknowledgeFailed>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e02d      	b.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d021      	beq.n	8001cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c94:	f7fe fe1a 	bl	80008cc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d302      	bcc.n	8001caa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f043 0220 	orr.w	r2, r3, #32
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e007      	b.n	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	d1ca      	bne.n	8001c7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cfc:	e042      	b.n	8001d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f003 0310 	and.w	r3, r3, #16
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d119      	bne.n	8001d40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0210 	mvn.w	r2, #16
 8001d14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e029      	b.n	8001d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d40:	f7fe fdc4 	bl	80008cc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d302      	bcc.n	8001d56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d1b5      	bne.n	8001cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d11b      	bne.n	8001dec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0204 	orr.w	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e272      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 8087 	beq.w	8001f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e18:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d00c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e24:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d112      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
 8001e30:	4b8c      	ldr	r3, [pc, #560]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d10b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3e:	4b89      	ldr	r3, [pc, #548]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d06c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x12c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d168      	bne.n	8001f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e24c      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x76>
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a7f      	ldr	r2, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e02e      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x98>
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7a      	ldr	r2, [pc, #488]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b78      	ldr	r3, [pc, #480]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e01d      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xbc>
 8001e9a:	4b72      	ldr	r3, [pc, #456]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a71      	ldr	r2, [pc, #452]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e00b      	b.n	8001ecc <HAL_RCC_OscConfig+0xd4>
 8001eb4:	4b6b      	ldr	r3, [pc, #428]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d013      	beq.n	8001efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fcfa 	bl	80008cc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe fcf6 	bl	80008cc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	; 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e200      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0xe4>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7fe fce6 	bl	80008cc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7fe fce2 	bl	80008cc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1ec      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f16:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x10c>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d063      	beq.n	8001ffa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 030c 	and.w	r3, r3, #12
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d11c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d116      	bne.n	8001f84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f56:	4b43      	ldr	r3, [pc, #268]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1c0      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4939      	ldr	r1, [pc, #228]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f82:	e03a      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8c:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fc9b 	bl	80008cc <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9a:	f7fe fc97 	bl	80008cc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1a1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0f0      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4927      	ldr	r1, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	600b      	str	r3, [r1, #0]
 8001fcc:	e015      	b.n	8001ffa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe fc7a 	bl	80008cc <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fdc:	f7fe fc76 	bl	80008cc <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e180      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d03a      	beq.n	800207c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7fe fc5a 	bl	80008cc <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7fe fc56 	bl	80008cc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e160      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800202e:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x26c>)
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203a:	2001      	movs	r0, #1
 800203c:	f000 fac4 	bl	80025c8 <RCC_Delay>
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_RCC_OscConfig+0x274>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe fc40 	bl	80008cc <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe fc3c 	bl	80008cc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d908      	bls.n	8002070 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e146      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	42420000 	.word	0x42420000
 800206c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1e9      	bne.n	8002050 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80a6 	beq.w	80021d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10d      	bne.n	80020b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	4a87      	ldr	r2, [pc, #540]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	61d3      	str	r3, [r2, #28]
 80020a6:	4b85      	ldr	r3, [pc, #532]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b7f      	ldr	r3, [pc, #508]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7e      	ldr	r2, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe fbfd 	bl	80008cc <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe fbf9 	bl	80008cc <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	; 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e103      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x4c8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x312>
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6213      	str	r3, [r2, #32]
 8002108:	e02d      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x334>
 8002112:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a66      	ldr	r2, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
 800212a:	e01c      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d10c      	bne.n	800214e <HAL_RCC_OscConfig+0x356>
 8002134:	4b61      	ldr	r3, [pc, #388]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a60      	ldr	r2, [pc, #384]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800213a:	f043 0304 	orr.w	r3, r3, #4
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e00b      	b.n	8002166 <HAL_RCC_OscConfig+0x36e>
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a5a      	ldr	r2, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002154:	f023 0301 	bic.w	r3, r3, #1
 8002158:	6213      	str	r3, [r2, #32]
 800215a:	4b58      	ldr	r3, [pc, #352]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d015      	beq.n	800219a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216e:	f7fe fbad 	bl	80008cc <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fba9 	bl	80008cc <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e0b1      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCC_OscConfig+0x37e>
 8002198:	e014      	b.n	80021c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7fe fb97 	bl	80008cc <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fb93 	bl	80008cc <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e09b      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ee      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d105      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ca:	4b3c      	ldr	r3, [pc, #240]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b36      	ldr	r3, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d061      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d146      	bne.n	8002282 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fb67 	bl	80008cc <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe fb63 	bl	80008cc <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e06d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d108      	bne.n	800223c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	4921      	ldr	r1, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a19      	ldr	r1, [r3, #32]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	430b      	orrs	r3, r1
 800224e:	491b      	ldr	r1, [pc, #108]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb37 	bl	80008cc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fb33 	bl	80008cc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e03d      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x46a>
 8002280:	e035      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_RCC_OscConfig+0x4cc>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fb20 	bl	80008cc <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fb1c 	bl	80008cc <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e026      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x498>
 80022ae:	e01e      	b.n	80022ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e019      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40007000 	.word	0x40007000
 80022c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x500>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d001      	beq.n	80022ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fa6e 	bl	80008cc <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fa6a 	bl	80008cc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f9cc 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	080035d0 	.word	0x080035d0
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b490      	push	{r4, r7}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024d6:	4b29      	ldr	r3, [pc, #164]	; (800257c <HAL_RCC_GetSysClockFreq+0xac>)
 80024d8:	1d3c      	adds	r4, r7, #4
 80024da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024e0:	f240 2301 	movw	r3, #513	; 0x201
 80024e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	2300      	movs	r3, #0
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x40>
 800250a:	2b08      	cmp	r3, #8
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x46>
 800250e:	e02b      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002512:	623b      	str	r3, [r7, #32]
      break;
 8002514:	e02b      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	0c9b      	lsrs	r3, r3, #18
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3328      	adds	r3, #40	; 0x28
 8002520:	443b      	add	r3, r7
 8002522:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002526:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	0c5b      	lsrs	r3, r3, #17
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	3328      	adds	r3, #40	; 0x28
 800253e:	443b      	add	r3, r7
 8002540:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002544:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb4>)
 800254a:	fb03 f202 	mul.w	r2, r3, r2
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
 8002556:	e004      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	4a0b      	ldr	r2, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	623b      	str	r3, [r7, #32]
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_RCC_GetSysClockFreq+0xb4>)
 800256a:	623b      	str	r3, [r7, #32]
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	6a3b      	ldr	r3, [r7, #32]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3728      	adds	r7, #40	; 0x28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc90      	pop	{r4, r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	080035c0 	.word	0x080035c0
 8002580:	40021000 	.word	0x40021000
 8002584:	007a1200 	.word	0x007a1200
 8002588:	003d0900 	.word	0x003d0900

0800258c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <HAL_RCC_GetHCLKFreq+0x10>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a4:	f7ff fff2 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	080035e0 	.word	0x080035e0

080025c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <RCC_Delay+0x34>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <RCC_Delay+0x38>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a5b      	lsrs	r3, r3, #9
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e4:	bf00      	nop
  }
  while (Delay --);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	60fa      	str	r2, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f9      	bne.n	80025e4 <RCC_Delay+0x1c>
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000000 	.word	0x20000000
 8002600:	10624dd3 	.word	0x10624dd3

08002604 <__errno>:
 8002604:	4b01      	ldr	r3, [pc, #4]	; (800260c <__errno+0x8>)
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	2600      	movs	r6, #0
 8002614:	4d0c      	ldr	r5, [pc, #48]	; (8002648 <__libc_init_array+0x38>)
 8002616:	4c0d      	ldr	r4, [pc, #52]	; (800264c <__libc_init_array+0x3c>)
 8002618:	1b64      	subs	r4, r4, r5
 800261a:	10a4      	asrs	r4, r4, #2
 800261c:	42a6      	cmp	r6, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	f000 ffb6 	bl	8003590 <_init>
 8002624:	2600      	movs	r6, #0
 8002626:	4d0a      	ldr	r5, [pc, #40]	; (8002650 <__libc_init_array+0x40>)
 8002628:	4c0a      	ldr	r4, [pc, #40]	; (8002654 <__libc_init_array+0x44>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	42a6      	cmp	r6, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f855 3b04 	ldr.w	r3, [r5], #4
 8002638:	4798      	blx	r3
 800263a:	3601      	adds	r6, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002642:	4798      	blx	r3
 8002644:	3601      	adds	r6, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	08003680 	.word	0x08003680
 800264c:	08003680 	.word	0x08003680
 8002650:	08003680 	.word	0x08003680
 8002654:	08003684 	.word	0x08003684

08002658 <memset>:
 8002658:	4603      	mov	r3, r0
 800265a:	4402      	add	r2, r0
 800265c:	4293      	cmp	r3, r2
 800265e:	d100      	bne.n	8002662 <memset+0xa>
 8002660:	4770      	bx	lr
 8002662:	f803 1b01 	strb.w	r1, [r3], #1
 8002666:	e7f9      	b.n	800265c <memset+0x4>

08002668 <iprintf>:
 8002668:	b40f      	push	{r0, r1, r2, r3}
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <iprintf+0x2c>)
 800266c:	b513      	push	{r0, r1, r4, lr}
 800266e:	681c      	ldr	r4, [r3, #0]
 8002670:	b124      	cbz	r4, 800267c <iprintf+0x14>
 8002672:	69a3      	ldr	r3, [r4, #24]
 8002674:	b913      	cbnz	r3, 800267c <iprintf+0x14>
 8002676:	4620      	mov	r0, r4
 8002678:	f000 f866 	bl	8002748 <__sinit>
 800267c:	ab05      	add	r3, sp, #20
 800267e:	4620      	mov	r0, r4
 8002680:	9a04      	ldr	r2, [sp, #16]
 8002682:	68a1      	ldr	r1, [r4, #8]
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	f000 f9bb 	bl	8002a00 <_vfiprintf_r>
 800268a:	b002      	add	sp, #8
 800268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002690:	b004      	add	sp, #16
 8002692:	4770      	bx	lr
 8002694:	2000000c 	.word	0x2000000c

08002698 <std>:
 8002698:	2300      	movs	r3, #0
 800269a:	b510      	push	{r4, lr}
 800269c:	4604      	mov	r4, r0
 800269e:	e9c0 3300 	strd	r3, r3, [r0]
 80026a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80026a6:	6083      	str	r3, [r0, #8]
 80026a8:	8181      	strh	r1, [r0, #12]
 80026aa:	6643      	str	r3, [r0, #100]	; 0x64
 80026ac:	81c2      	strh	r2, [r0, #14]
 80026ae:	6183      	str	r3, [r0, #24]
 80026b0:	4619      	mov	r1, r3
 80026b2:	2208      	movs	r2, #8
 80026b4:	305c      	adds	r0, #92	; 0x5c
 80026b6:	f7ff ffcf 	bl	8002658 <memset>
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <std+0x38>)
 80026bc:	6224      	str	r4, [r4, #32]
 80026be:	6263      	str	r3, [r4, #36]	; 0x24
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <std+0x3c>)
 80026c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <std+0x40>)
 80026c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <std+0x44>)
 80026ca:	6323      	str	r3, [r4, #48]	; 0x30
 80026cc:	bd10      	pop	{r4, pc}
 80026ce:	bf00      	nop
 80026d0:	08002fad 	.word	0x08002fad
 80026d4:	08002fcf 	.word	0x08002fcf
 80026d8:	08003007 	.word	0x08003007
 80026dc:	0800302b 	.word	0x0800302b

080026e0 <_cleanup_r>:
 80026e0:	4901      	ldr	r1, [pc, #4]	; (80026e8 <_cleanup_r+0x8>)
 80026e2:	f000 b8af 	b.w	8002844 <_fwalk_reent>
 80026e6:	bf00      	nop
 80026e8:	080032fd 	.word	0x080032fd

080026ec <__sfmoreglue>:
 80026ec:	2268      	movs	r2, #104	; 0x68
 80026ee:	b570      	push	{r4, r5, r6, lr}
 80026f0:	1e4d      	subs	r5, r1, #1
 80026f2:	4355      	muls	r5, r2
 80026f4:	460e      	mov	r6, r1
 80026f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80026fa:	f000 f8e5 	bl	80028c8 <_malloc_r>
 80026fe:	4604      	mov	r4, r0
 8002700:	b140      	cbz	r0, 8002714 <__sfmoreglue+0x28>
 8002702:	2100      	movs	r1, #0
 8002704:	e9c0 1600 	strd	r1, r6, [r0]
 8002708:	300c      	adds	r0, #12
 800270a:	60a0      	str	r0, [r4, #8]
 800270c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002710:	f7ff ffa2 	bl	8002658 <memset>
 8002714:	4620      	mov	r0, r4
 8002716:	bd70      	pop	{r4, r5, r6, pc}

08002718 <__sfp_lock_acquire>:
 8002718:	4801      	ldr	r0, [pc, #4]	; (8002720 <__sfp_lock_acquire+0x8>)
 800271a:	f000 b8b3 	b.w	8002884 <__retarget_lock_acquire_recursive>
 800271e:	bf00      	nop
 8002720:	20000101 	.word	0x20000101

08002724 <__sfp_lock_release>:
 8002724:	4801      	ldr	r0, [pc, #4]	; (800272c <__sfp_lock_release+0x8>)
 8002726:	f000 b8ae 	b.w	8002886 <__retarget_lock_release_recursive>
 800272a:	bf00      	nop
 800272c:	20000101 	.word	0x20000101

08002730 <__sinit_lock_acquire>:
 8002730:	4801      	ldr	r0, [pc, #4]	; (8002738 <__sinit_lock_acquire+0x8>)
 8002732:	f000 b8a7 	b.w	8002884 <__retarget_lock_acquire_recursive>
 8002736:	bf00      	nop
 8002738:	20000102 	.word	0x20000102

0800273c <__sinit_lock_release>:
 800273c:	4801      	ldr	r0, [pc, #4]	; (8002744 <__sinit_lock_release+0x8>)
 800273e:	f000 b8a2 	b.w	8002886 <__retarget_lock_release_recursive>
 8002742:	bf00      	nop
 8002744:	20000102 	.word	0x20000102

08002748 <__sinit>:
 8002748:	b510      	push	{r4, lr}
 800274a:	4604      	mov	r4, r0
 800274c:	f7ff fff0 	bl	8002730 <__sinit_lock_acquire>
 8002750:	69a3      	ldr	r3, [r4, #24]
 8002752:	b11b      	cbz	r3, 800275c <__sinit+0x14>
 8002754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002758:	f7ff bff0 	b.w	800273c <__sinit_lock_release>
 800275c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002760:	6523      	str	r3, [r4, #80]	; 0x50
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <__sinit+0x68>)
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <__sinit+0x6c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	62a2      	str	r2, [r4, #40]	; 0x28
 800276a:	42a3      	cmp	r3, r4
 800276c:	bf08      	it	eq
 800276e:	2301      	moveq	r3, #1
 8002770:	4620      	mov	r0, r4
 8002772:	bf08      	it	eq
 8002774:	61a3      	streq	r3, [r4, #24]
 8002776:	f000 f81f 	bl	80027b8 <__sfp>
 800277a:	6060      	str	r0, [r4, #4]
 800277c:	4620      	mov	r0, r4
 800277e:	f000 f81b 	bl	80027b8 <__sfp>
 8002782:	60a0      	str	r0, [r4, #8]
 8002784:	4620      	mov	r0, r4
 8002786:	f000 f817 	bl	80027b8 <__sfp>
 800278a:	2200      	movs	r2, #0
 800278c:	2104      	movs	r1, #4
 800278e:	60e0      	str	r0, [r4, #12]
 8002790:	6860      	ldr	r0, [r4, #4]
 8002792:	f7ff ff81 	bl	8002698 <std>
 8002796:	2201      	movs	r2, #1
 8002798:	2109      	movs	r1, #9
 800279a:	68a0      	ldr	r0, [r4, #8]
 800279c:	f7ff ff7c 	bl	8002698 <std>
 80027a0:	2202      	movs	r2, #2
 80027a2:	2112      	movs	r1, #18
 80027a4:	68e0      	ldr	r0, [r4, #12]
 80027a6:	f7ff ff77 	bl	8002698 <std>
 80027aa:	2301      	movs	r3, #1
 80027ac:	61a3      	str	r3, [r4, #24]
 80027ae:	e7d1      	b.n	8002754 <__sinit+0xc>
 80027b0:	080035e8 	.word	0x080035e8
 80027b4:	080026e1 	.word	0x080026e1

080027b8 <__sfp>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	4607      	mov	r7, r0
 80027bc:	f7ff ffac 	bl	8002718 <__sfp_lock_acquire>
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <__sfp+0x84>)
 80027c2:	681e      	ldr	r6, [r3, #0]
 80027c4:	69b3      	ldr	r3, [r6, #24]
 80027c6:	b913      	cbnz	r3, 80027ce <__sfp+0x16>
 80027c8:	4630      	mov	r0, r6
 80027ca:	f7ff ffbd 	bl	8002748 <__sinit>
 80027ce:	3648      	adds	r6, #72	; 0x48
 80027d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	d503      	bpl.n	80027e0 <__sfp+0x28>
 80027d8:	6833      	ldr	r3, [r6, #0]
 80027da:	b30b      	cbz	r3, 8002820 <__sfp+0x68>
 80027dc:	6836      	ldr	r6, [r6, #0]
 80027de:	e7f7      	b.n	80027d0 <__sfp+0x18>
 80027e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027e4:	b9d5      	cbnz	r5, 800281c <__sfp+0x64>
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <__sfp+0x88>)
 80027e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027ec:	60e3      	str	r3, [r4, #12]
 80027ee:	6665      	str	r5, [r4, #100]	; 0x64
 80027f0:	f000 f847 	bl	8002882 <__retarget_lock_init_recursive>
 80027f4:	f7ff ff96 	bl	8002724 <__sfp_lock_release>
 80027f8:	2208      	movs	r2, #8
 80027fa:	4629      	mov	r1, r5
 80027fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002800:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002804:	6025      	str	r5, [r4, #0]
 8002806:	61a5      	str	r5, [r4, #24]
 8002808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800280c:	f7ff ff24 	bl	8002658 <memset>
 8002810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002818:	4620      	mov	r0, r4
 800281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800281c:	3468      	adds	r4, #104	; 0x68
 800281e:	e7d9      	b.n	80027d4 <__sfp+0x1c>
 8002820:	2104      	movs	r1, #4
 8002822:	4638      	mov	r0, r7
 8002824:	f7ff ff62 	bl	80026ec <__sfmoreglue>
 8002828:	4604      	mov	r4, r0
 800282a:	6030      	str	r0, [r6, #0]
 800282c:	2800      	cmp	r0, #0
 800282e:	d1d5      	bne.n	80027dc <__sfp+0x24>
 8002830:	f7ff ff78 	bl	8002724 <__sfp_lock_release>
 8002834:	230c      	movs	r3, #12
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	e7ee      	b.n	8002818 <__sfp+0x60>
 800283a:	bf00      	nop
 800283c:	080035e8 	.word	0x080035e8
 8002840:	ffff0001 	.word	0xffff0001

08002844 <_fwalk_reent>:
 8002844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002848:	4606      	mov	r6, r0
 800284a:	4688      	mov	r8, r1
 800284c:	2700      	movs	r7, #0
 800284e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002856:	f1b9 0901 	subs.w	r9, r9, #1
 800285a:	d505      	bpl.n	8002868 <_fwalk_reent+0x24>
 800285c:	6824      	ldr	r4, [r4, #0]
 800285e:	2c00      	cmp	r4, #0
 8002860:	d1f7      	bne.n	8002852 <_fwalk_reent+0xe>
 8002862:	4638      	mov	r0, r7
 8002864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002868:	89ab      	ldrh	r3, [r5, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d907      	bls.n	800287e <_fwalk_reent+0x3a>
 800286e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002872:	3301      	adds	r3, #1
 8002874:	d003      	beq.n	800287e <_fwalk_reent+0x3a>
 8002876:	4629      	mov	r1, r5
 8002878:	4630      	mov	r0, r6
 800287a:	47c0      	blx	r8
 800287c:	4307      	orrs	r7, r0
 800287e:	3568      	adds	r5, #104	; 0x68
 8002880:	e7e9      	b.n	8002856 <_fwalk_reent+0x12>

08002882 <__retarget_lock_init_recursive>:
 8002882:	4770      	bx	lr

08002884 <__retarget_lock_acquire_recursive>:
 8002884:	4770      	bx	lr

08002886 <__retarget_lock_release_recursive>:
 8002886:	4770      	bx	lr

08002888 <sbrk_aligned>:
 8002888:	b570      	push	{r4, r5, r6, lr}
 800288a:	4e0e      	ldr	r6, [pc, #56]	; (80028c4 <sbrk_aligned+0x3c>)
 800288c:	460c      	mov	r4, r1
 800288e:	6831      	ldr	r1, [r6, #0]
 8002890:	4605      	mov	r5, r0
 8002892:	b911      	cbnz	r1, 800289a <sbrk_aligned+0x12>
 8002894:	f000 fb7a 	bl	8002f8c <_sbrk_r>
 8002898:	6030      	str	r0, [r6, #0]
 800289a:	4621      	mov	r1, r4
 800289c:	4628      	mov	r0, r5
 800289e:	f000 fb75 	bl	8002f8c <_sbrk_r>
 80028a2:	1c43      	adds	r3, r0, #1
 80028a4:	d00a      	beq.n	80028bc <sbrk_aligned+0x34>
 80028a6:	1cc4      	adds	r4, r0, #3
 80028a8:	f024 0403 	bic.w	r4, r4, #3
 80028ac:	42a0      	cmp	r0, r4
 80028ae:	d007      	beq.n	80028c0 <sbrk_aligned+0x38>
 80028b0:	1a21      	subs	r1, r4, r0
 80028b2:	4628      	mov	r0, r5
 80028b4:	f000 fb6a 	bl	8002f8c <_sbrk_r>
 80028b8:	3001      	adds	r0, #1
 80028ba:	d101      	bne.n	80028c0 <sbrk_aligned+0x38>
 80028bc:	f04f 34ff 	mov.w	r4, #4294967295
 80028c0:	4620      	mov	r0, r4
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	20000108 	.word	0x20000108

080028c8 <_malloc_r>:
 80028c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028cc:	1ccd      	adds	r5, r1, #3
 80028ce:	f025 0503 	bic.w	r5, r5, #3
 80028d2:	3508      	adds	r5, #8
 80028d4:	2d0c      	cmp	r5, #12
 80028d6:	bf38      	it	cc
 80028d8:	250c      	movcc	r5, #12
 80028da:	2d00      	cmp	r5, #0
 80028dc:	4607      	mov	r7, r0
 80028de:	db01      	blt.n	80028e4 <_malloc_r+0x1c>
 80028e0:	42a9      	cmp	r1, r5
 80028e2:	d905      	bls.n	80028f0 <_malloc_r+0x28>
 80028e4:	230c      	movs	r3, #12
 80028e6:	2600      	movs	r6, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4630      	mov	r0, r6
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028f0:	4e2e      	ldr	r6, [pc, #184]	; (80029ac <_malloc_r+0xe4>)
 80028f2:	f000 fdc5 	bl	8003480 <__malloc_lock>
 80028f6:	6833      	ldr	r3, [r6, #0]
 80028f8:	461c      	mov	r4, r3
 80028fa:	bb34      	cbnz	r4, 800294a <_malloc_r+0x82>
 80028fc:	4629      	mov	r1, r5
 80028fe:	4638      	mov	r0, r7
 8002900:	f7ff ffc2 	bl	8002888 <sbrk_aligned>
 8002904:	1c43      	adds	r3, r0, #1
 8002906:	4604      	mov	r4, r0
 8002908:	d14d      	bne.n	80029a6 <_malloc_r+0xde>
 800290a:	6834      	ldr	r4, [r6, #0]
 800290c:	4626      	mov	r6, r4
 800290e:	2e00      	cmp	r6, #0
 8002910:	d140      	bne.n	8002994 <_malloc_r+0xcc>
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	4631      	mov	r1, r6
 8002916:	4638      	mov	r0, r7
 8002918:	eb04 0803 	add.w	r8, r4, r3
 800291c:	f000 fb36 	bl	8002f8c <_sbrk_r>
 8002920:	4580      	cmp	r8, r0
 8002922:	d13a      	bne.n	800299a <_malloc_r+0xd2>
 8002924:	6821      	ldr	r1, [r4, #0]
 8002926:	3503      	adds	r5, #3
 8002928:	1a6d      	subs	r5, r5, r1
 800292a:	f025 0503 	bic.w	r5, r5, #3
 800292e:	3508      	adds	r5, #8
 8002930:	2d0c      	cmp	r5, #12
 8002932:	bf38      	it	cc
 8002934:	250c      	movcc	r5, #12
 8002936:	4638      	mov	r0, r7
 8002938:	4629      	mov	r1, r5
 800293a:	f7ff ffa5 	bl	8002888 <sbrk_aligned>
 800293e:	3001      	adds	r0, #1
 8002940:	d02b      	beq.n	800299a <_malloc_r+0xd2>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	442b      	add	r3, r5
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	e00e      	b.n	8002968 <_malloc_r+0xa0>
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	1b52      	subs	r2, r2, r5
 800294e:	d41e      	bmi.n	800298e <_malloc_r+0xc6>
 8002950:	2a0b      	cmp	r2, #11
 8002952:	d916      	bls.n	8002982 <_malloc_r+0xba>
 8002954:	1961      	adds	r1, r4, r5
 8002956:	42a3      	cmp	r3, r4
 8002958:	6025      	str	r5, [r4, #0]
 800295a:	bf18      	it	ne
 800295c:	6059      	strne	r1, [r3, #4]
 800295e:	6863      	ldr	r3, [r4, #4]
 8002960:	bf08      	it	eq
 8002962:	6031      	streq	r1, [r6, #0]
 8002964:	5162      	str	r2, [r4, r5]
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	4638      	mov	r0, r7
 800296a:	f104 060b 	add.w	r6, r4, #11
 800296e:	f000 fd8d 	bl	800348c <__malloc_unlock>
 8002972:	f026 0607 	bic.w	r6, r6, #7
 8002976:	1d23      	adds	r3, r4, #4
 8002978:	1af2      	subs	r2, r6, r3
 800297a:	d0b6      	beq.n	80028ea <_malloc_r+0x22>
 800297c:	1b9b      	subs	r3, r3, r6
 800297e:	50a3      	str	r3, [r4, r2]
 8002980:	e7b3      	b.n	80028ea <_malloc_r+0x22>
 8002982:	6862      	ldr	r2, [r4, #4]
 8002984:	42a3      	cmp	r3, r4
 8002986:	bf0c      	ite	eq
 8002988:	6032      	streq	r2, [r6, #0]
 800298a:	605a      	strne	r2, [r3, #4]
 800298c:	e7ec      	b.n	8002968 <_malloc_r+0xa0>
 800298e:	4623      	mov	r3, r4
 8002990:	6864      	ldr	r4, [r4, #4]
 8002992:	e7b2      	b.n	80028fa <_malloc_r+0x32>
 8002994:	4634      	mov	r4, r6
 8002996:	6876      	ldr	r6, [r6, #4]
 8002998:	e7b9      	b.n	800290e <_malloc_r+0x46>
 800299a:	230c      	movs	r3, #12
 800299c:	4638      	mov	r0, r7
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	f000 fd74 	bl	800348c <__malloc_unlock>
 80029a4:	e7a1      	b.n	80028ea <_malloc_r+0x22>
 80029a6:	6025      	str	r5, [r4, #0]
 80029a8:	e7de      	b.n	8002968 <_malloc_r+0xa0>
 80029aa:	bf00      	nop
 80029ac:	20000104 	.word	0x20000104

080029b0 <__sfputc_r>:
 80029b0:	6893      	ldr	r3, [r2, #8]
 80029b2:	b410      	push	{r4}
 80029b4:	3b01      	subs	r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	6093      	str	r3, [r2, #8]
 80029ba:	da07      	bge.n	80029cc <__sfputc_r+0x1c>
 80029bc:	6994      	ldr	r4, [r2, #24]
 80029be:	42a3      	cmp	r3, r4
 80029c0:	db01      	blt.n	80029c6 <__sfputc_r+0x16>
 80029c2:	290a      	cmp	r1, #10
 80029c4:	d102      	bne.n	80029cc <__sfputc_r+0x1c>
 80029c6:	bc10      	pop	{r4}
 80029c8:	f000 bb34 	b.w	8003034 <__swbuf_r>
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	1c58      	adds	r0, r3, #1
 80029d0:	6010      	str	r0, [r2, #0]
 80029d2:	7019      	strb	r1, [r3, #0]
 80029d4:	4608      	mov	r0, r1
 80029d6:	bc10      	pop	{r4}
 80029d8:	4770      	bx	lr

080029da <__sfputs_r>:
 80029da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029dc:	4606      	mov	r6, r0
 80029de:	460f      	mov	r7, r1
 80029e0:	4614      	mov	r4, r2
 80029e2:	18d5      	adds	r5, r2, r3
 80029e4:	42ac      	cmp	r4, r5
 80029e6:	d101      	bne.n	80029ec <__sfputs_r+0x12>
 80029e8:	2000      	movs	r0, #0
 80029ea:	e007      	b.n	80029fc <__sfputs_r+0x22>
 80029ec:	463a      	mov	r2, r7
 80029ee:	4630      	mov	r0, r6
 80029f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029f4:	f7ff ffdc 	bl	80029b0 <__sfputc_r>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d1f3      	bne.n	80029e4 <__sfputs_r+0xa>
 80029fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a00 <_vfiprintf_r>:
 8002a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a04:	460d      	mov	r5, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	4698      	mov	r8, r3
 8002a0a:	4606      	mov	r6, r0
 8002a0c:	b09d      	sub	sp, #116	; 0x74
 8002a0e:	b118      	cbz	r0, 8002a18 <_vfiprintf_r+0x18>
 8002a10:	6983      	ldr	r3, [r0, #24]
 8002a12:	b90b      	cbnz	r3, 8002a18 <_vfiprintf_r+0x18>
 8002a14:	f7ff fe98 	bl	8002748 <__sinit>
 8002a18:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <_vfiprintf_r+0x240>)
 8002a1a:	429d      	cmp	r5, r3
 8002a1c:	d11b      	bne.n	8002a56 <_vfiprintf_r+0x56>
 8002a1e:	6875      	ldr	r5, [r6, #4]
 8002a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a22:	07d9      	lsls	r1, r3, #31
 8002a24:	d405      	bmi.n	8002a32 <_vfiprintf_r+0x32>
 8002a26:	89ab      	ldrh	r3, [r5, #12]
 8002a28:	059a      	lsls	r2, r3, #22
 8002a2a:	d402      	bmi.n	8002a32 <_vfiprintf_r+0x32>
 8002a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a2e:	f7ff ff29 	bl	8002884 <__retarget_lock_acquire_recursive>
 8002a32:	89ab      	ldrh	r3, [r5, #12]
 8002a34:	071b      	lsls	r3, r3, #28
 8002a36:	d501      	bpl.n	8002a3c <_vfiprintf_r+0x3c>
 8002a38:	692b      	ldr	r3, [r5, #16]
 8002a3a:	b9eb      	cbnz	r3, 8002a78 <_vfiprintf_r+0x78>
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4630      	mov	r0, r6
 8002a40:	f000 fb5c 	bl	80030fc <__swsetup_r>
 8002a44:	b1c0      	cbz	r0, 8002a78 <_vfiprintf_r+0x78>
 8002a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a48:	07dc      	lsls	r4, r3, #31
 8002a4a:	d50e      	bpl.n	8002a6a <_vfiprintf_r+0x6a>
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	b01d      	add	sp, #116	; 0x74
 8002a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a56:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <_vfiprintf_r+0x244>)
 8002a58:	429d      	cmp	r5, r3
 8002a5a:	d101      	bne.n	8002a60 <_vfiprintf_r+0x60>
 8002a5c:	68b5      	ldr	r5, [r6, #8]
 8002a5e:	e7df      	b.n	8002a20 <_vfiprintf_r+0x20>
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <_vfiprintf_r+0x248>)
 8002a62:	429d      	cmp	r5, r3
 8002a64:	bf08      	it	eq
 8002a66:	68f5      	ldreq	r5, [r6, #12]
 8002a68:	e7da      	b.n	8002a20 <_vfiprintf_r+0x20>
 8002a6a:	89ab      	ldrh	r3, [r5, #12]
 8002a6c:	0598      	lsls	r0, r3, #22
 8002a6e:	d4ed      	bmi.n	8002a4c <_vfiprintf_r+0x4c>
 8002a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a72:	f7ff ff08 	bl	8002886 <__retarget_lock_release_recursive>
 8002a76:	e7e9      	b.n	8002a4c <_vfiprintf_r+0x4c>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a82:	2330      	movs	r3, #48	; 0x30
 8002a84:	f04f 0901 	mov.w	r9, #1
 8002a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a8c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002c4c <_vfiprintf_r+0x24c>
 8002a90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a94:	4623      	mov	r3, r4
 8002a96:	469a      	mov	sl, r3
 8002a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a9c:	b10a      	cbz	r2, 8002aa2 <_vfiprintf_r+0xa2>
 8002a9e:	2a25      	cmp	r2, #37	; 0x25
 8002aa0:	d1f9      	bne.n	8002a96 <_vfiprintf_r+0x96>
 8002aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa6:	d00b      	beq.n	8002ac0 <_vfiprintf_r+0xc0>
 8002aa8:	465b      	mov	r3, fp
 8002aaa:	4622      	mov	r2, r4
 8002aac:	4629      	mov	r1, r5
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f7ff ff93 	bl	80029da <__sfputs_r>
 8002ab4:	3001      	adds	r0, #1
 8002ab6:	f000 80aa 	beq.w	8002c0e <_vfiprintf_r+0x20e>
 8002aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002abc:	445a      	add	r2, fp
 8002abe:	9209      	str	r2, [sp, #36]	; 0x24
 8002ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a2 	beq.w	8002c0e <_vfiprintf_r+0x20e>
 8002aca:	2300      	movs	r3, #0
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ad4:	f10a 0a01 	add.w	sl, sl, #1
 8002ad8:	9304      	str	r3, [sp, #16]
 8002ada:	9307      	str	r3, [sp, #28]
 8002adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ae2:	4654      	mov	r4, sl
 8002ae4:	2205      	movs	r2, #5
 8002ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aea:	4858      	ldr	r0, [pc, #352]	; (8002c4c <_vfiprintf_r+0x24c>)
 8002aec:	f000 fcba 	bl	8003464 <memchr>
 8002af0:	9a04      	ldr	r2, [sp, #16]
 8002af2:	b9d8      	cbnz	r0, 8002b2c <_vfiprintf_r+0x12c>
 8002af4:	06d1      	lsls	r1, r2, #27
 8002af6:	bf44      	itt	mi
 8002af8:	2320      	movmi	r3, #32
 8002afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002afe:	0713      	lsls	r3, r2, #28
 8002b00:	bf44      	itt	mi
 8002b02:	232b      	movmi	r3, #43	; 0x2b
 8002b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b08:	f89a 3000 	ldrb.w	r3, [sl]
 8002b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b0e:	d015      	beq.n	8002b3c <_vfiprintf_r+0x13c>
 8002b10:	4654      	mov	r4, sl
 8002b12:	2000      	movs	r0, #0
 8002b14:	f04f 0c0a 	mov.w	ip, #10
 8002b18:	9a07      	ldr	r2, [sp, #28]
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b20:	3b30      	subs	r3, #48	; 0x30
 8002b22:	2b09      	cmp	r3, #9
 8002b24:	d94e      	bls.n	8002bc4 <_vfiprintf_r+0x1c4>
 8002b26:	b1b0      	cbz	r0, 8002b56 <_vfiprintf_r+0x156>
 8002b28:	9207      	str	r2, [sp, #28]
 8002b2a:	e014      	b.n	8002b56 <_vfiprintf_r+0x156>
 8002b2c:	eba0 0308 	sub.w	r3, r0, r8
 8002b30:	fa09 f303 	lsl.w	r3, r9, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	46a2      	mov	sl, r4
 8002b38:	9304      	str	r3, [sp, #16]
 8002b3a:	e7d2      	b.n	8002ae2 <_vfiprintf_r+0xe2>
 8002b3c:	9b03      	ldr	r3, [sp, #12]
 8002b3e:	1d19      	adds	r1, r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	9103      	str	r1, [sp, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bfbb      	ittet	lt
 8002b48:	425b      	neglt	r3, r3
 8002b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8002b4e:	9307      	strge	r3, [sp, #28]
 8002b50:	9307      	strlt	r3, [sp, #28]
 8002b52:	bfb8      	it	lt
 8002b54:	9204      	strlt	r2, [sp, #16]
 8002b56:	7823      	ldrb	r3, [r4, #0]
 8002b58:	2b2e      	cmp	r3, #46	; 0x2e
 8002b5a:	d10c      	bne.n	8002b76 <_vfiprintf_r+0x176>
 8002b5c:	7863      	ldrb	r3, [r4, #1]
 8002b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b60:	d135      	bne.n	8002bce <_vfiprintf_r+0x1ce>
 8002b62:	9b03      	ldr	r3, [sp, #12]
 8002b64:	3402      	adds	r4, #2
 8002b66:	1d1a      	adds	r2, r3, #4
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	9203      	str	r2, [sp, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bfb8      	it	lt
 8002b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b74:	9305      	str	r3, [sp, #20]
 8002b76:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002c50 <_vfiprintf_r+0x250>
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	4650      	mov	r0, sl
 8002b7e:	7821      	ldrb	r1, [r4, #0]
 8002b80:	f000 fc70 	bl	8003464 <memchr>
 8002b84:	b140      	cbz	r0, 8002b98 <_vfiprintf_r+0x198>
 8002b86:	2340      	movs	r3, #64	; 0x40
 8002b88:	eba0 000a 	sub.w	r0, r0, sl
 8002b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8002b90:	9b04      	ldr	r3, [sp, #16]
 8002b92:	3401      	adds	r4, #1
 8002b94:	4303      	orrs	r3, r0
 8002b96:	9304      	str	r3, [sp, #16]
 8002b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b9c:	2206      	movs	r2, #6
 8002b9e:	482d      	ldr	r0, [pc, #180]	; (8002c54 <_vfiprintf_r+0x254>)
 8002ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ba4:	f000 fc5e 	bl	8003464 <memchr>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d03f      	beq.n	8002c2c <_vfiprintf_r+0x22c>
 8002bac:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <_vfiprintf_r+0x258>)
 8002bae:	bb1b      	cbnz	r3, 8002bf8 <_vfiprintf_r+0x1f8>
 8002bb0:	9b03      	ldr	r3, [sp, #12]
 8002bb2:	3307      	adds	r3, #7
 8002bb4:	f023 0307 	bic.w	r3, r3, #7
 8002bb8:	3308      	adds	r3, #8
 8002bba:	9303      	str	r3, [sp, #12]
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	443b      	add	r3, r7
 8002bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc2:	e767      	b.n	8002a94 <_vfiprintf_r+0x94>
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bcc:	e7a5      	b.n	8002b1a <_vfiprintf_r+0x11a>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f04f 0c0a 	mov.w	ip, #10
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	3401      	adds	r4, #1
 8002bd8:	9305      	str	r3, [sp, #20]
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002be0:	3a30      	subs	r2, #48	; 0x30
 8002be2:	2a09      	cmp	r2, #9
 8002be4:	d903      	bls.n	8002bee <_vfiprintf_r+0x1ee>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0c5      	beq.n	8002b76 <_vfiprintf_r+0x176>
 8002bea:	9105      	str	r1, [sp, #20]
 8002bec:	e7c3      	b.n	8002b76 <_vfiprintf_r+0x176>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bf6:	e7f0      	b.n	8002bda <_vfiprintf_r+0x1da>
 8002bf8:	ab03      	add	r3, sp, #12
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	462a      	mov	r2, r5
 8002bfe:	4630      	mov	r0, r6
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <_vfiprintf_r+0x25c>)
 8002c02:	a904      	add	r1, sp, #16
 8002c04:	f3af 8000 	nop.w
 8002c08:	4607      	mov	r7, r0
 8002c0a:	1c78      	adds	r0, r7, #1
 8002c0c:	d1d6      	bne.n	8002bbc <_vfiprintf_r+0x1bc>
 8002c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c10:	07d9      	lsls	r1, r3, #31
 8002c12:	d405      	bmi.n	8002c20 <_vfiprintf_r+0x220>
 8002c14:	89ab      	ldrh	r3, [r5, #12]
 8002c16:	059a      	lsls	r2, r3, #22
 8002c18:	d402      	bmi.n	8002c20 <_vfiprintf_r+0x220>
 8002c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c1c:	f7ff fe33 	bl	8002886 <__retarget_lock_release_recursive>
 8002c20:	89ab      	ldrh	r3, [r5, #12]
 8002c22:	065b      	lsls	r3, r3, #25
 8002c24:	f53f af12 	bmi.w	8002a4c <_vfiprintf_r+0x4c>
 8002c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c2a:	e711      	b.n	8002a50 <_vfiprintf_r+0x50>
 8002c2c:	ab03      	add	r3, sp, #12
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4630      	mov	r0, r6
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <_vfiprintf_r+0x25c>)
 8002c36:	a904      	add	r1, sp, #16
 8002c38:	f000 f882 	bl	8002d40 <_printf_i>
 8002c3c:	e7e4      	b.n	8002c08 <_vfiprintf_r+0x208>
 8002c3e:	bf00      	nop
 8002c40:	0800360c 	.word	0x0800360c
 8002c44:	0800362c 	.word	0x0800362c
 8002c48:	080035ec 	.word	0x080035ec
 8002c4c:	0800364c 	.word	0x0800364c
 8002c50:	08003652 	.word	0x08003652
 8002c54:	08003656 	.word	0x08003656
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	080029db 	.word	0x080029db

08002c60 <_printf_common>:
 8002c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c64:	4616      	mov	r6, r2
 8002c66:	4699      	mov	r9, r3
 8002c68:	688a      	ldr	r2, [r1, #8]
 8002c6a:	690b      	ldr	r3, [r1, #16]
 8002c6c:	4607      	mov	r7, r0
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	bfb8      	it	lt
 8002c72:	4613      	movlt	r3, r2
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c80:	b10a      	cbz	r2, 8002c86 <_printf_common+0x26>
 8002c82:	3301      	adds	r3, #1
 8002c84:	6033      	str	r3, [r6, #0]
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	0699      	lsls	r1, r3, #26
 8002c8a:	bf42      	ittt	mi
 8002c8c:	6833      	ldrmi	r3, [r6, #0]
 8002c8e:	3302      	addmi	r3, #2
 8002c90:	6033      	strmi	r3, [r6, #0]
 8002c92:	6825      	ldr	r5, [r4, #0]
 8002c94:	f015 0506 	ands.w	r5, r5, #6
 8002c98:	d106      	bne.n	8002ca8 <_printf_common+0x48>
 8002c9a:	f104 0a19 	add.w	sl, r4, #25
 8002c9e:	68e3      	ldr	r3, [r4, #12]
 8002ca0:	6832      	ldr	r2, [r6, #0]
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	42ab      	cmp	r3, r5
 8002ca6:	dc28      	bgt.n	8002cfa <_printf_common+0x9a>
 8002ca8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cac:	1e13      	subs	r3, r2, #0
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	bf18      	it	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	0692      	lsls	r2, r2, #26
 8002cb6:	d42d      	bmi.n	8002d14 <_printf_common+0xb4>
 8002cb8:	4649      	mov	r1, r9
 8002cba:	4638      	mov	r0, r7
 8002cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cc0:	47c0      	blx	r8
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	d020      	beq.n	8002d08 <_printf_common+0xa8>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	68e5      	ldr	r5, [r4, #12]
 8002cca:	f003 0306 	and.w	r3, r3, #6
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf18      	it	ne
 8002cd2:	2500      	movne	r5, #0
 8002cd4:	6832      	ldr	r2, [r6, #0]
 8002cd6:	f04f 0600 	mov.w	r6, #0
 8002cda:	68a3      	ldr	r3, [r4, #8]
 8002cdc:	bf08      	it	eq
 8002cde:	1aad      	subeq	r5, r5, r2
 8002ce0:	6922      	ldr	r2, [r4, #16]
 8002ce2:	bf08      	it	eq
 8002ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	bfc4      	itt	gt
 8002cec:	1a9b      	subgt	r3, r3, r2
 8002cee:	18ed      	addgt	r5, r5, r3
 8002cf0:	341a      	adds	r4, #26
 8002cf2:	42b5      	cmp	r5, r6
 8002cf4:	d11a      	bne.n	8002d2c <_printf_common+0xcc>
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e008      	b.n	8002d0c <_printf_common+0xac>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	4652      	mov	r2, sl
 8002cfe:	4649      	mov	r1, r9
 8002d00:	4638      	mov	r0, r7
 8002d02:	47c0      	blx	r8
 8002d04:	3001      	adds	r0, #1
 8002d06:	d103      	bne.n	8002d10 <_printf_common+0xb0>
 8002d08:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d10:	3501      	adds	r5, #1
 8002d12:	e7c4      	b.n	8002c9e <_printf_common+0x3e>
 8002d14:	2030      	movs	r0, #48	; 0x30
 8002d16:	18e1      	adds	r1, r4, r3
 8002d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d22:	4422      	add	r2, r4
 8002d24:	3302      	adds	r3, #2
 8002d26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d2a:	e7c5      	b.n	8002cb8 <_printf_common+0x58>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4649      	mov	r1, r9
 8002d32:	4638      	mov	r0, r7
 8002d34:	47c0      	blx	r8
 8002d36:	3001      	adds	r0, #1
 8002d38:	d0e6      	beq.n	8002d08 <_printf_common+0xa8>
 8002d3a:	3601      	adds	r6, #1
 8002d3c:	e7d9      	b.n	8002cf2 <_printf_common+0x92>
	...

08002d40 <_printf_i>:
 8002d40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d44:	7e0f      	ldrb	r7, [r1, #24]
 8002d46:	4691      	mov	r9, r2
 8002d48:	2f78      	cmp	r7, #120	; 0x78
 8002d4a:	4680      	mov	r8, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	469a      	mov	sl, r3
 8002d50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002d56:	d807      	bhi.n	8002d68 <_printf_i+0x28>
 8002d58:	2f62      	cmp	r7, #98	; 0x62
 8002d5a:	d80a      	bhi.n	8002d72 <_printf_i+0x32>
 8002d5c:	2f00      	cmp	r7, #0
 8002d5e:	f000 80d9 	beq.w	8002f14 <_printf_i+0x1d4>
 8002d62:	2f58      	cmp	r7, #88	; 0x58
 8002d64:	f000 80a4 	beq.w	8002eb0 <_printf_i+0x170>
 8002d68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d70:	e03a      	b.n	8002de8 <_printf_i+0xa8>
 8002d72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d76:	2b15      	cmp	r3, #21
 8002d78:	d8f6      	bhi.n	8002d68 <_printf_i+0x28>
 8002d7a:	a101      	add	r1, pc, #4	; (adr r1, 8002d80 <_printf_i+0x40>)
 8002d7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d80:	08002dd9 	.word	0x08002dd9
 8002d84:	08002ded 	.word	0x08002ded
 8002d88:	08002d69 	.word	0x08002d69
 8002d8c:	08002d69 	.word	0x08002d69
 8002d90:	08002d69 	.word	0x08002d69
 8002d94:	08002d69 	.word	0x08002d69
 8002d98:	08002ded 	.word	0x08002ded
 8002d9c:	08002d69 	.word	0x08002d69
 8002da0:	08002d69 	.word	0x08002d69
 8002da4:	08002d69 	.word	0x08002d69
 8002da8:	08002d69 	.word	0x08002d69
 8002dac:	08002efb 	.word	0x08002efb
 8002db0:	08002e1d 	.word	0x08002e1d
 8002db4:	08002edd 	.word	0x08002edd
 8002db8:	08002d69 	.word	0x08002d69
 8002dbc:	08002d69 	.word	0x08002d69
 8002dc0:	08002f1d 	.word	0x08002f1d
 8002dc4:	08002d69 	.word	0x08002d69
 8002dc8:	08002e1d 	.word	0x08002e1d
 8002dcc:	08002d69 	.word	0x08002d69
 8002dd0:	08002d69 	.word	0x08002d69
 8002dd4:	08002ee5 	.word	0x08002ee5
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	1d1a      	adds	r2, r3, #4
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	602a      	str	r2, [r5, #0]
 8002de0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0a4      	b.n	8002f36 <_printf_i+0x1f6>
 8002dec:	6820      	ldr	r0, [r4, #0]
 8002dee:	6829      	ldr	r1, [r5, #0]
 8002df0:	0606      	lsls	r6, r0, #24
 8002df2:	f101 0304 	add.w	r3, r1, #4
 8002df6:	d50a      	bpl.n	8002e0e <_printf_i+0xce>
 8002df8:	680e      	ldr	r6, [r1, #0]
 8002dfa:	602b      	str	r3, [r5, #0]
 8002dfc:	2e00      	cmp	r6, #0
 8002dfe:	da03      	bge.n	8002e08 <_printf_i+0xc8>
 8002e00:	232d      	movs	r3, #45	; 0x2d
 8002e02:	4276      	negs	r6, r6
 8002e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e08:	230a      	movs	r3, #10
 8002e0a:	485e      	ldr	r0, [pc, #376]	; (8002f84 <_printf_i+0x244>)
 8002e0c:	e019      	b.n	8002e42 <_printf_i+0x102>
 8002e0e:	680e      	ldr	r6, [r1, #0]
 8002e10:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	bf18      	it	ne
 8002e18:	b236      	sxthne	r6, r6
 8002e1a:	e7ef      	b.n	8002dfc <_printf_i+0xbc>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	1d19      	adds	r1, r3, #4
 8002e22:	6029      	str	r1, [r5, #0]
 8002e24:	0601      	lsls	r1, r0, #24
 8002e26:	d501      	bpl.n	8002e2c <_printf_i+0xec>
 8002e28:	681e      	ldr	r6, [r3, #0]
 8002e2a:	e002      	b.n	8002e32 <_printf_i+0xf2>
 8002e2c:	0646      	lsls	r6, r0, #25
 8002e2e:	d5fb      	bpl.n	8002e28 <_printf_i+0xe8>
 8002e30:	881e      	ldrh	r6, [r3, #0]
 8002e32:	2f6f      	cmp	r7, #111	; 0x6f
 8002e34:	bf0c      	ite	eq
 8002e36:	2308      	moveq	r3, #8
 8002e38:	230a      	movne	r3, #10
 8002e3a:	4852      	ldr	r0, [pc, #328]	; (8002f84 <_printf_i+0x244>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e42:	6865      	ldr	r5, [r4, #4]
 8002e44:	2d00      	cmp	r5, #0
 8002e46:	bfa8      	it	ge
 8002e48:	6821      	ldrge	r1, [r4, #0]
 8002e4a:	60a5      	str	r5, [r4, #8]
 8002e4c:	bfa4      	itt	ge
 8002e4e:	f021 0104 	bicge.w	r1, r1, #4
 8002e52:	6021      	strge	r1, [r4, #0]
 8002e54:	b90e      	cbnz	r6, 8002e5a <_printf_i+0x11a>
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	d04d      	beq.n	8002ef6 <_printf_i+0x1b6>
 8002e5a:	4615      	mov	r5, r2
 8002e5c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002e60:	fb03 6711 	mls	r7, r3, r1, r6
 8002e64:	5dc7      	ldrb	r7, [r0, r7]
 8002e66:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002e6a:	4637      	mov	r7, r6
 8002e6c:	42bb      	cmp	r3, r7
 8002e6e:	460e      	mov	r6, r1
 8002e70:	d9f4      	bls.n	8002e5c <_printf_i+0x11c>
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d10b      	bne.n	8002e8e <_printf_i+0x14e>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	07de      	lsls	r6, r3, #31
 8002e7a:	d508      	bpl.n	8002e8e <_printf_i+0x14e>
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	6861      	ldr	r1, [r4, #4]
 8002e80:	4299      	cmp	r1, r3
 8002e82:	bfde      	ittt	le
 8002e84:	2330      	movle	r3, #48	; 0x30
 8002e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e8e:	1b52      	subs	r2, r2, r5
 8002e90:	6122      	str	r2, [r4, #16]
 8002e92:	464b      	mov	r3, r9
 8002e94:	4621      	mov	r1, r4
 8002e96:	4640      	mov	r0, r8
 8002e98:	f8cd a000 	str.w	sl, [sp]
 8002e9c:	aa03      	add	r2, sp, #12
 8002e9e:	f7ff fedf 	bl	8002c60 <_printf_common>
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d14c      	bne.n	8002f40 <_printf_i+0x200>
 8002ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eaa:	b004      	add	sp, #16
 8002eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eb0:	4834      	ldr	r0, [pc, #208]	; (8002f84 <_printf_i+0x244>)
 8002eb2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002eb6:	6829      	ldr	r1, [r5, #0]
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	f851 6b04 	ldr.w	r6, [r1], #4
 8002ebe:	6029      	str	r1, [r5, #0]
 8002ec0:	061d      	lsls	r5, r3, #24
 8002ec2:	d514      	bpl.n	8002eee <_printf_i+0x1ae>
 8002ec4:	07df      	lsls	r7, r3, #31
 8002ec6:	bf44      	itt	mi
 8002ec8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ecc:	6023      	strmi	r3, [r4, #0]
 8002ece:	b91e      	cbnz	r6, 8002ed8 <_printf_i+0x198>
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	f023 0320 	bic.w	r3, r3, #32
 8002ed6:	6023      	str	r3, [r4, #0]
 8002ed8:	2310      	movs	r3, #16
 8002eda:	e7af      	b.n	8002e3c <_printf_i+0xfc>
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f043 0320 	orr.w	r3, r3, #32
 8002ee2:	6023      	str	r3, [r4, #0]
 8002ee4:	2378      	movs	r3, #120	; 0x78
 8002ee6:	4828      	ldr	r0, [pc, #160]	; (8002f88 <_printf_i+0x248>)
 8002ee8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002eec:	e7e3      	b.n	8002eb6 <_printf_i+0x176>
 8002eee:	0659      	lsls	r1, r3, #25
 8002ef0:	bf48      	it	mi
 8002ef2:	b2b6      	uxthmi	r6, r6
 8002ef4:	e7e6      	b.n	8002ec4 <_printf_i+0x184>
 8002ef6:	4615      	mov	r5, r2
 8002ef8:	e7bb      	b.n	8002e72 <_printf_i+0x132>
 8002efa:	682b      	ldr	r3, [r5, #0]
 8002efc:	6826      	ldr	r6, [r4, #0]
 8002efe:	1d18      	adds	r0, r3, #4
 8002f00:	6961      	ldr	r1, [r4, #20]
 8002f02:	6028      	str	r0, [r5, #0]
 8002f04:	0635      	lsls	r5, r6, #24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	d501      	bpl.n	8002f0e <_printf_i+0x1ce>
 8002f0a:	6019      	str	r1, [r3, #0]
 8002f0c:	e002      	b.n	8002f14 <_printf_i+0x1d4>
 8002f0e:	0670      	lsls	r0, r6, #25
 8002f10:	d5fb      	bpl.n	8002f0a <_printf_i+0x1ca>
 8002f12:	8019      	strh	r1, [r3, #0]
 8002f14:	2300      	movs	r3, #0
 8002f16:	4615      	mov	r5, r2
 8002f18:	6123      	str	r3, [r4, #16]
 8002f1a:	e7ba      	b.n	8002e92 <_printf_i+0x152>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	1d1a      	adds	r2, r3, #4
 8002f22:	602a      	str	r2, [r5, #0]
 8002f24:	681d      	ldr	r5, [r3, #0]
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f000 fa9b 	bl	8003464 <memchr>
 8002f2e:	b108      	cbz	r0, 8002f34 <_printf_i+0x1f4>
 8002f30:	1b40      	subs	r0, r0, r5
 8002f32:	6060      	str	r0, [r4, #4]
 8002f34:	6863      	ldr	r3, [r4, #4]
 8002f36:	6123      	str	r3, [r4, #16]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f3e:	e7a8      	b.n	8002e92 <_printf_i+0x152>
 8002f40:	462a      	mov	r2, r5
 8002f42:	4649      	mov	r1, r9
 8002f44:	4640      	mov	r0, r8
 8002f46:	6923      	ldr	r3, [r4, #16]
 8002f48:	47d0      	blx	sl
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	d0ab      	beq.n	8002ea6 <_printf_i+0x166>
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	079b      	lsls	r3, r3, #30
 8002f52:	d413      	bmi.n	8002f7c <_printf_i+0x23c>
 8002f54:	68e0      	ldr	r0, [r4, #12]
 8002f56:	9b03      	ldr	r3, [sp, #12]
 8002f58:	4298      	cmp	r0, r3
 8002f5a:	bfb8      	it	lt
 8002f5c:	4618      	movlt	r0, r3
 8002f5e:	e7a4      	b.n	8002eaa <_printf_i+0x16a>
 8002f60:	2301      	movs	r3, #1
 8002f62:	4632      	mov	r2, r6
 8002f64:	4649      	mov	r1, r9
 8002f66:	4640      	mov	r0, r8
 8002f68:	47d0      	blx	sl
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d09b      	beq.n	8002ea6 <_printf_i+0x166>
 8002f6e:	3501      	adds	r5, #1
 8002f70:	68e3      	ldr	r3, [r4, #12]
 8002f72:	9903      	ldr	r1, [sp, #12]
 8002f74:	1a5b      	subs	r3, r3, r1
 8002f76:	42ab      	cmp	r3, r5
 8002f78:	dcf2      	bgt.n	8002f60 <_printf_i+0x220>
 8002f7a:	e7eb      	b.n	8002f54 <_printf_i+0x214>
 8002f7c:	2500      	movs	r5, #0
 8002f7e:	f104 0619 	add.w	r6, r4, #25
 8002f82:	e7f5      	b.n	8002f70 <_printf_i+0x230>
 8002f84:	0800365d 	.word	0x0800365d
 8002f88:	0800366e 	.word	0x0800366e

08002f8c <_sbrk_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	2300      	movs	r3, #0
 8002f90:	4d05      	ldr	r5, [pc, #20]	; (8002fa8 <_sbrk_r+0x1c>)
 8002f92:	4604      	mov	r4, r0
 8002f94:	4608      	mov	r0, r1
 8002f96:	602b      	str	r3, [r5, #0]
 8002f98:	f7fd fbde 	bl	8000758 <_sbrk>
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	d102      	bne.n	8002fa6 <_sbrk_r+0x1a>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	b103      	cbz	r3, 8002fa6 <_sbrk_r+0x1a>
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	bd38      	pop	{r3, r4, r5, pc}
 8002fa8:	2000010c 	.word	0x2000010c

08002fac <__sread>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	460c      	mov	r4, r1
 8002fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb4:	f000 fab8 	bl	8003528 <_read_r>
 8002fb8:	2800      	cmp	r0, #0
 8002fba:	bfab      	itete	ge
 8002fbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fbe:	89a3      	ldrhlt	r3, [r4, #12]
 8002fc0:	181b      	addge	r3, r3, r0
 8002fc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fc6:	bfac      	ite	ge
 8002fc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fca:	81a3      	strhlt	r3, [r4, #12]
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <__swrite>:
 8002fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd2:	461f      	mov	r7, r3
 8002fd4:	898b      	ldrh	r3, [r1, #12]
 8002fd6:	4605      	mov	r5, r0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	460c      	mov	r4, r1
 8002fdc:	4616      	mov	r6, r2
 8002fde:	d505      	bpl.n	8002fec <__swrite+0x1e>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fe8:	f000 f9c4 	bl	8003374 <_lseek_r>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	4632      	mov	r2, r6
 8002ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003002:	f000 b869 	b.w	80030d8 <_write_r>

08003006 <__sseek>:
 8003006:	b510      	push	{r4, lr}
 8003008:	460c      	mov	r4, r1
 800300a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800300e:	f000 f9b1 	bl	8003374 <_lseek_r>
 8003012:	1c43      	adds	r3, r0, #1
 8003014:	89a3      	ldrh	r3, [r4, #12]
 8003016:	bf15      	itete	ne
 8003018:	6560      	strne	r0, [r4, #84]	; 0x54
 800301a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800301e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003022:	81a3      	strheq	r3, [r4, #12]
 8003024:	bf18      	it	ne
 8003026:	81a3      	strhne	r3, [r4, #12]
 8003028:	bd10      	pop	{r4, pc}

0800302a <__sclose>:
 800302a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800302e:	f000 b8d3 	b.w	80031d8 <_close_r>
	...

08003034 <__swbuf_r>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	460e      	mov	r6, r1
 8003038:	4614      	mov	r4, r2
 800303a:	4605      	mov	r5, r0
 800303c:	b118      	cbz	r0, 8003046 <__swbuf_r+0x12>
 800303e:	6983      	ldr	r3, [r0, #24]
 8003040:	b90b      	cbnz	r3, 8003046 <__swbuf_r+0x12>
 8003042:	f7ff fb81 	bl	8002748 <__sinit>
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <__swbuf_r+0x98>)
 8003048:	429c      	cmp	r4, r3
 800304a:	d12b      	bne.n	80030a4 <__swbuf_r+0x70>
 800304c:	686c      	ldr	r4, [r5, #4]
 800304e:	69a3      	ldr	r3, [r4, #24]
 8003050:	60a3      	str	r3, [r4, #8]
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	071a      	lsls	r2, r3, #28
 8003056:	d52f      	bpl.n	80030b8 <__swbuf_r+0x84>
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	b36b      	cbz	r3, 80030b8 <__swbuf_r+0x84>
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	6820      	ldr	r0, [r4, #0]
 8003060:	b2f6      	uxtb	r6, r6
 8003062:	1ac0      	subs	r0, r0, r3
 8003064:	6963      	ldr	r3, [r4, #20]
 8003066:	4637      	mov	r7, r6
 8003068:	4283      	cmp	r3, r0
 800306a:	dc04      	bgt.n	8003076 <__swbuf_r+0x42>
 800306c:	4621      	mov	r1, r4
 800306e:	4628      	mov	r0, r5
 8003070:	f000 f944 	bl	80032fc <_fflush_r>
 8003074:	bb30      	cbnz	r0, 80030c4 <__swbuf_r+0x90>
 8003076:	68a3      	ldr	r3, [r4, #8]
 8003078:	3001      	adds	r0, #1
 800307a:	3b01      	subs	r3, #1
 800307c:	60a3      	str	r3, [r4, #8]
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	6022      	str	r2, [r4, #0]
 8003084:	701e      	strb	r6, [r3, #0]
 8003086:	6963      	ldr	r3, [r4, #20]
 8003088:	4283      	cmp	r3, r0
 800308a:	d004      	beq.n	8003096 <__swbuf_r+0x62>
 800308c:	89a3      	ldrh	r3, [r4, #12]
 800308e:	07db      	lsls	r3, r3, #31
 8003090:	d506      	bpl.n	80030a0 <__swbuf_r+0x6c>
 8003092:	2e0a      	cmp	r6, #10
 8003094:	d104      	bne.n	80030a0 <__swbuf_r+0x6c>
 8003096:	4621      	mov	r1, r4
 8003098:	4628      	mov	r0, r5
 800309a:	f000 f92f 	bl	80032fc <_fflush_r>
 800309e:	b988      	cbnz	r0, 80030c4 <__swbuf_r+0x90>
 80030a0:	4638      	mov	r0, r7
 80030a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <__swbuf_r+0x9c>)
 80030a6:	429c      	cmp	r4, r3
 80030a8:	d101      	bne.n	80030ae <__swbuf_r+0x7a>
 80030aa:	68ac      	ldr	r4, [r5, #8]
 80030ac:	e7cf      	b.n	800304e <__swbuf_r+0x1a>
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <__swbuf_r+0xa0>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	bf08      	it	eq
 80030b4:	68ec      	ldreq	r4, [r5, #12]
 80030b6:	e7ca      	b.n	800304e <__swbuf_r+0x1a>
 80030b8:	4621      	mov	r1, r4
 80030ba:	4628      	mov	r0, r5
 80030bc:	f000 f81e 	bl	80030fc <__swsetup_r>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	d0cb      	beq.n	800305c <__swbuf_r+0x28>
 80030c4:	f04f 37ff 	mov.w	r7, #4294967295
 80030c8:	e7ea      	b.n	80030a0 <__swbuf_r+0x6c>
 80030ca:	bf00      	nop
 80030cc:	0800360c 	.word	0x0800360c
 80030d0:	0800362c 	.word	0x0800362c
 80030d4:	080035ec 	.word	0x080035ec

080030d8 <_write_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	2200      	movs	r2, #0
 80030e2:	4d05      	ldr	r5, [pc, #20]	; (80030f8 <_write_r+0x20>)
 80030e4:	602a      	str	r2, [r5, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f7fd faea 	bl	80006c0 <_write>
 80030ec:	1c43      	adds	r3, r0, #1
 80030ee:	d102      	bne.n	80030f6 <_write_r+0x1e>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	b103      	cbz	r3, 80030f6 <_write_r+0x1e>
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	bd38      	pop	{r3, r4, r5, pc}
 80030f8:	2000010c 	.word	0x2000010c

080030fc <__swsetup_r>:
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <__swsetup_r+0xcc>)
 80030fe:	b570      	push	{r4, r5, r6, lr}
 8003100:	681d      	ldr	r5, [r3, #0]
 8003102:	4606      	mov	r6, r0
 8003104:	460c      	mov	r4, r1
 8003106:	b125      	cbz	r5, 8003112 <__swsetup_r+0x16>
 8003108:	69ab      	ldr	r3, [r5, #24]
 800310a:	b913      	cbnz	r3, 8003112 <__swsetup_r+0x16>
 800310c:	4628      	mov	r0, r5
 800310e:	f7ff fb1b 	bl	8002748 <__sinit>
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <__swsetup_r+0xd0>)
 8003114:	429c      	cmp	r4, r3
 8003116:	d10f      	bne.n	8003138 <__swsetup_r+0x3c>
 8003118:	686c      	ldr	r4, [r5, #4]
 800311a:	89a3      	ldrh	r3, [r4, #12]
 800311c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003120:	0719      	lsls	r1, r3, #28
 8003122:	d42c      	bmi.n	800317e <__swsetup_r+0x82>
 8003124:	06dd      	lsls	r5, r3, #27
 8003126:	d411      	bmi.n	800314c <__swsetup_r+0x50>
 8003128:	2309      	movs	r3, #9
 800312a:	6033      	str	r3, [r6, #0]
 800312c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	81a3      	strh	r3, [r4, #12]
 8003136:	e03e      	b.n	80031b6 <__swsetup_r+0xba>
 8003138:	4b25      	ldr	r3, [pc, #148]	; (80031d0 <__swsetup_r+0xd4>)
 800313a:	429c      	cmp	r4, r3
 800313c:	d101      	bne.n	8003142 <__swsetup_r+0x46>
 800313e:	68ac      	ldr	r4, [r5, #8]
 8003140:	e7eb      	b.n	800311a <__swsetup_r+0x1e>
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <__swsetup_r+0xd8>)
 8003144:	429c      	cmp	r4, r3
 8003146:	bf08      	it	eq
 8003148:	68ec      	ldreq	r4, [r5, #12]
 800314a:	e7e6      	b.n	800311a <__swsetup_r+0x1e>
 800314c:	0758      	lsls	r0, r3, #29
 800314e:	d512      	bpl.n	8003176 <__swsetup_r+0x7a>
 8003150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003152:	b141      	cbz	r1, 8003166 <__swsetup_r+0x6a>
 8003154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003158:	4299      	cmp	r1, r3
 800315a:	d002      	beq.n	8003162 <__swsetup_r+0x66>
 800315c:	4630      	mov	r0, r6
 800315e:	f000 f99b 	bl	8003498 <_free_r>
 8003162:	2300      	movs	r3, #0
 8003164:	6363      	str	r3, [r4, #52]	; 0x34
 8003166:	89a3      	ldrh	r3, [r4, #12]
 8003168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800316c:	81a3      	strh	r3, [r4, #12]
 800316e:	2300      	movs	r3, #0
 8003170:	6063      	str	r3, [r4, #4]
 8003172:	6923      	ldr	r3, [r4, #16]
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	89a3      	ldrh	r3, [r4, #12]
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	6923      	ldr	r3, [r4, #16]
 8003180:	b94b      	cbnz	r3, 8003196 <__swsetup_r+0x9a>
 8003182:	89a3      	ldrh	r3, [r4, #12]
 8003184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800318c:	d003      	beq.n	8003196 <__swsetup_r+0x9a>
 800318e:	4621      	mov	r1, r4
 8003190:	4630      	mov	r0, r6
 8003192:	f000 f927 	bl	80033e4 <__smakebuf_r>
 8003196:	89a0      	ldrh	r0, [r4, #12]
 8003198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800319c:	f010 0301 	ands.w	r3, r0, #1
 80031a0:	d00a      	beq.n	80031b8 <__swsetup_r+0xbc>
 80031a2:	2300      	movs	r3, #0
 80031a4:	60a3      	str	r3, [r4, #8]
 80031a6:	6963      	ldr	r3, [r4, #20]
 80031a8:	425b      	negs	r3, r3
 80031aa:	61a3      	str	r3, [r4, #24]
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	b943      	cbnz	r3, 80031c2 <__swsetup_r+0xc6>
 80031b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031b4:	d1ba      	bne.n	800312c <__swsetup_r+0x30>
 80031b6:	bd70      	pop	{r4, r5, r6, pc}
 80031b8:	0781      	lsls	r1, r0, #30
 80031ba:	bf58      	it	pl
 80031bc:	6963      	ldrpl	r3, [r4, #20]
 80031be:	60a3      	str	r3, [r4, #8]
 80031c0:	e7f4      	b.n	80031ac <__swsetup_r+0xb0>
 80031c2:	2000      	movs	r0, #0
 80031c4:	e7f7      	b.n	80031b6 <__swsetup_r+0xba>
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c
 80031cc:	0800360c 	.word	0x0800360c
 80031d0:	0800362c 	.word	0x0800362c
 80031d4:	080035ec 	.word	0x080035ec

080031d8 <_close_r>:
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	2300      	movs	r3, #0
 80031dc:	4d05      	ldr	r5, [pc, #20]	; (80031f4 <_close_r+0x1c>)
 80031de:	4604      	mov	r4, r0
 80031e0:	4608      	mov	r0, r1
 80031e2:	602b      	str	r3, [r5, #0]
 80031e4:	f7fd fa88 	bl	80006f8 <_close>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_close_r+0x1a>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_close_r+0x1a>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	2000010c 	.word	0x2000010c

080031f8 <__sflush_r>:
 80031f8:	898a      	ldrh	r2, [r1, #12]
 80031fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fc:	4605      	mov	r5, r0
 80031fe:	0710      	lsls	r0, r2, #28
 8003200:	460c      	mov	r4, r1
 8003202:	d457      	bmi.n	80032b4 <__sflush_r+0xbc>
 8003204:	684b      	ldr	r3, [r1, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	dc04      	bgt.n	8003214 <__sflush_r+0x1c>
 800320a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	dc01      	bgt.n	8003214 <__sflush_r+0x1c>
 8003210:	2000      	movs	r0, #0
 8003212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003216:	2e00      	cmp	r6, #0
 8003218:	d0fa      	beq.n	8003210 <__sflush_r+0x18>
 800321a:	2300      	movs	r3, #0
 800321c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003220:	682f      	ldr	r7, [r5, #0]
 8003222:	602b      	str	r3, [r5, #0]
 8003224:	d032      	beq.n	800328c <__sflush_r+0x94>
 8003226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003228:	89a3      	ldrh	r3, [r4, #12]
 800322a:	075a      	lsls	r2, r3, #29
 800322c:	d505      	bpl.n	800323a <__sflush_r+0x42>
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	1ac0      	subs	r0, r0, r3
 8003232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003234:	b10b      	cbz	r3, 800323a <__sflush_r+0x42>
 8003236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003238:	1ac0      	subs	r0, r0, r3
 800323a:	2300      	movs	r3, #0
 800323c:	4602      	mov	r2, r0
 800323e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003240:	4628      	mov	r0, r5
 8003242:	6a21      	ldr	r1, [r4, #32]
 8003244:	47b0      	blx	r6
 8003246:	1c43      	adds	r3, r0, #1
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	d106      	bne.n	800325a <__sflush_r+0x62>
 800324c:	6829      	ldr	r1, [r5, #0]
 800324e:	291d      	cmp	r1, #29
 8003250:	d82c      	bhi.n	80032ac <__sflush_r+0xb4>
 8003252:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <__sflush_r+0x100>)
 8003254:	40ca      	lsrs	r2, r1
 8003256:	07d6      	lsls	r6, r2, #31
 8003258:	d528      	bpl.n	80032ac <__sflush_r+0xb4>
 800325a:	2200      	movs	r2, #0
 800325c:	6062      	str	r2, [r4, #4]
 800325e:	6922      	ldr	r2, [r4, #16]
 8003260:	04d9      	lsls	r1, r3, #19
 8003262:	6022      	str	r2, [r4, #0]
 8003264:	d504      	bpl.n	8003270 <__sflush_r+0x78>
 8003266:	1c42      	adds	r2, r0, #1
 8003268:	d101      	bne.n	800326e <__sflush_r+0x76>
 800326a:	682b      	ldr	r3, [r5, #0]
 800326c:	b903      	cbnz	r3, 8003270 <__sflush_r+0x78>
 800326e:	6560      	str	r0, [r4, #84]	; 0x54
 8003270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003272:	602f      	str	r7, [r5, #0]
 8003274:	2900      	cmp	r1, #0
 8003276:	d0cb      	beq.n	8003210 <__sflush_r+0x18>
 8003278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800327c:	4299      	cmp	r1, r3
 800327e:	d002      	beq.n	8003286 <__sflush_r+0x8e>
 8003280:	4628      	mov	r0, r5
 8003282:	f000 f909 	bl	8003498 <_free_r>
 8003286:	2000      	movs	r0, #0
 8003288:	6360      	str	r0, [r4, #52]	; 0x34
 800328a:	e7c2      	b.n	8003212 <__sflush_r+0x1a>
 800328c:	6a21      	ldr	r1, [r4, #32]
 800328e:	2301      	movs	r3, #1
 8003290:	4628      	mov	r0, r5
 8003292:	47b0      	blx	r6
 8003294:	1c41      	adds	r1, r0, #1
 8003296:	d1c7      	bne.n	8003228 <__sflush_r+0x30>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0c4      	beq.n	8003228 <__sflush_r+0x30>
 800329e:	2b1d      	cmp	r3, #29
 80032a0:	d001      	beq.n	80032a6 <__sflush_r+0xae>
 80032a2:	2b16      	cmp	r3, #22
 80032a4:	d101      	bne.n	80032aa <__sflush_r+0xb2>
 80032a6:	602f      	str	r7, [r5, #0]
 80032a8:	e7b2      	b.n	8003210 <__sflush_r+0x18>
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	81a3      	strh	r3, [r4, #12]
 80032b2:	e7ae      	b.n	8003212 <__sflush_r+0x1a>
 80032b4:	690f      	ldr	r7, [r1, #16]
 80032b6:	2f00      	cmp	r7, #0
 80032b8:	d0aa      	beq.n	8003210 <__sflush_r+0x18>
 80032ba:	0793      	lsls	r3, r2, #30
 80032bc:	bf18      	it	ne
 80032be:	2300      	movne	r3, #0
 80032c0:	680e      	ldr	r6, [r1, #0]
 80032c2:	bf08      	it	eq
 80032c4:	694b      	ldreq	r3, [r1, #20]
 80032c6:	1bf6      	subs	r6, r6, r7
 80032c8:	600f      	str	r7, [r1, #0]
 80032ca:	608b      	str	r3, [r1, #8]
 80032cc:	2e00      	cmp	r6, #0
 80032ce:	dd9f      	ble.n	8003210 <__sflush_r+0x18>
 80032d0:	4633      	mov	r3, r6
 80032d2:	463a      	mov	r2, r7
 80032d4:	4628      	mov	r0, r5
 80032d6:	6a21      	ldr	r1, [r4, #32]
 80032d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80032dc:	47e0      	blx	ip
 80032de:	2800      	cmp	r0, #0
 80032e0:	dc06      	bgt.n	80032f0 <__sflush_r+0xf8>
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ec:	81a3      	strh	r3, [r4, #12]
 80032ee:	e790      	b.n	8003212 <__sflush_r+0x1a>
 80032f0:	4407      	add	r7, r0
 80032f2:	1a36      	subs	r6, r6, r0
 80032f4:	e7ea      	b.n	80032cc <__sflush_r+0xd4>
 80032f6:	bf00      	nop
 80032f8:	20400001 	.word	0x20400001

080032fc <_fflush_r>:
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	690b      	ldr	r3, [r1, #16]
 8003300:	4605      	mov	r5, r0
 8003302:	460c      	mov	r4, r1
 8003304:	b913      	cbnz	r3, 800330c <_fflush_r+0x10>
 8003306:	2500      	movs	r5, #0
 8003308:	4628      	mov	r0, r5
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	b118      	cbz	r0, 8003316 <_fflush_r+0x1a>
 800330e:	6983      	ldr	r3, [r0, #24]
 8003310:	b90b      	cbnz	r3, 8003316 <_fflush_r+0x1a>
 8003312:	f7ff fa19 	bl	8002748 <__sinit>
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <_fflush_r+0x6c>)
 8003318:	429c      	cmp	r4, r3
 800331a:	d11b      	bne.n	8003354 <_fflush_r+0x58>
 800331c:	686c      	ldr	r4, [r5, #4]
 800331e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0ef      	beq.n	8003306 <_fflush_r+0xa>
 8003326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003328:	07d0      	lsls	r0, r2, #31
 800332a:	d404      	bmi.n	8003336 <_fflush_r+0x3a>
 800332c:	0599      	lsls	r1, r3, #22
 800332e:	d402      	bmi.n	8003336 <_fflush_r+0x3a>
 8003330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003332:	f7ff faa7 	bl	8002884 <__retarget_lock_acquire_recursive>
 8003336:	4628      	mov	r0, r5
 8003338:	4621      	mov	r1, r4
 800333a:	f7ff ff5d 	bl	80031f8 <__sflush_r>
 800333e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003340:	4605      	mov	r5, r0
 8003342:	07da      	lsls	r2, r3, #31
 8003344:	d4e0      	bmi.n	8003308 <_fflush_r+0xc>
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	059b      	lsls	r3, r3, #22
 800334a:	d4dd      	bmi.n	8003308 <_fflush_r+0xc>
 800334c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800334e:	f7ff fa9a 	bl	8002886 <__retarget_lock_release_recursive>
 8003352:	e7d9      	b.n	8003308 <_fflush_r+0xc>
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <_fflush_r+0x70>)
 8003356:	429c      	cmp	r4, r3
 8003358:	d101      	bne.n	800335e <_fflush_r+0x62>
 800335a:	68ac      	ldr	r4, [r5, #8]
 800335c:	e7df      	b.n	800331e <_fflush_r+0x22>
 800335e:	4b04      	ldr	r3, [pc, #16]	; (8003370 <_fflush_r+0x74>)
 8003360:	429c      	cmp	r4, r3
 8003362:	bf08      	it	eq
 8003364:	68ec      	ldreq	r4, [r5, #12]
 8003366:	e7da      	b.n	800331e <_fflush_r+0x22>
 8003368:	0800360c 	.word	0x0800360c
 800336c:	0800362c 	.word	0x0800362c
 8003370:	080035ec 	.word	0x080035ec

08003374 <_lseek_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4604      	mov	r4, r0
 8003378:	4608      	mov	r0, r1
 800337a:	4611      	mov	r1, r2
 800337c:	2200      	movs	r2, #0
 800337e:	4d05      	ldr	r5, [pc, #20]	; (8003394 <_lseek_r+0x20>)
 8003380:	602a      	str	r2, [r5, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	f7fd f9dc 	bl	8000740 <_lseek>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_lseek_r+0x1e>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	b103      	cbz	r3, 8003392 <_lseek_r+0x1e>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	2000010c 	.word	0x2000010c

08003398 <__swhatbuf_r>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	460e      	mov	r6, r1
 800339c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a0:	4614      	mov	r4, r2
 80033a2:	2900      	cmp	r1, #0
 80033a4:	461d      	mov	r5, r3
 80033a6:	b096      	sub	sp, #88	; 0x58
 80033a8:	da08      	bge.n	80033bc <__swhatbuf_r+0x24>
 80033aa:	2200      	movs	r2, #0
 80033ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80033b0:	602a      	str	r2, [r5, #0]
 80033b2:	061a      	lsls	r2, r3, #24
 80033b4:	d410      	bmi.n	80033d8 <__swhatbuf_r+0x40>
 80033b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ba:	e00e      	b.n	80033da <__swhatbuf_r+0x42>
 80033bc:	466a      	mov	r2, sp
 80033be:	f000 f8c5 	bl	800354c <_fstat_r>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	dbf1      	blt.n	80033aa <__swhatbuf_r+0x12>
 80033c6:	9a01      	ldr	r2, [sp, #4]
 80033c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033d0:	425a      	negs	r2, r3
 80033d2:	415a      	adcs	r2, r3
 80033d4:	602a      	str	r2, [r5, #0]
 80033d6:	e7ee      	b.n	80033b6 <__swhatbuf_r+0x1e>
 80033d8:	2340      	movs	r3, #64	; 0x40
 80033da:	2000      	movs	r0, #0
 80033dc:	6023      	str	r3, [r4, #0]
 80033de:	b016      	add	sp, #88	; 0x58
 80033e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080033e4 <__smakebuf_r>:
 80033e4:	898b      	ldrh	r3, [r1, #12]
 80033e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033e8:	079d      	lsls	r5, r3, #30
 80033ea:	4606      	mov	r6, r0
 80033ec:	460c      	mov	r4, r1
 80033ee:	d507      	bpl.n	8003400 <__smakebuf_r+0x1c>
 80033f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	6123      	str	r3, [r4, #16]
 80033f8:	2301      	movs	r3, #1
 80033fa:	6163      	str	r3, [r4, #20]
 80033fc:	b002      	add	sp, #8
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	466a      	mov	r2, sp
 8003402:	ab01      	add	r3, sp, #4
 8003404:	f7ff ffc8 	bl	8003398 <__swhatbuf_r>
 8003408:	9900      	ldr	r1, [sp, #0]
 800340a:	4605      	mov	r5, r0
 800340c:	4630      	mov	r0, r6
 800340e:	f7ff fa5b 	bl	80028c8 <_malloc_r>
 8003412:	b948      	cbnz	r0, 8003428 <__smakebuf_r+0x44>
 8003414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003418:	059a      	lsls	r2, r3, #22
 800341a:	d4ef      	bmi.n	80033fc <__smakebuf_r+0x18>
 800341c:	f023 0303 	bic.w	r3, r3, #3
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	e7e3      	b.n	80033f0 <__smakebuf_r+0xc>
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <__smakebuf_r+0x7c>)
 800342a:	62b3      	str	r3, [r6, #40]	; 0x28
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	6020      	str	r0, [r4, #0]
 8003430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003434:	81a3      	strh	r3, [r4, #12]
 8003436:	9b00      	ldr	r3, [sp, #0]
 8003438:	6120      	str	r0, [r4, #16]
 800343a:	6163      	str	r3, [r4, #20]
 800343c:	9b01      	ldr	r3, [sp, #4]
 800343e:	b15b      	cbz	r3, 8003458 <__smakebuf_r+0x74>
 8003440:	4630      	mov	r0, r6
 8003442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003446:	f000 f893 	bl	8003570 <_isatty_r>
 800344a:	b128      	cbz	r0, 8003458 <__smakebuf_r+0x74>
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	81a3      	strh	r3, [r4, #12]
 8003458:	89a0      	ldrh	r0, [r4, #12]
 800345a:	4305      	orrs	r5, r0
 800345c:	81a5      	strh	r5, [r4, #12]
 800345e:	e7cd      	b.n	80033fc <__smakebuf_r+0x18>
 8003460:	080026e1 	.word	0x080026e1

08003464 <memchr>:
 8003464:	4603      	mov	r3, r0
 8003466:	b510      	push	{r4, lr}
 8003468:	b2c9      	uxtb	r1, r1
 800346a:	4402      	add	r2, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	4618      	mov	r0, r3
 8003470:	d101      	bne.n	8003476 <memchr+0x12>
 8003472:	2000      	movs	r0, #0
 8003474:	e003      	b.n	800347e <memchr+0x1a>
 8003476:	7804      	ldrb	r4, [r0, #0]
 8003478:	3301      	adds	r3, #1
 800347a:	428c      	cmp	r4, r1
 800347c:	d1f6      	bne.n	800346c <memchr+0x8>
 800347e:	bd10      	pop	{r4, pc}

08003480 <__malloc_lock>:
 8003480:	4801      	ldr	r0, [pc, #4]	; (8003488 <__malloc_lock+0x8>)
 8003482:	f7ff b9ff 	b.w	8002884 <__retarget_lock_acquire_recursive>
 8003486:	bf00      	nop
 8003488:	20000100 	.word	0x20000100

0800348c <__malloc_unlock>:
 800348c:	4801      	ldr	r0, [pc, #4]	; (8003494 <__malloc_unlock+0x8>)
 800348e:	f7ff b9fa 	b.w	8002886 <__retarget_lock_release_recursive>
 8003492:	bf00      	nop
 8003494:	20000100 	.word	0x20000100

08003498 <_free_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4605      	mov	r5, r0
 800349c:	2900      	cmp	r1, #0
 800349e:	d040      	beq.n	8003522 <_free_r+0x8a>
 80034a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a4:	1f0c      	subs	r4, r1, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bfb8      	it	lt
 80034aa:	18e4      	addlt	r4, r4, r3
 80034ac:	f7ff ffe8 	bl	8003480 <__malloc_lock>
 80034b0:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <_free_r+0x8c>)
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	b933      	cbnz	r3, 80034c4 <_free_r+0x2c>
 80034b6:	6063      	str	r3, [r4, #4]
 80034b8:	6014      	str	r4, [r2, #0]
 80034ba:	4628      	mov	r0, r5
 80034bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034c0:	f7ff bfe4 	b.w	800348c <__malloc_unlock>
 80034c4:	42a3      	cmp	r3, r4
 80034c6:	d908      	bls.n	80034da <_free_r+0x42>
 80034c8:	6820      	ldr	r0, [r4, #0]
 80034ca:	1821      	adds	r1, r4, r0
 80034cc:	428b      	cmp	r3, r1
 80034ce:	bf01      	itttt	eq
 80034d0:	6819      	ldreq	r1, [r3, #0]
 80034d2:	685b      	ldreq	r3, [r3, #4]
 80034d4:	1809      	addeq	r1, r1, r0
 80034d6:	6021      	streq	r1, [r4, #0]
 80034d8:	e7ed      	b.n	80034b6 <_free_r+0x1e>
 80034da:	461a      	mov	r2, r3
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	b10b      	cbz	r3, 80034e4 <_free_r+0x4c>
 80034e0:	42a3      	cmp	r3, r4
 80034e2:	d9fa      	bls.n	80034da <_free_r+0x42>
 80034e4:	6811      	ldr	r1, [r2, #0]
 80034e6:	1850      	adds	r0, r2, r1
 80034e8:	42a0      	cmp	r0, r4
 80034ea:	d10b      	bne.n	8003504 <_free_r+0x6c>
 80034ec:	6820      	ldr	r0, [r4, #0]
 80034ee:	4401      	add	r1, r0
 80034f0:	1850      	adds	r0, r2, r1
 80034f2:	4283      	cmp	r3, r0
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	d1e0      	bne.n	80034ba <_free_r+0x22>
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	4401      	add	r1, r0
 80034fe:	6011      	str	r1, [r2, #0]
 8003500:	6053      	str	r3, [r2, #4]
 8003502:	e7da      	b.n	80034ba <_free_r+0x22>
 8003504:	d902      	bls.n	800350c <_free_r+0x74>
 8003506:	230c      	movs	r3, #12
 8003508:	602b      	str	r3, [r5, #0]
 800350a:	e7d6      	b.n	80034ba <_free_r+0x22>
 800350c:	6820      	ldr	r0, [r4, #0]
 800350e:	1821      	adds	r1, r4, r0
 8003510:	428b      	cmp	r3, r1
 8003512:	bf01      	itttt	eq
 8003514:	6819      	ldreq	r1, [r3, #0]
 8003516:	685b      	ldreq	r3, [r3, #4]
 8003518:	1809      	addeq	r1, r1, r0
 800351a:	6021      	streq	r1, [r4, #0]
 800351c:	6063      	str	r3, [r4, #4]
 800351e:	6054      	str	r4, [r2, #4]
 8003520:	e7cb      	b.n	80034ba <_free_r+0x22>
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	20000104 	.word	0x20000104

08003528 <_read_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4604      	mov	r4, r0
 800352c:	4608      	mov	r0, r1
 800352e:	4611      	mov	r1, r2
 8003530:	2200      	movs	r2, #0
 8003532:	4d05      	ldr	r5, [pc, #20]	; (8003548 <_read_r+0x20>)
 8003534:	602a      	str	r2, [r5, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	f7fd f8a5 	bl	8000686 <_read>
 800353c:	1c43      	adds	r3, r0, #1
 800353e:	d102      	bne.n	8003546 <_read_r+0x1e>
 8003540:	682b      	ldr	r3, [r5, #0]
 8003542:	b103      	cbz	r3, 8003546 <_read_r+0x1e>
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	bd38      	pop	{r3, r4, r5, pc}
 8003548:	2000010c 	.word	0x2000010c

0800354c <_fstat_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	2300      	movs	r3, #0
 8003550:	4d06      	ldr	r5, [pc, #24]	; (800356c <_fstat_r+0x20>)
 8003552:	4604      	mov	r4, r0
 8003554:	4608      	mov	r0, r1
 8003556:	4611      	mov	r1, r2
 8003558:	602b      	str	r3, [r5, #0]
 800355a:	f7fd f8d8 	bl	800070e <_fstat>
 800355e:	1c43      	adds	r3, r0, #1
 8003560:	d102      	bne.n	8003568 <_fstat_r+0x1c>
 8003562:	682b      	ldr	r3, [r5, #0]
 8003564:	b103      	cbz	r3, 8003568 <_fstat_r+0x1c>
 8003566:	6023      	str	r3, [r4, #0]
 8003568:	bd38      	pop	{r3, r4, r5, pc}
 800356a:	bf00      	nop
 800356c:	2000010c 	.word	0x2000010c

08003570 <_isatty_r>:
 8003570:	b538      	push	{r3, r4, r5, lr}
 8003572:	2300      	movs	r3, #0
 8003574:	4d05      	ldr	r5, [pc, #20]	; (800358c <_isatty_r+0x1c>)
 8003576:	4604      	mov	r4, r0
 8003578:	4608      	mov	r0, r1
 800357a:	602b      	str	r3, [r5, #0]
 800357c:	f7fd f8d6 	bl	800072c <_isatty>
 8003580:	1c43      	adds	r3, r0, #1
 8003582:	d102      	bne.n	800358a <_isatty_r+0x1a>
 8003584:	682b      	ldr	r3, [r5, #0]
 8003586:	b103      	cbz	r3, 800358a <_isatty_r+0x1a>
 8003588:	6023      	str	r3, [r4, #0]
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	2000010c 	.word	0x2000010c

08003590 <_init>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	bf00      	nop
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr

0800359c <_fini>:
 800359c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359e:	bf00      	nop
 80035a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035a2:	bc08      	pop	{r3}
 80035a4:	469e      	mov	lr, r3
 80035a6:	4770      	bx	lr
